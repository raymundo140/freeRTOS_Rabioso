
freeRTOS_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000592c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08105bcc  08105bcc  00015bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08105c84  08105c84  00015c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08105c88  08105c88  00015c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  10000000  08105c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004ad4  10000078  08105d04  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10004b4c  08105d04  00024b4c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001bd61  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003679  00000000  00000000  0003be09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000015a0  00000000  00000000  0003f488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001448  00000000  00000000  00040a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003aa41  00000000  00000000  00041e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00017be5  00000000  00000000  0007c8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018ca1b  00000000  00000000  00094496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00220eb1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005ee0  00000000  00000000  00220f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000078 	.word	0x10000078
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08105bb4 	.word	0x08105bb4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000007c 	.word	0x1000007c
 81002dc:	08105bb4 	.word	0x08105bb4

081002e0 <__aeabi_drsub>:
 81002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002e4:	e002      	b.n	81002ec <__adddf3>
 81002e6:	bf00      	nop

081002e8 <__aeabi_dsub>:
 81002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002ec <__adddf3>:
 81002ec:	b530      	push	{r4, r5, lr}
 81002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002f6:	ea94 0f05 	teq	r4, r5
 81002fa:	bf08      	it	eq
 81002fc:	ea90 0f02 	teqeq	r0, r2
 8100300:	bf1f      	itttt	ne
 8100302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8100306:	ea55 0c02 	orrsne.w	ip, r5, r2
 810030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 810030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100312:	f000 80e2 	beq.w	81004da <__adddf3+0x1ee>
 8100316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 810031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 810031e:	bfb8      	it	lt
 8100320:	426d      	neglt	r5, r5
 8100322:	dd0c      	ble.n	810033e <__adddf3+0x52>
 8100324:	442c      	add	r4, r5
 8100326:	ea80 0202 	eor.w	r2, r0, r2
 810032a:	ea81 0303 	eor.w	r3, r1, r3
 810032e:	ea82 0000 	eor.w	r0, r2, r0
 8100332:	ea83 0101 	eor.w	r1, r3, r1
 8100336:	ea80 0202 	eor.w	r2, r0, r2
 810033a:	ea81 0303 	eor.w	r3, r1, r3
 810033e:	2d36      	cmp	r5, #54	; 0x36
 8100340:	bf88      	it	hi
 8100342:	bd30      	pophi	{r4, r5, pc}
 8100344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100354:	d002      	beq.n	810035c <__adddf3+0x70>
 8100356:	4240      	negs	r0, r0
 8100358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100368:	d002      	beq.n	8100370 <__adddf3+0x84>
 810036a:	4252      	negs	r2, r2
 810036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100370:	ea94 0f05 	teq	r4, r5
 8100374:	f000 80a7 	beq.w	81004c6 <__adddf3+0x1da>
 8100378:	f1a4 0401 	sub.w	r4, r4, #1
 810037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100380:	db0d      	blt.n	810039e <__adddf3+0xb2>
 8100382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100386:	fa22 f205 	lsr.w	r2, r2, r5
 810038a:	1880      	adds	r0, r0, r2
 810038c:	f141 0100 	adc.w	r1, r1, #0
 8100390:	fa03 f20e 	lsl.w	r2, r3, lr
 8100394:	1880      	adds	r0, r0, r2
 8100396:	fa43 f305 	asr.w	r3, r3, r5
 810039a:	4159      	adcs	r1, r3
 810039c:	e00e      	b.n	81003bc <__adddf3+0xd0>
 810039e:	f1a5 0520 	sub.w	r5, r5, #32
 81003a2:	f10e 0e20 	add.w	lr, lr, #32
 81003a6:	2a01      	cmp	r2, #1
 81003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003ac:	bf28      	it	cs
 81003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003b2:	fa43 f305 	asr.w	r3, r3, r5
 81003b6:	18c0      	adds	r0, r0, r3
 81003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003c0:	d507      	bpl.n	81003d2 <__adddf3+0xe6>
 81003c2:	f04f 0e00 	mov.w	lr, #0
 81003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 81003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 81003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003d6:	d31b      	bcc.n	8100410 <__adddf3+0x124>
 81003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003dc:	d30c      	bcc.n	81003f8 <__adddf3+0x10c>
 81003de:	0849      	lsrs	r1, r1, #1
 81003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 81003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e8:	f104 0401 	add.w	r4, r4, #1
 81003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003f4:	f080 809a 	bcs.w	810052c <__adddf3+0x240>
 81003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003fc:	bf08      	it	eq
 81003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100402:	f150 0000 	adcs.w	r0, r0, #0
 8100406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 810040a:	ea41 0105 	orr.w	r1, r1, r5
 810040e:	bd30      	pop	{r4, r5, pc}
 8100410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8100414:	4140      	adcs	r0, r0
 8100416:	eb41 0101 	adc.w	r1, r1, r1
 810041a:	3c01      	subs	r4, #1
 810041c:	bf28      	it	cs
 810041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8100422:	d2e9      	bcs.n	81003f8 <__adddf3+0x10c>
 8100424:	f091 0f00 	teq	r1, #0
 8100428:	bf04      	itt	eq
 810042a:	4601      	moveq	r1, r0
 810042c:	2000      	moveq	r0, #0
 810042e:	fab1 f381 	clz	r3, r1
 8100432:	bf08      	it	eq
 8100434:	3320      	addeq	r3, #32
 8100436:	f1a3 030b 	sub.w	r3, r3, #11
 810043a:	f1b3 0220 	subs.w	r2, r3, #32
 810043e:	da0c      	bge.n	810045a <__adddf3+0x16e>
 8100440:	320c      	adds	r2, #12
 8100442:	dd08      	ble.n	8100456 <__adddf3+0x16a>
 8100444:	f102 0c14 	add.w	ip, r2, #20
 8100448:	f1c2 020c 	rsb	r2, r2, #12
 810044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100450:	fa21 f102 	lsr.w	r1, r1, r2
 8100454:	e00c      	b.n	8100470 <__adddf3+0x184>
 8100456:	f102 0214 	add.w	r2, r2, #20
 810045a:	bfd8      	it	le
 810045c:	f1c2 0c20 	rsble	ip, r2, #32
 8100460:	fa01 f102 	lsl.w	r1, r1, r2
 8100464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100468:	bfdc      	itt	le
 810046a:	ea41 010c 	orrle.w	r1, r1, ip
 810046e:	4090      	lslle	r0, r2
 8100470:	1ae4      	subs	r4, r4, r3
 8100472:	bfa2      	ittt	ge
 8100474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100478:	4329      	orrge	r1, r5
 810047a:	bd30      	popge	{r4, r5, pc}
 810047c:	ea6f 0404 	mvn.w	r4, r4
 8100480:	3c1f      	subs	r4, #31
 8100482:	da1c      	bge.n	81004be <__adddf3+0x1d2>
 8100484:	340c      	adds	r4, #12
 8100486:	dc0e      	bgt.n	81004a6 <__adddf3+0x1ba>
 8100488:	f104 0414 	add.w	r4, r4, #20
 810048c:	f1c4 0220 	rsb	r2, r4, #32
 8100490:	fa20 f004 	lsr.w	r0, r0, r4
 8100494:	fa01 f302 	lsl.w	r3, r1, r2
 8100498:	ea40 0003 	orr.w	r0, r0, r3
 810049c:	fa21 f304 	lsr.w	r3, r1, r4
 81004a0:	ea45 0103 	orr.w	r1, r5, r3
 81004a4:	bd30      	pop	{r4, r5, pc}
 81004a6:	f1c4 040c 	rsb	r4, r4, #12
 81004aa:	f1c4 0220 	rsb	r2, r4, #32
 81004ae:	fa20 f002 	lsr.w	r0, r0, r2
 81004b2:	fa01 f304 	lsl.w	r3, r1, r4
 81004b6:	ea40 0003 	orr.w	r0, r0, r3
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	fa21 f004 	lsr.w	r0, r1, r4
 81004c2:	4629      	mov	r1, r5
 81004c4:	bd30      	pop	{r4, r5, pc}
 81004c6:	f094 0f00 	teq	r4, #0
 81004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004ce:	bf06      	itte	eq
 81004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004d4:	3401      	addeq	r4, #1
 81004d6:	3d01      	subne	r5, #1
 81004d8:	e74e      	b.n	8100378 <__adddf3+0x8c>
 81004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004de:	bf18      	it	ne
 81004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004e4:	d029      	beq.n	810053a <__adddf3+0x24e>
 81004e6:	ea94 0f05 	teq	r4, r5
 81004ea:	bf08      	it	eq
 81004ec:	ea90 0f02 	teqeq	r0, r2
 81004f0:	d005      	beq.n	81004fe <__adddf3+0x212>
 81004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 81004f6:	bf04      	itt	eq
 81004f8:	4619      	moveq	r1, r3
 81004fa:	4610      	moveq	r0, r2
 81004fc:	bd30      	pop	{r4, r5, pc}
 81004fe:	ea91 0f03 	teq	r1, r3
 8100502:	bf1e      	ittt	ne
 8100504:	2100      	movne	r1, #0
 8100506:	2000      	movne	r0, #0
 8100508:	bd30      	popne	{r4, r5, pc}
 810050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 810050e:	d105      	bne.n	810051c <__adddf3+0x230>
 8100510:	0040      	lsls	r0, r0, #1
 8100512:	4149      	adcs	r1, r1
 8100514:	bf28      	it	cs
 8100516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 810051a:	bd30      	pop	{r4, r5, pc}
 810051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100520:	bf3c      	itt	cc
 8100522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8100526:	bd30      	popcc	{r4, r5, pc}
 8100528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 810052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100534:	f04f 0000 	mov.w	r0, #0
 8100538:	bd30      	pop	{r4, r5, pc}
 810053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810053e:	bf1a      	itte	ne
 8100540:	4619      	movne	r1, r3
 8100542:	4610      	movne	r0, r2
 8100544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100548:	bf1c      	itt	ne
 810054a:	460b      	movne	r3, r1
 810054c:	4602      	movne	r2, r0
 810054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100552:	bf06      	itte	eq
 8100554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100558:	ea91 0f03 	teqeq	r1, r3
 810055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100560:	bd30      	pop	{r4, r5, pc}
 8100562:	bf00      	nop

08100564 <__aeabi_ui2d>:
 8100564:	f090 0f00 	teq	r0, #0
 8100568:	bf04      	itt	eq
 810056a:	2100      	moveq	r1, #0
 810056c:	4770      	bxeq	lr
 810056e:	b530      	push	{r4, r5, lr}
 8100570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100578:	f04f 0500 	mov.w	r5, #0
 810057c:	f04f 0100 	mov.w	r1, #0
 8100580:	e750      	b.n	8100424 <__adddf3+0x138>
 8100582:	bf00      	nop

08100584 <__aeabi_i2d>:
 8100584:	f090 0f00 	teq	r0, #0
 8100588:	bf04      	itt	eq
 810058a:	2100      	moveq	r1, #0
 810058c:	4770      	bxeq	lr
 810058e:	b530      	push	{r4, r5, lr}
 8100590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810059c:	bf48      	it	mi
 810059e:	4240      	negmi	r0, r0
 81005a0:	f04f 0100 	mov.w	r1, #0
 81005a4:	e73e      	b.n	8100424 <__adddf3+0x138>
 81005a6:	bf00      	nop

081005a8 <__aeabi_f2d>:
 81005a8:	0042      	lsls	r2, r0, #1
 81005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 81005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005b6:	bf1f      	itttt	ne
 81005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005c4:	4770      	bxne	lr
 81005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005ca:	bf08      	it	eq
 81005cc:	4770      	bxeq	lr
 81005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005d2:	bf04      	itt	eq
 81005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d8:	4770      	bxeq	lr
 81005da:	b530      	push	{r4, r5, lr}
 81005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e8:	e71c      	b.n	8100424 <__adddf3+0x138>
 81005ea:	bf00      	nop

081005ec <__aeabi_ul2d>:
 81005ec:	ea50 0201 	orrs.w	r2, r0, r1
 81005f0:	bf08      	it	eq
 81005f2:	4770      	bxeq	lr
 81005f4:	b530      	push	{r4, r5, lr}
 81005f6:	f04f 0500 	mov.w	r5, #0
 81005fa:	e00a      	b.n	8100612 <__aeabi_l2d+0x16>

081005fc <__aeabi_l2d>:
 81005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8100600:	bf08      	it	eq
 8100602:	4770      	bxeq	lr
 8100604:	b530      	push	{r4, r5, lr}
 8100606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 810060a:	d502      	bpl.n	8100612 <__aeabi_l2d+0x16>
 810060c:	4240      	negs	r0, r0
 810060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 810061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 810061e:	f43f aed8 	beq.w	81003d2 <__adddf3+0xe6>
 8100622:	f04f 0203 	mov.w	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100632:	bf18      	it	ne
 8100634:	3203      	addne	r2, #3
 8100636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810063a:	f1c2 0320 	rsb	r3, r2, #32
 810063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100642:	fa20 f002 	lsr.w	r0, r0, r2
 8100646:	fa01 fe03 	lsl.w	lr, r1, r3
 810064a:	ea40 000e 	orr.w	r0, r0, lr
 810064e:	fa21 f102 	lsr.w	r1, r1, r2
 8100652:	4414      	add	r4, r2
 8100654:	e6bd      	b.n	81003d2 <__adddf3+0xe6>
 8100656:	bf00      	nop

08100658 <__aeabi_dmul>:
 8100658:	b570      	push	{r4, r5, r6, lr}
 810065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100666:	bf1d      	ittte	ne
 8100668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810066c:	ea94 0f0c 	teqne	r4, ip
 8100670:	ea95 0f0c 	teqne	r5, ip
 8100674:	f000 f8de 	bleq	8100834 <__aeabi_dmul+0x1dc>
 8100678:	442c      	add	r4, r5
 810067a:	ea81 0603 	eor.w	r6, r1, r3
 810067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810068a:	bf18      	it	ne
 810068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100698:	d038      	beq.n	810070c <__aeabi_dmul+0xb4>
 810069a:	fba0 ce02 	umull	ip, lr, r0, r2
 810069e:	f04f 0500 	mov.w	r5, #0
 81006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 81006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006ae:	f04f 0600 	mov.w	r6, #0
 81006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006b6:	f09c 0f00 	teq	ip, #0
 81006ba:	bf18      	it	ne
 81006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 81006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006cc:	d204      	bcs.n	81006d8 <__aeabi_dmul+0x80>
 81006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006d2:	416d      	adcs	r5, r5
 81006d4:	eb46 0606 	adc.w	r6, r6, r6
 81006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006f0:	bf88      	it	hi
 81006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006f6:	d81e      	bhi.n	8100736 <__aeabi_dmul+0xde>
 81006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006fc:	bf08      	it	eq
 81006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8100702:	f150 0000 	adcs.w	r0, r0, #0
 8100706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 810070a:	bd70      	pop	{r4, r5, r6, pc}
 810070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100710:	ea46 0101 	orr.w	r1, r6, r1
 8100714:	ea40 0002 	orr.w	r0, r0, r2
 8100718:	ea81 0103 	eor.w	r1, r1, r3
 810071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100720:	bfc2      	ittt	gt
 8100722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 810072a:	bd70      	popgt	{r4, r5, r6, pc}
 810072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100730:	f04f 0e00 	mov.w	lr, #0
 8100734:	3c01      	subs	r4, #1
 8100736:	f300 80ab 	bgt.w	8100890 <__aeabi_dmul+0x238>
 810073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810073e:	bfde      	ittt	le
 8100740:	2000      	movle	r0, #0
 8100742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100746:	bd70      	pople	{r4, r5, r6, pc}
 8100748:	f1c4 0400 	rsb	r4, r4, #0
 810074c:	3c20      	subs	r4, #32
 810074e:	da35      	bge.n	81007bc <__aeabi_dmul+0x164>
 8100750:	340c      	adds	r4, #12
 8100752:	dc1b      	bgt.n	810078c <__aeabi_dmul+0x134>
 8100754:	f104 0414 	add.w	r4, r4, #20
 8100758:	f1c4 0520 	rsb	r5, r4, #32
 810075c:	fa00 f305 	lsl.w	r3, r0, r5
 8100760:	fa20 f004 	lsr.w	r0, r0, r4
 8100764:	fa01 f205 	lsl.w	r2, r1, r5
 8100768:	ea40 0002 	orr.w	r0, r0, r2
 810076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100778:	fa21 f604 	lsr.w	r6, r1, r4
 810077c:	eb42 0106 	adc.w	r1, r2, r6
 8100780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100784:	bf08      	it	eq
 8100786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810078a:	bd70      	pop	{r4, r5, r6, pc}
 810078c:	f1c4 040c 	rsb	r4, r4, #12
 8100790:	f1c4 0520 	rsb	r5, r4, #32
 8100794:	fa00 f304 	lsl.w	r3, r0, r4
 8100798:	fa20 f005 	lsr.w	r0, r0, r5
 810079c:	fa01 f204 	lsl.w	r2, r1, r4
 81007a0:	ea40 0002 	orr.w	r0, r0, r2
 81007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007ac:	f141 0100 	adc.w	r1, r1, #0
 81007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007b4:	bf08      	it	eq
 81007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f1c4 0520 	rsb	r5, r4, #32
 81007c0:	fa00 f205 	lsl.w	r2, r0, r5
 81007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c8:	fa20 f304 	lsr.w	r3, r0, r4
 81007cc:	fa01 f205 	lsl.w	r2, r1, r5
 81007d0:	ea43 0302 	orr.w	r3, r3, r2
 81007d4:	fa21 f004 	lsr.w	r0, r1, r4
 81007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007dc:	fa21 f204 	lsr.w	r2, r1, r4
 81007e0:	ea20 0002 	bic.w	r0, r0, r2
 81007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ec:	bf08      	it	eq
 81007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007f2:	bd70      	pop	{r4, r5, r6, pc}
 81007f4:	f094 0f00 	teq	r4, #0
 81007f8:	d10f      	bne.n	810081a <__aeabi_dmul+0x1c2>
 81007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007fe:	0040      	lsls	r0, r0, #1
 8100800:	eb41 0101 	adc.w	r1, r1, r1
 8100804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100808:	bf08      	it	eq
 810080a:	3c01      	subeq	r4, #1
 810080c:	d0f7      	beq.n	81007fe <__aeabi_dmul+0x1a6>
 810080e:	ea41 0106 	orr.w	r1, r1, r6
 8100812:	f095 0f00 	teq	r5, #0
 8100816:	bf18      	it	ne
 8100818:	4770      	bxne	lr
 810081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 810081e:	0052      	lsls	r2, r2, #1
 8100820:	eb43 0303 	adc.w	r3, r3, r3
 8100824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100828:	bf08      	it	eq
 810082a:	3d01      	subeq	r5, #1
 810082c:	d0f7      	beq.n	810081e <__aeabi_dmul+0x1c6>
 810082e:	ea43 0306 	orr.w	r3, r3, r6
 8100832:	4770      	bx	lr
 8100834:	ea94 0f0c 	teq	r4, ip
 8100838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810083c:	bf18      	it	ne
 810083e:	ea95 0f0c 	teqne	r5, ip
 8100842:	d00c      	beq.n	810085e <__aeabi_dmul+0x206>
 8100844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100848:	bf18      	it	ne
 810084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810084e:	d1d1      	bne.n	81007f4 <__aeabi_dmul+0x19c>
 8100850:	ea81 0103 	eor.w	r1, r1, r3
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	f04f 0000 	mov.w	r0, #0
 810085c:	bd70      	pop	{r4, r5, r6, pc}
 810085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100862:	bf06      	itte	eq
 8100864:	4610      	moveq	r0, r2
 8100866:	4619      	moveq	r1, r3
 8100868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810086c:	d019      	beq.n	81008a2 <__aeabi_dmul+0x24a>
 810086e:	ea94 0f0c 	teq	r4, ip
 8100872:	d102      	bne.n	810087a <__aeabi_dmul+0x222>
 8100874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100878:	d113      	bne.n	81008a2 <__aeabi_dmul+0x24a>
 810087a:	ea95 0f0c 	teq	r5, ip
 810087e:	d105      	bne.n	810088c <__aeabi_dmul+0x234>
 8100880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100884:	bf1c      	itt	ne
 8100886:	4610      	movne	r0, r2
 8100888:	4619      	movne	r1, r3
 810088a:	d10a      	bne.n	81008a2 <__aeabi_dmul+0x24a>
 810088c:	ea81 0103 	eor.w	r1, r1, r3
 8100890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810089c:	f04f 0000 	mov.w	r0, #0
 81008a0:	bd70      	pop	{r4, r5, r6, pc}
 81008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 81008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008aa:	bd70      	pop	{r4, r5, r6, pc}

081008ac <__aeabi_ddiv>:
 81008ac:	b570      	push	{r4, r5, r6, lr}
 81008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008ba:	bf1d      	ittte	ne
 81008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008c0:	ea94 0f0c 	teqne	r4, ip
 81008c4:	ea95 0f0c 	teqne	r5, ip
 81008c8:	f000 f8a7 	bleq	8100a1a <__aeabi_ddiv+0x16e>
 81008cc:	eba4 0405 	sub.w	r4, r4, r5
 81008d0:	ea81 0e03 	eor.w	lr, r1, r3
 81008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008dc:	f000 8088 	beq.w	81009f0 <__aeabi_ddiv+0x144>
 81008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8100900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8100904:	429d      	cmp	r5, r3
 8100906:	bf08      	it	eq
 8100908:	4296      	cmpeq	r6, r2
 810090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 810090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8100912:	d202      	bcs.n	810091a <__aeabi_ddiv+0x6e>
 8100914:	085b      	lsrs	r3, r3, #1
 8100916:	ea4f 0232 	mov.w	r2, r2, rrx
 810091a:	1ab6      	subs	r6, r6, r2
 810091c:	eb65 0503 	sbc.w	r5, r5, r3
 8100920:	085b      	lsrs	r3, r3, #1
 8100922:	ea4f 0232 	mov.w	r2, r2, rrx
 8100926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 810092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 810092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100936:	bf22      	ittt	cs
 8100938:	1ab6      	subcs	r6, r6, r2
 810093a:	4675      	movcs	r5, lr
 810093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100940:	085b      	lsrs	r3, r3, #1
 8100942:	ea4f 0232 	mov.w	r2, r2, rrx
 8100946:	ebb6 0e02 	subs.w	lr, r6, r2
 810094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810094e:	bf22      	ittt	cs
 8100950:	1ab6      	subcs	r6, r6, r2
 8100952:	4675      	movcs	r5, lr
 8100954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100958:	085b      	lsrs	r3, r3, #1
 810095a:	ea4f 0232 	mov.w	r2, r2, rrx
 810095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100966:	bf22      	ittt	cs
 8100968:	1ab6      	subcs	r6, r6, r2
 810096a:	4675      	movcs	r5, lr
 810096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100970:	085b      	lsrs	r3, r3, #1
 8100972:	ea4f 0232 	mov.w	r2, r2, rrx
 8100976:	ebb6 0e02 	subs.w	lr, r6, r2
 810097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810097e:	bf22      	ittt	cs
 8100980:	1ab6      	subcs	r6, r6, r2
 8100982:	4675      	movcs	r5, lr
 8100984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100988:	ea55 0e06 	orrs.w	lr, r5, r6
 810098c:	d018      	beq.n	81009c0 <__aeabi_ddiv+0x114>
 810098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 810099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 810099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 81009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 81009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009aa:	d1c0      	bne.n	810092e <__aeabi_ddiv+0x82>
 81009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009b0:	d10b      	bne.n	81009ca <__aeabi_ddiv+0x11e>
 81009b2:	ea41 0100 	orr.w	r1, r1, r0
 81009b6:	f04f 0000 	mov.w	r0, #0
 81009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009be:	e7b6      	b.n	810092e <__aeabi_ddiv+0x82>
 81009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009c4:	bf04      	itt	eq
 81009c6:	4301      	orreq	r1, r0
 81009c8:	2000      	moveq	r0, #0
 81009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009ce:	bf88      	it	hi
 81009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009d4:	f63f aeaf 	bhi.w	8100736 <__aeabi_dmul+0xde>
 81009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 81009dc:	bf04      	itt	eq
 81009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009e6:	f150 0000 	adcs.w	r0, r0, #0
 81009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009ee:	bd70      	pop	{r4, r5, r6, pc}
 81009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009fc:	bfc2      	ittt	gt
 81009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100a06:	bd70      	popgt	{r4, r5, r6, pc}
 8100a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a0c:	f04f 0e00 	mov.w	lr, #0
 8100a10:	3c01      	subs	r4, #1
 8100a12:	e690      	b.n	8100736 <__aeabi_dmul+0xde>
 8100a14:	ea45 0e06 	orr.w	lr, r5, r6
 8100a18:	e68d      	b.n	8100736 <__aeabi_dmul+0xde>
 8100a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a1e:	ea94 0f0c 	teq	r4, ip
 8100a22:	bf08      	it	eq
 8100a24:	ea95 0f0c 	teqeq	r5, ip
 8100a28:	f43f af3b 	beq.w	81008a2 <__aeabi_dmul+0x24a>
 8100a2c:	ea94 0f0c 	teq	r4, ip
 8100a30:	d10a      	bne.n	8100a48 <__aeabi_ddiv+0x19c>
 8100a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a36:	f47f af34 	bne.w	81008a2 <__aeabi_dmul+0x24a>
 8100a3a:	ea95 0f0c 	teq	r5, ip
 8100a3e:	f47f af25 	bne.w	810088c <__aeabi_dmul+0x234>
 8100a42:	4610      	mov	r0, r2
 8100a44:	4619      	mov	r1, r3
 8100a46:	e72c      	b.n	81008a2 <__aeabi_dmul+0x24a>
 8100a48:	ea95 0f0c 	teq	r5, ip
 8100a4c:	d106      	bne.n	8100a5c <__aeabi_ddiv+0x1b0>
 8100a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a52:	f43f aefd 	beq.w	8100850 <__aeabi_dmul+0x1f8>
 8100a56:	4610      	mov	r0, r2
 8100a58:	4619      	mov	r1, r3
 8100a5a:	e722      	b.n	81008a2 <__aeabi_dmul+0x24a>
 8100a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a60:	bf18      	it	ne
 8100a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a66:	f47f aec5 	bne.w	81007f4 <__aeabi_dmul+0x19c>
 8100a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a6e:	f47f af0d 	bne.w	810088c <__aeabi_dmul+0x234>
 8100a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a76:	f47f aeeb 	bne.w	8100850 <__aeabi_dmul+0x1f8>
 8100a7a:	e712      	b.n	81008a2 <__aeabi_dmul+0x24a>

08100a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100a7c:	b480      	push	{r7}
 8100a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100a80:	4b09      	ldr	r3, [pc, #36]	; (8100aa8 <SystemInit+0x2c>)
 8100a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100a86:	4a08      	ldr	r2, [pc, #32]	; (8100aa8 <SystemInit+0x2c>)
 8100a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100a90:	4b05      	ldr	r3, [pc, #20]	; (8100aa8 <SystemInit+0x2c>)
 8100a92:	691b      	ldr	r3, [r3, #16]
 8100a94:	4a04      	ldr	r2, [pc, #16]	; (8100aa8 <SystemInit+0x2c>)
 8100a96:	f043 0310 	orr.w	r3, r3, #16
 8100a9a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100a9c:	bf00      	nop
 8100a9e:	46bd      	mov	sp, r7
 8100aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100aa4:	4770      	bx	lr
 8100aa6:	bf00      	nop
 8100aa8:	e000ed00 	.word	0xe000ed00

08100aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100aac:	b580      	push	{r7, lr}
 8100aae:	b082      	sub	sp, #8
 8100ab0:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100ab2:	4b22      	ldr	r3, [pc, #136]	; (8100b3c <main+0x90>)
 8100ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ab8:	4a20      	ldr	r2, [pc, #128]	; (8100b3c <main+0x90>)
 8100aba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ac2:	4b1e      	ldr	r3, [pc, #120]	; (8100b3c <main+0x90>)
 8100ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100acc:	607b      	str	r3, [r7, #4]
 8100ace:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100ad0:	2001      	movs	r0, #1
 8100ad2:	f000 fd91 	bl	81015f8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100ad6:	f000 fe1b 	bl	8101710 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100ada:	2201      	movs	r2, #1
 8100adc:	2102      	movs	r1, #2
 8100ade:	2000      	movs	r0, #0
 8100ae0:	f000 fd9c 	bl	810161c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100ae4:	4b16      	ldr	r3, [pc, #88]	; (8100b40 <main+0x94>)
 8100ae6:	681b      	ldr	r3, [r3, #0]
 8100ae8:	091b      	lsrs	r3, r3, #4
 8100aea:	f003 030f 	and.w	r3, r3, #15
 8100aee:	2b07      	cmp	r3, #7
 8100af0:	d108      	bne.n	8100b04 <main+0x58>
 8100af2:	4b14      	ldr	r3, [pc, #80]	; (8100b44 <main+0x98>)
 8100af4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100af8:	4a12      	ldr	r2, [pc, #72]	; (8100b44 <main+0x98>)
 8100afa:	f043 0301 	orr.w	r3, r3, #1
 8100afe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100b02:	e007      	b.n	8100b14 <main+0x68>
 8100b04:	4b0f      	ldr	r3, [pc, #60]	; (8100b44 <main+0x98>)
 8100b06:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100b0a:	4a0e      	ldr	r2, [pc, #56]	; (8100b44 <main+0x98>)
 8100b0c:	f043 0301 	orr.w	r3, r3, #1
 8100b10:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100b14:	f000 fa26 	bl	8100f64 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100b18:	f000 f844 	bl	8100ba4 <MX_GPIO_Init>
  MX_TIM16_Init();
 8100b1c:	f000 f81a 	bl	8100b54 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100b20:	f001 fb8c 	bl	810223c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8100b24:	4a08      	ldr	r2, [pc, #32]	; (8100b48 <main+0x9c>)
 8100b26:	2100      	movs	r1, #0
 8100b28:	4808      	ldr	r0, [pc, #32]	; (8100b4c <main+0xa0>)
 8100b2a:	f001 fbd1 	bl	81022d0 <osThreadNew>
 8100b2e:	4603      	mov	r3, r0
 8100b30:	4a07      	ldr	r2, [pc, #28]	; (8100b50 <main+0xa4>)
 8100b32:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8100b34:	f001 fba6 	bl	8102284 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100b38:	e7fe      	b.n	8100b38 <main+0x8c>
 8100b3a:	bf00      	nop
 8100b3c:	58024400 	.word	0x58024400
 8100b40:	e000ed00 	.word	0xe000ed00
 8100b44:	58026400 	.word	0x58026400
 8100b48:	08105c00 	.word	0x08105c00
 8100b4c:	08100c11 	.word	0x08100c11
 8100b50:	100000e0 	.word	0x100000e0

08100b54 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8100b54:	b580      	push	{r7, lr}
 8100b56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8100b58:	4b10      	ldr	r3, [pc, #64]	; (8100b9c <MX_TIM16_Init+0x48>)
 8100b5a:	4a11      	ldr	r2, [pc, #68]	; (8100ba0 <MX_TIM16_Init+0x4c>)
 8100b5c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8100b5e:	4b0f      	ldr	r3, [pc, #60]	; (8100b9c <MX_TIM16_Init+0x48>)
 8100b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100b64:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100b66:	4b0d      	ldr	r3, [pc, #52]	; (8100b9c <MX_TIM16_Init+0x48>)
 8100b68:	2200      	movs	r2, #0
 8100b6a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8100b6c:	4b0b      	ldr	r3, [pc, #44]	; (8100b9c <MX_TIM16_Init+0x48>)
 8100b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100b72:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100b74:	4b09      	ldr	r3, [pc, #36]	; (8100b9c <MX_TIM16_Init+0x48>)
 8100b76:	2200      	movs	r2, #0
 8100b78:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8100b7a:	4b08      	ldr	r3, [pc, #32]	; (8100b9c <MX_TIM16_Init+0x48>)
 8100b7c:	2200      	movs	r2, #0
 8100b7e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100b80:	4b06      	ldr	r3, [pc, #24]	; (8100b9c <MX_TIM16_Init+0x48>)
 8100b82:	2200      	movs	r2, #0
 8100b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8100b86:	4805      	ldr	r0, [pc, #20]	; (8100b9c <MX_TIM16_Init+0x48>)
 8100b88:	f000 ffd4 	bl	8101b34 <HAL_TIM_Base_Init>
 8100b8c:	4603      	mov	r3, r0
 8100b8e:	2b00      	cmp	r3, #0
 8100b90:	d001      	beq.n	8100b96 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8100b92:	f000 f8eb 	bl	8100d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8100b96:	bf00      	nop
 8100b98:	bd80      	pop	{r7, pc}
 8100b9a:	bf00      	nop
 8100b9c:	10000094 	.word	0x10000094
 8100ba0:	40014400 	.word	0x40014400

08100ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100ba4:	b580      	push	{r7, lr}
 8100ba6:	b086      	sub	sp, #24
 8100ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100baa:	1d3b      	adds	r3, r7, #4
 8100bac:	2200      	movs	r2, #0
 8100bae:	601a      	str	r2, [r3, #0]
 8100bb0:	605a      	str	r2, [r3, #4]
 8100bb2:	609a      	str	r2, [r3, #8]
 8100bb4:	60da      	str	r2, [r3, #12]
 8100bb6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100bb8:	4b12      	ldr	r3, [pc, #72]	; (8100c04 <MX_GPIO_Init+0x60>)
 8100bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bbe:	4a11      	ldr	r2, [pc, #68]	; (8100c04 <MX_GPIO_Init+0x60>)
 8100bc0:	f043 0310 	orr.w	r3, r3, #16
 8100bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bc8:	4b0e      	ldr	r3, [pc, #56]	; (8100c04 <MX_GPIO_Init+0x60>)
 8100bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bce:	f003 0310 	and.w	r3, r3, #16
 8100bd2:	603b      	str	r3, [r7, #0]
 8100bd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8100bd6:	2200      	movs	r2, #0
 8100bd8:	2102      	movs	r1, #2
 8100bda:	480b      	ldr	r0, [pc, #44]	; (8100c08 <MX_GPIO_Init+0x64>)
 8100bdc:	f000 fcd8 	bl	8101590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8100be0:	2302      	movs	r3, #2
 8100be2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100be4:	2301      	movs	r3, #1
 8100be6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100be8:	2300      	movs	r3, #0
 8100bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100bec:	2300      	movs	r3, #0
 8100bee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8100bf0:	1d3b      	adds	r3, r7, #4
 8100bf2:	4619      	mov	r1, r3
 8100bf4:	4804      	ldr	r0, [pc, #16]	; (8100c08 <MX_GPIO_Init+0x64>)
 8100bf6:	f000 fb1b 	bl	8101230 <HAL_GPIO_Init>

}
 8100bfa:	bf00      	nop
 8100bfc:	3718      	adds	r7, #24
 8100bfe:	46bd      	mov	sp, r7
 8100c00:	bd80      	pop	{r7, pc}
 8100c02:	bf00      	nop
 8100c04:	58024400 	.word	0x58024400
 8100c08:	58021000 	.word	0x58021000
 8100c0c:	00000000 	.word	0x00000000

08100c10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8100c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8100c14:	b08b      	sub	sp, #44	; 0x2c
 8100c16:	af00      	add	r7, sp, #0
 8100c18:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	// Initialize variables
	int cantidadIntervalos = 10000000;  // Set interval count to 10 million
 8100c1a:	4b45      	ldr	r3, [pc, #276]	; (8100d30 <StartDefaultTask+0x120>)
 8100c1c:	61fb      	str	r3, [r7, #28]
	int sign = 1;  // Alternating sign for the series
 8100c1e:	2301      	movs	r3, #1
 8100c20:	627b      	str	r3, [r7, #36]	; 0x24

	// Initialize TIM16
	HAL_TIM_Base_Start(&htim16);
 8100c22:	4844      	ldr	r0, [pc, #272]	; (8100d34 <StartDefaultTask+0x124>)
 8100c24:	f000 ffde 	bl	8101be4 <HAL_TIM_Base_Start>

	// Get the timer counter value before the for loop
	uint16_t start_t = __HAL_TIM_GET_COUNTER(&htim16);
 8100c28:	4b42      	ldr	r3, [pc, #264]	; (8100d34 <StartDefaultTask+0x124>)
 8100c2a:	681b      	ldr	r3, [r3, #0]
 8100c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100c2e:	837b      	strh	r3, [r7, #26]

	// Pi calculation using the Gregory-Leibniz series
	for (int i = 0; i < cantidadIntervalos / 2; i++) {
 8100c30:	2300      	movs	r3, #0
 8100c32:	623b      	str	r3, [r7, #32]
 8100c34:	e039      	b.n	8100caa <StartDefaultTask+0x9a>
		osMutexAcquire(*mutex_id, osWaitForever);
 8100c36:	4b40      	ldr	r3, [pc, #256]	; (8100d38 <StartDefaultTask+0x128>)
 8100c38:	681b      	ldr	r3, [r3, #0]
 8100c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8100c3e:	4618      	mov	r0, r3
 8100c40:	f001 fbf3 	bl	810242a <osMutexAcquire>
		*acum += sign * (4.0 / (2 * i + 1));  // Update Pi approximation
 8100c44:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8100c48:	e9d3 4500 	ldrd	r4, r5, [r3]
 8100c4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8100c4e:	f7ff fc99 	bl	8100584 <__aeabi_i2d>
 8100c52:	4680      	mov	r8, r0
 8100c54:	4689      	mov	r9, r1
 8100c56:	6a3b      	ldr	r3, [r7, #32]
 8100c58:	005b      	lsls	r3, r3, #1
 8100c5a:	3301      	adds	r3, #1
 8100c5c:	4618      	mov	r0, r3
 8100c5e:	f7ff fc91 	bl	8100584 <__aeabi_i2d>
 8100c62:	4602      	mov	r2, r0
 8100c64:	460b      	mov	r3, r1
 8100c66:	f04f 0000 	mov.w	r0, #0
 8100c6a:	4934      	ldr	r1, [pc, #208]	; (8100d3c <StartDefaultTask+0x12c>)
 8100c6c:	f7ff fe1e 	bl	81008ac <__aeabi_ddiv>
 8100c70:	4602      	mov	r2, r0
 8100c72:	460b      	mov	r3, r1
 8100c74:	4640      	mov	r0, r8
 8100c76:	4649      	mov	r1, r9
 8100c78:	f7ff fcee 	bl	8100658 <__aeabi_dmul>
 8100c7c:	4602      	mov	r2, r0
 8100c7e:	460b      	mov	r3, r1
 8100c80:	f04f 5640 	mov.w	r6, #805306368	; 0x30000000
 8100c84:	4620      	mov	r0, r4
 8100c86:	4629      	mov	r1, r5
 8100c88:	f7ff fb30 	bl	81002ec <__adddf3>
 8100c8c:	4602      	mov	r2, r0
 8100c8e:	460b      	mov	r3, r1
 8100c90:	e9c6 2300 	strd	r2, r3, [r6]
		osMutexRelease(*mutex_id);  // Release mutex
 8100c94:	4b28      	ldr	r3, [pc, #160]	; (8100d38 <StartDefaultTask+0x128>)
 8100c96:	681b      	ldr	r3, [r3, #0]
 8100c98:	4618      	mov	r0, r3
 8100c9a:	f001 fc11 	bl	81024c0 <osMutexRelease>
		sign = -sign;  // Alternate sign
 8100c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100ca0:	425b      	negs	r3, r3
 8100ca2:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < cantidadIntervalos / 2; i++) {
 8100ca4:	6a3b      	ldr	r3, [r7, #32]
 8100ca6:	3301      	adds	r3, #1
 8100ca8:	623b      	str	r3, [r7, #32]
 8100caa:	69fb      	ldr	r3, [r7, #28]
 8100cac:	0fda      	lsrs	r2, r3, #31
 8100cae:	4413      	add	r3, r2
 8100cb0:	105b      	asrs	r3, r3, #1
 8100cb2:	461a      	mov	r2, r3
 8100cb4:	6a3b      	ldr	r3, [r7, #32]
 8100cb6:	4293      	cmp	r3, r2
 8100cb8:	dbbd      	blt.n	8100c36 <StartDefaultTask+0x26>
	}

	// Get the timer counter value after the for loop
	uint16_t end_t = __HAL_TIM_GET_COUNTER(&htim16);
 8100cba:	4b1e      	ldr	r3, [pc, #120]	; (8100d34 <StartDefaultTask+0x124>)
 8100cbc:	681b      	ldr	r3, [r3, #0]
 8100cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100cc0:	833b      	strh	r3, [r7, #24]

	// Calculate the total time taken
	uint16_t total_t = end_t - start_t;
 8100cc2:	8b3a      	ldrh	r2, [r7, #24]
 8100cc4:	8b7b      	ldrh	r3, [r7, #26]
 8100cc6:	1ad3      	subs	r3, r2, r3
 8100cc8:	82fb      	strh	r3, [r7, #22]

	// Optionally send the elapsed time using the stream buffer
	double elapsedTime = (total_t * 65535.0) / 240000000.0;  // Convert to seconds
 8100cca:	8afb      	ldrh	r3, [r7, #22]
 8100ccc:	4618      	mov	r0, r3
 8100cce:	f7ff fc59 	bl	8100584 <__aeabi_i2d>
 8100cd2:	a313      	add	r3, pc, #76	; (adr r3, 8100d20 <StartDefaultTask+0x110>)
 8100cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100cd8:	f7ff fcbe 	bl	8100658 <__aeabi_dmul>
 8100cdc:	4602      	mov	r2, r0
 8100cde:	460b      	mov	r3, r1
 8100ce0:	4610      	mov	r0, r2
 8100ce2:	4619      	mov	r1, r3
 8100ce4:	a310      	add	r3, pc, #64	; (adr r3, 8100d28 <StartDefaultTask+0x118>)
 8100ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100cea:	f7ff fddf 	bl	81008ac <__aeabi_ddiv>
 8100cee:	4602      	mov	r2, r0
 8100cf0:	460b      	mov	r3, r1
 8100cf2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	xStreamBufferSend(*xStreamBuffer, &elapsedTime, sizeof(elapsedTime), portMAX_DELAY);
 8100cf6:	4b12      	ldr	r3, [pc, #72]	; (8100d40 <StartDefaultTask+0x130>)
 8100cf8:	6818      	ldr	r0, [r3, #0]
 8100cfa:	f107 0108 	add.w	r1, r7, #8
 8100cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8100d02:	2208      	movs	r2, #8
 8100d04:	f002 ffe5 	bl	8103cd2 <xStreamBufferSend>

  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100d08:	2102      	movs	r1, #2
 8100d0a:	480e      	ldr	r0, [pc, #56]	; (8100d44 <StartDefaultTask+0x134>)
 8100d0c:	f000 fc59 	bl	81015c2 <HAL_GPIO_TogglePin>
	  //HAL_Delay(2000);
      osDelay(2000);
 8100d10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8100d14:	f001 fb6e 	bl	81023f4 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100d18:	e7f6      	b.n	8100d08 <StartDefaultTask+0xf8>
 8100d1a:	bf00      	nop
 8100d1c:	f3af 8000 	nop.w
 8100d20:	00000000 	.word	0x00000000
 8100d24:	40efffe0 	.word	0x40efffe0
 8100d28:	00000000 	.word	0x00000000
 8100d2c:	41ac9c38 	.word	0x41ac9c38
 8100d30:	00989680 	.word	0x00989680
 8100d34:	10000094 	.word	0x10000094
 8100d38:	3000000c 	.word	0x3000000c
 8100d3c:	40100000 	.word	0x40100000
 8100d40:	30000008 	.word	0x30000008
 8100d44:	58021000 	.word	0x58021000

08100d48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100d48:	b580      	push	{r7, lr}
 8100d4a:	b082      	sub	sp, #8
 8100d4c:	af00      	add	r7, sp, #0
 8100d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8100d50:	687b      	ldr	r3, [r7, #4]
 8100d52:	681b      	ldr	r3, [r3, #0]
 8100d54:	4a04      	ldr	r2, [pc, #16]	; (8100d68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100d56:	4293      	cmp	r3, r2
 8100d58:	d101      	bne.n	8100d5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100d5a:	f000 f961 	bl	8101020 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100d5e:	bf00      	nop
 8100d60:	3708      	adds	r7, #8
 8100d62:	46bd      	mov	sp, r7
 8100d64:	bd80      	pop	{r7, pc}
 8100d66:	bf00      	nop
 8100d68:	40001000 	.word	0x40001000

08100d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100d6c:	b480      	push	{r7}
 8100d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100d70:	b672      	cpsid	i
}
 8100d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100d74:	e7fe      	b.n	8100d74 <Error_Handler+0x8>
	...

08100d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100d78:	b580      	push	{r7, lr}
 8100d7a:	b082      	sub	sp, #8
 8100d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100d7e:	4b0c      	ldr	r3, [pc, #48]	; (8100db0 <HAL_MspInit+0x38>)
 8100d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d84:	4a0a      	ldr	r2, [pc, #40]	; (8100db0 <HAL_MspInit+0x38>)
 8100d86:	f043 0302 	orr.w	r3, r3, #2
 8100d8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100d8e:	4b08      	ldr	r3, [pc, #32]	; (8100db0 <HAL_MspInit+0x38>)
 8100d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d94:	f003 0302 	and.w	r3, r3, #2
 8100d98:	607b      	str	r3, [r7, #4]
 8100d9a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100d9c:	2200      	movs	r2, #0
 8100d9e:	210f      	movs	r1, #15
 8100da0:	f06f 0001 	mvn.w	r0, #1
 8100da4:	f000 fa08 	bl	81011b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100da8:	bf00      	nop
 8100daa:	3708      	adds	r7, #8
 8100dac:	46bd      	mov	sp, r7
 8100dae:	bd80      	pop	{r7, pc}
 8100db0:	58024400 	.word	0x58024400

08100db4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8100db4:	b480      	push	{r7}
 8100db6:	b085      	sub	sp, #20
 8100db8:	af00      	add	r7, sp, #0
 8100dba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8100dbc:	687b      	ldr	r3, [r7, #4]
 8100dbe:	681b      	ldr	r3, [r3, #0]
 8100dc0:	4a0b      	ldr	r2, [pc, #44]	; (8100df0 <HAL_TIM_Base_MspInit+0x3c>)
 8100dc2:	4293      	cmp	r3, r2
 8100dc4:	d10e      	bne.n	8100de4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8100dc6:	4b0b      	ldr	r3, [pc, #44]	; (8100df4 <HAL_TIM_Base_MspInit+0x40>)
 8100dc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100dcc:	4a09      	ldr	r2, [pc, #36]	; (8100df4 <HAL_TIM_Base_MspInit+0x40>)
 8100dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100dd6:	4b07      	ldr	r3, [pc, #28]	; (8100df4 <HAL_TIM_Base_MspInit+0x40>)
 8100dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100de0:	60fb      	str	r3, [r7, #12]
 8100de2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8100de4:	bf00      	nop
 8100de6:	3714      	adds	r7, #20
 8100de8:	46bd      	mov	sp, r7
 8100dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dee:	4770      	bx	lr
 8100df0:	40014400 	.word	0x40014400
 8100df4:	58024400 	.word	0x58024400

08100df8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100df8:	b580      	push	{r7, lr}
 8100dfa:	b090      	sub	sp, #64	; 0x40
 8100dfc:	af00      	add	r7, sp, #0
 8100dfe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100e00:	687b      	ldr	r3, [r7, #4]
 8100e02:	2b0f      	cmp	r3, #15
 8100e04:	d827      	bhi.n	8100e56 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8100e06:	2200      	movs	r2, #0
 8100e08:	6879      	ldr	r1, [r7, #4]
 8100e0a:	2036      	movs	r0, #54	; 0x36
 8100e0c:	f000 f9d4 	bl	81011b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8100e10:	2036      	movs	r0, #54	; 0x36
 8100e12:	f000 f9eb 	bl	81011ec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8100e16:	4a29      	ldr	r2, [pc, #164]	; (8100ebc <HAL_InitTick+0xc4>)
 8100e18:	687b      	ldr	r3, [r7, #4]
 8100e1a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8100e1c:	4b28      	ldr	r3, [pc, #160]	; (8100ec0 <HAL_InitTick+0xc8>)
 8100e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100e22:	4a27      	ldr	r2, [pc, #156]	; (8100ec0 <HAL_InitTick+0xc8>)
 8100e24:	f043 0310 	orr.w	r3, r3, #16
 8100e28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100e2c:	4b24      	ldr	r3, [pc, #144]	; (8100ec0 <HAL_InitTick+0xc8>)
 8100e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100e32:	f003 0310 	and.w	r3, r3, #16
 8100e36:	60fb      	str	r3, [r7, #12]
 8100e38:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100e3a:	f107 0210 	add.w	r2, r7, #16
 8100e3e:	f107 0314 	add.w	r3, r7, #20
 8100e42:	4611      	mov	r1, r2
 8100e44:	4618      	mov	r0, r3
 8100e46:	f000 fe33 	bl	8101ab0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8100e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8100e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8100e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8100e50:	2b00      	cmp	r3, #0
 8100e52:	d106      	bne.n	8100e62 <HAL_InitTick+0x6a>
 8100e54:	e001      	b.n	8100e5a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8100e56:	2301      	movs	r3, #1
 8100e58:	e02b      	b.n	8100eb2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8100e5a:	f000 fe13 	bl	8101a84 <HAL_RCC_GetPCLK1Freq>
 8100e5e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8100e60:	e004      	b.n	8100e6c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100e62:	f000 fe0f 	bl	8101a84 <HAL_RCC_GetPCLK1Freq>
 8100e66:	4603      	mov	r3, r0
 8100e68:	005b      	lsls	r3, r3, #1
 8100e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8100e6e:	4a15      	ldr	r2, [pc, #84]	; (8100ec4 <HAL_InitTick+0xcc>)
 8100e70:	fba2 2303 	umull	r2, r3, r2, r3
 8100e74:	0c9b      	lsrs	r3, r3, #18
 8100e76:	3b01      	subs	r3, #1
 8100e78:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8100e7a:	4b13      	ldr	r3, [pc, #76]	; (8100ec8 <HAL_InitTick+0xd0>)
 8100e7c:	4a13      	ldr	r2, [pc, #76]	; (8100ecc <HAL_InitTick+0xd4>)
 8100e7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8100e80:	4b11      	ldr	r3, [pc, #68]	; (8100ec8 <HAL_InitTick+0xd0>)
 8100e82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8100e86:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8100e88:	4a0f      	ldr	r2, [pc, #60]	; (8100ec8 <HAL_InitTick+0xd0>)
 8100e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100e8c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8100e8e:	4b0e      	ldr	r3, [pc, #56]	; (8100ec8 <HAL_InitTick+0xd0>)
 8100e90:	2200      	movs	r2, #0
 8100e92:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100e94:	4b0c      	ldr	r3, [pc, #48]	; (8100ec8 <HAL_InitTick+0xd0>)
 8100e96:	2200      	movs	r2, #0
 8100e98:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8100e9a:	480b      	ldr	r0, [pc, #44]	; (8100ec8 <HAL_InitTick+0xd0>)
 8100e9c:	f000 fe4a 	bl	8101b34 <HAL_TIM_Base_Init>
 8100ea0:	4603      	mov	r3, r0
 8100ea2:	2b00      	cmp	r3, #0
 8100ea4:	d104      	bne.n	8100eb0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8100ea6:	4808      	ldr	r0, [pc, #32]	; (8100ec8 <HAL_InitTick+0xd0>)
 8100ea8:	f000 ff0c 	bl	8101cc4 <HAL_TIM_Base_Start_IT>
 8100eac:	4603      	mov	r3, r0
 8100eae:	e000      	b.n	8100eb2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8100eb0:	2301      	movs	r3, #1
}
 8100eb2:	4618      	mov	r0, r3
 8100eb4:	3740      	adds	r7, #64	; 0x40
 8100eb6:	46bd      	mov	sp, r7
 8100eb8:	bd80      	pop	{r7, pc}
 8100eba:	bf00      	nop
 8100ebc:	10000008 	.word	0x10000008
 8100ec0:	58024400 	.word	0x58024400
 8100ec4:	431bde83 	.word	0x431bde83
 8100ec8:	100000e4 	.word	0x100000e4
 8100ecc:	40001000 	.word	0x40001000

08100ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100ed0:	b480      	push	{r7}
 8100ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100ed4:	e7fe      	b.n	8100ed4 <NMI_Handler+0x4>

08100ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100ed6:	b480      	push	{r7}
 8100ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100eda:	e7fe      	b.n	8100eda <HardFault_Handler+0x4>

08100edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100edc:	b480      	push	{r7}
 8100ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100ee0:	e7fe      	b.n	8100ee0 <MemManage_Handler+0x4>

08100ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100ee2:	b480      	push	{r7}
 8100ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100ee6:	e7fe      	b.n	8100ee6 <BusFault_Handler+0x4>

08100ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100ee8:	b480      	push	{r7}
 8100eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100eec:	e7fe      	b.n	8100eec <UsageFault_Handler+0x4>

08100eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100eee:	b480      	push	{r7}
 8100ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100ef2:	bf00      	nop
 8100ef4:	46bd      	mov	sp, r7
 8100ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100efa:	4770      	bx	lr

08100efc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8100efc:	b580      	push	{r7, lr}
 8100efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8100f00:	4802      	ldr	r0, [pc, #8]	; (8100f0c <TIM6_DAC_IRQHandler+0x10>)
 8100f02:	f000 ff57 	bl	8101db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8100f06:	bf00      	nop
 8100f08:	bd80      	pop	{r7, pc}
 8100f0a:	bf00      	nop
 8100f0c:	100000e4 	.word	0x100000e4

08100f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100f48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100f14:	f7ff fdb2 	bl	8100a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100f18:	480c      	ldr	r0, [pc, #48]	; (8100f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100f1a:	490d      	ldr	r1, [pc, #52]	; (8100f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100f1c:	4a0d      	ldr	r2, [pc, #52]	; (8100f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100f20:	e002      	b.n	8100f28 <LoopCopyDataInit>

08100f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100f26:	3304      	adds	r3, #4

08100f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100f2c:	d3f9      	bcc.n	8100f22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100f2e:	4a0a      	ldr	r2, [pc, #40]	; (8100f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100f30:	4c0a      	ldr	r4, [pc, #40]	; (8100f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8100f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100f34:	e001      	b.n	8100f3a <LoopFillZerobss>

08100f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100f38:	3204      	adds	r2, #4

08100f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100f3c:	d3fb      	bcc.n	8100f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100f3e:	f004 fd3b 	bl	81059b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100f42:	f7ff fdb3 	bl	8100aac <main>
  bx  lr
 8100f46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100f48:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100f4c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100f50:	10000078 	.word	0x10000078
  ldr r2, =_sidata
 8100f54:	08105c8c 	.word	0x08105c8c
  ldr r2, =_sbss
 8100f58:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 8100f5c:	10004b4c 	.word	0x10004b4c

08100f60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100f60:	e7fe      	b.n	8100f60 <ADC3_IRQHandler>
	...

08100f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100f64:	b580      	push	{r7, lr}
 8100f66:	b082      	sub	sp, #8
 8100f68:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100f6a:	4b28      	ldr	r3, [pc, #160]	; (810100c <HAL_Init+0xa8>)
 8100f6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100f70:	4a26      	ldr	r2, [pc, #152]	; (810100c <HAL_Init+0xa8>)
 8100f72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100f76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100f7a:	4b24      	ldr	r3, [pc, #144]	; (810100c <HAL_Init+0xa8>)
 8100f7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100f84:	603b      	str	r3, [r7, #0]
 8100f86:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100f88:	4b21      	ldr	r3, [pc, #132]	; (8101010 <HAL_Init+0xac>)
 8100f8a:	681b      	ldr	r3, [r3, #0]
 8100f8c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100f90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100f94:	4a1e      	ldr	r2, [pc, #120]	; (8101010 <HAL_Init+0xac>)
 8100f96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100f9a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100f9c:	4b1c      	ldr	r3, [pc, #112]	; (8101010 <HAL_Init+0xac>)
 8100f9e:	681b      	ldr	r3, [r3, #0]
 8100fa0:	4a1b      	ldr	r2, [pc, #108]	; (8101010 <HAL_Init+0xac>)
 8100fa2:	f043 0301 	orr.w	r3, r3, #1
 8100fa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100fa8:	2003      	movs	r0, #3
 8100faa:	f000 f8fa 	bl	81011a2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100fae:	f000 fbbd 	bl	810172c <HAL_RCC_GetSysClockFreq>
 8100fb2:	4602      	mov	r2, r0
 8100fb4:	4b15      	ldr	r3, [pc, #84]	; (810100c <HAL_Init+0xa8>)
 8100fb6:	699b      	ldr	r3, [r3, #24]
 8100fb8:	0a1b      	lsrs	r3, r3, #8
 8100fba:	f003 030f 	and.w	r3, r3, #15
 8100fbe:	4915      	ldr	r1, [pc, #84]	; (8101014 <HAL_Init+0xb0>)
 8100fc0:	5ccb      	ldrb	r3, [r1, r3]
 8100fc2:	f003 031f 	and.w	r3, r3, #31
 8100fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8100fca:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100fcc:	4b0f      	ldr	r3, [pc, #60]	; (810100c <HAL_Init+0xa8>)
 8100fce:	699b      	ldr	r3, [r3, #24]
 8100fd0:	f003 030f 	and.w	r3, r3, #15
 8100fd4:	4a0f      	ldr	r2, [pc, #60]	; (8101014 <HAL_Init+0xb0>)
 8100fd6:	5cd3      	ldrb	r3, [r2, r3]
 8100fd8:	f003 031f 	and.w	r3, r3, #31
 8100fdc:	687a      	ldr	r2, [r7, #4]
 8100fde:	fa22 f303 	lsr.w	r3, r2, r3
 8100fe2:	4a0d      	ldr	r2, [pc, #52]	; (8101018 <HAL_Init+0xb4>)
 8100fe4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100fe6:	4b0c      	ldr	r3, [pc, #48]	; (8101018 <HAL_Init+0xb4>)
 8100fe8:	681b      	ldr	r3, [r3, #0]
 8100fea:	4a0c      	ldr	r2, [pc, #48]	; (810101c <HAL_Init+0xb8>)
 8100fec:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100fee:	200f      	movs	r0, #15
 8100ff0:	f7ff ff02 	bl	8100df8 <HAL_InitTick>
 8100ff4:	4603      	mov	r3, r0
 8100ff6:	2b00      	cmp	r3, #0
 8100ff8:	d001      	beq.n	8100ffe <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100ffa:	2301      	movs	r3, #1
 8100ffc:	e002      	b.n	8101004 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100ffe:	f7ff febb 	bl	8100d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101002:	2300      	movs	r3, #0
}
 8101004:	4618      	mov	r0, r3
 8101006:	3708      	adds	r7, #8
 8101008:	46bd      	mov	sp, r7
 810100a:	bd80      	pop	{r7, pc}
 810100c:	58024400 	.word	0x58024400
 8101010:	40024400 	.word	0x40024400
 8101014:	08105bf0 	.word	0x08105bf0
 8101018:	10000004 	.word	0x10000004
 810101c:	10000000 	.word	0x10000000

08101020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101020:	b480      	push	{r7}
 8101022:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101024:	4b06      	ldr	r3, [pc, #24]	; (8101040 <HAL_IncTick+0x20>)
 8101026:	781b      	ldrb	r3, [r3, #0]
 8101028:	461a      	mov	r2, r3
 810102a:	4b06      	ldr	r3, [pc, #24]	; (8101044 <HAL_IncTick+0x24>)
 810102c:	681b      	ldr	r3, [r3, #0]
 810102e:	4413      	add	r3, r2
 8101030:	4a04      	ldr	r2, [pc, #16]	; (8101044 <HAL_IncTick+0x24>)
 8101032:	6013      	str	r3, [r2, #0]
}
 8101034:	bf00      	nop
 8101036:	46bd      	mov	sp, r7
 8101038:	f85d 7b04 	ldr.w	r7, [sp], #4
 810103c:	4770      	bx	lr
 810103e:	bf00      	nop
 8101040:	1000000c 	.word	0x1000000c
 8101044:	10000130 	.word	0x10000130

08101048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101048:	b480      	push	{r7}
 810104a:	b085      	sub	sp, #20
 810104c:	af00      	add	r7, sp, #0
 810104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101050:	687b      	ldr	r3, [r7, #4]
 8101052:	f003 0307 	and.w	r3, r3, #7
 8101056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101058:	4b0c      	ldr	r3, [pc, #48]	; (810108c <__NVIC_SetPriorityGrouping+0x44>)
 810105a:	68db      	ldr	r3, [r3, #12]
 810105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810105e:	68ba      	ldr	r2, [r7, #8]
 8101060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101064:	4013      	ands	r3, r2
 8101066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101068:	68fb      	ldr	r3, [r7, #12]
 810106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810106c:	68bb      	ldr	r3, [r7, #8]
 810106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810107a:	4a04      	ldr	r2, [pc, #16]	; (810108c <__NVIC_SetPriorityGrouping+0x44>)
 810107c:	68bb      	ldr	r3, [r7, #8]
 810107e:	60d3      	str	r3, [r2, #12]
}
 8101080:	bf00      	nop
 8101082:	3714      	adds	r7, #20
 8101084:	46bd      	mov	sp, r7
 8101086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810108a:	4770      	bx	lr
 810108c:	e000ed00 	.word	0xe000ed00

08101090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101090:	b480      	push	{r7}
 8101092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101094:	4b04      	ldr	r3, [pc, #16]	; (81010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8101096:	68db      	ldr	r3, [r3, #12]
 8101098:	0a1b      	lsrs	r3, r3, #8
 810109a:	f003 0307 	and.w	r3, r3, #7
}
 810109e:	4618      	mov	r0, r3
 81010a0:	46bd      	mov	sp, r7
 81010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010a6:	4770      	bx	lr
 81010a8:	e000ed00 	.word	0xe000ed00

081010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81010ac:	b480      	push	{r7}
 81010ae:	b083      	sub	sp, #12
 81010b0:	af00      	add	r7, sp, #0
 81010b2:	4603      	mov	r3, r0
 81010b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81010b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81010ba:	2b00      	cmp	r3, #0
 81010bc:	db0b      	blt.n	81010d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81010be:	88fb      	ldrh	r3, [r7, #6]
 81010c0:	f003 021f 	and.w	r2, r3, #31
 81010c4:	4907      	ldr	r1, [pc, #28]	; (81010e4 <__NVIC_EnableIRQ+0x38>)
 81010c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81010ca:	095b      	lsrs	r3, r3, #5
 81010cc:	2001      	movs	r0, #1
 81010ce:	fa00 f202 	lsl.w	r2, r0, r2
 81010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81010d6:	bf00      	nop
 81010d8:	370c      	adds	r7, #12
 81010da:	46bd      	mov	sp, r7
 81010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010e0:	4770      	bx	lr
 81010e2:	bf00      	nop
 81010e4:	e000e100 	.word	0xe000e100

081010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81010e8:	b480      	push	{r7}
 81010ea:	b083      	sub	sp, #12
 81010ec:	af00      	add	r7, sp, #0
 81010ee:	4603      	mov	r3, r0
 81010f0:	6039      	str	r1, [r7, #0]
 81010f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81010f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81010f8:	2b00      	cmp	r3, #0
 81010fa:	db0a      	blt.n	8101112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81010fc:	683b      	ldr	r3, [r7, #0]
 81010fe:	b2da      	uxtb	r2, r3
 8101100:	490c      	ldr	r1, [pc, #48]	; (8101134 <__NVIC_SetPriority+0x4c>)
 8101102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101106:	0112      	lsls	r2, r2, #4
 8101108:	b2d2      	uxtb	r2, r2
 810110a:	440b      	add	r3, r1
 810110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101110:	e00a      	b.n	8101128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101112:	683b      	ldr	r3, [r7, #0]
 8101114:	b2da      	uxtb	r2, r3
 8101116:	4908      	ldr	r1, [pc, #32]	; (8101138 <__NVIC_SetPriority+0x50>)
 8101118:	88fb      	ldrh	r3, [r7, #6]
 810111a:	f003 030f 	and.w	r3, r3, #15
 810111e:	3b04      	subs	r3, #4
 8101120:	0112      	lsls	r2, r2, #4
 8101122:	b2d2      	uxtb	r2, r2
 8101124:	440b      	add	r3, r1
 8101126:	761a      	strb	r2, [r3, #24]
}
 8101128:	bf00      	nop
 810112a:	370c      	adds	r7, #12
 810112c:	46bd      	mov	sp, r7
 810112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101132:	4770      	bx	lr
 8101134:	e000e100 	.word	0xe000e100
 8101138:	e000ed00 	.word	0xe000ed00

0810113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810113c:	b480      	push	{r7}
 810113e:	b089      	sub	sp, #36	; 0x24
 8101140:	af00      	add	r7, sp, #0
 8101142:	60f8      	str	r0, [r7, #12]
 8101144:	60b9      	str	r1, [r7, #8]
 8101146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101148:	68fb      	ldr	r3, [r7, #12]
 810114a:	f003 0307 	and.w	r3, r3, #7
 810114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101150:	69fb      	ldr	r3, [r7, #28]
 8101152:	f1c3 0307 	rsb	r3, r3, #7
 8101156:	2b04      	cmp	r3, #4
 8101158:	bf28      	it	cs
 810115a:	2304      	movcs	r3, #4
 810115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810115e:	69fb      	ldr	r3, [r7, #28]
 8101160:	3304      	adds	r3, #4
 8101162:	2b06      	cmp	r3, #6
 8101164:	d902      	bls.n	810116c <NVIC_EncodePriority+0x30>
 8101166:	69fb      	ldr	r3, [r7, #28]
 8101168:	3b03      	subs	r3, #3
 810116a:	e000      	b.n	810116e <NVIC_EncodePriority+0x32>
 810116c:	2300      	movs	r3, #0
 810116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101170:	f04f 32ff 	mov.w	r2, #4294967295
 8101174:	69bb      	ldr	r3, [r7, #24]
 8101176:	fa02 f303 	lsl.w	r3, r2, r3
 810117a:	43da      	mvns	r2, r3
 810117c:	68bb      	ldr	r3, [r7, #8]
 810117e:	401a      	ands	r2, r3
 8101180:	697b      	ldr	r3, [r7, #20]
 8101182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101184:	f04f 31ff 	mov.w	r1, #4294967295
 8101188:	697b      	ldr	r3, [r7, #20]
 810118a:	fa01 f303 	lsl.w	r3, r1, r3
 810118e:	43d9      	mvns	r1, r3
 8101190:	687b      	ldr	r3, [r7, #4]
 8101192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101194:	4313      	orrs	r3, r2
         );
}
 8101196:	4618      	mov	r0, r3
 8101198:	3724      	adds	r7, #36	; 0x24
 810119a:	46bd      	mov	sp, r7
 810119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011a0:	4770      	bx	lr

081011a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81011a2:	b580      	push	{r7, lr}
 81011a4:	b082      	sub	sp, #8
 81011a6:	af00      	add	r7, sp, #0
 81011a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81011aa:	6878      	ldr	r0, [r7, #4]
 81011ac:	f7ff ff4c 	bl	8101048 <__NVIC_SetPriorityGrouping>
}
 81011b0:	bf00      	nop
 81011b2:	3708      	adds	r7, #8
 81011b4:	46bd      	mov	sp, r7
 81011b6:	bd80      	pop	{r7, pc}

081011b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81011b8:	b580      	push	{r7, lr}
 81011ba:	b086      	sub	sp, #24
 81011bc:	af00      	add	r7, sp, #0
 81011be:	4603      	mov	r3, r0
 81011c0:	60b9      	str	r1, [r7, #8]
 81011c2:	607a      	str	r2, [r7, #4]
 81011c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81011c6:	f7ff ff63 	bl	8101090 <__NVIC_GetPriorityGrouping>
 81011ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81011cc:	687a      	ldr	r2, [r7, #4]
 81011ce:	68b9      	ldr	r1, [r7, #8]
 81011d0:	6978      	ldr	r0, [r7, #20]
 81011d2:	f7ff ffb3 	bl	810113c <NVIC_EncodePriority>
 81011d6:	4602      	mov	r2, r0
 81011d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81011dc:	4611      	mov	r1, r2
 81011de:	4618      	mov	r0, r3
 81011e0:	f7ff ff82 	bl	81010e8 <__NVIC_SetPriority>
}
 81011e4:	bf00      	nop
 81011e6:	3718      	adds	r7, #24
 81011e8:	46bd      	mov	sp, r7
 81011ea:	bd80      	pop	{r7, pc}

081011ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81011ec:	b580      	push	{r7, lr}
 81011ee:	b082      	sub	sp, #8
 81011f0:	af00      	add	r7, sp, #0
 81011f2:	4603      	mov	r3, r0
 81011f4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81011f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81011fa:	4618      	mov	r0, r3
 81011fc:	f7ff ff56 	bl	81010ac <__NVIC_EnableIRQ>
}
 8101200:	bf00      	nop
 8101202:	3708      	adds	r7, #8
 8101204:	46bd      	mov	sp, r7
 8101206:	bd80      	pop	{r7, pc}

08101208 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101208:	b480      	push	{r7}
 810120a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810120c:	4b07      	ldr	r3, [pc, #28]	; (810122c <HAL_GetCurrentCPUID+0x24>)
 810120e:	681b      	ldr	r3, [r3, #0]
 8101210:	091b      	lsrs	r3, r3, #4
 8101212:	f003 030f 	and.w	r3, r3, #15
 8101216:	2b07      	cmp	r3, #7
 8101218:	d101      	bne.n	810121e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810121a:	2303      	movs	r3, #3
 810121c:	e000      	b.n	8101220 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810121e:	2301      	movs	r3, #1
  }
}
 8101220:	4618      	mov	r0, r3
 8101222:	46bd      	mov	sp, r7
 8101224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101228:	4770      	bx	lr
 810122a:	bf00      	nop
 810122c:	e000ed00 	.word	0xe000ed00

08101230 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101230:	b480      	push	{r7}
 8101232:	b089      	sub	sp, #36	; 0x24
 8101234:	af00      	add	r7, sp, #0
 8101236:	6078      	str	r0, [r7, #4]
 8101238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810123a:	2300      	movs	r3, #0
 810123c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810123e:	4b89      	ldr	r3, [pc, #548]	; (8101464 <HAL_GPIO_Init+0x234>)
 8101240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101242:	e194      	b.n	810156e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101244:	683b      	ldr	r3, [r7, #0]
 8101246:	681a      	ldr	r2, [r3, #0]
 8101248:	2101      	movs	r1, #1
 810124a:	69fb      	ldr	r3, [r7, #28]
 810124c:	fa01 f303 	lsl.w	r3, r1, r3
 8101250:	4013      	ands	r3, r2
 8101252:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101254:	693b      	ldr	r3, [r7, #16]
 8101256:	2b00      	cmp	r3, #0
 8101258:	f000 8186 	beq.w	8101568 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810125c:	683b      	ldr	r3, [r7, #0]
 810125e:	685b      	ldr	r3, [r3, #4]
 8101260:	f003 0303 	and.w	r3, r3, #3
 8101264:	2b01      	cmp	r3, #1
 8101266:	d005      	beq.n	8101274 <HAL_GPIO_Init+0x44>
 8101268:	683b      	ldr	r3, [r7, #0]
 810126a:	685b      	ldr	r3, [r3, #4]
 810126c:	f003 0303 	and.w	r3, r3, #3
 8101270:	2b02      	cmp	r3, #2
 8101272:	d130      	bne.n	81012d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101274:	687b      	ldr	r3, [r7, #4]
 8101276:	689b      	ldr	r3, [r3, #8]
 8101278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810127a:	69fb      	ldr	r3, [r7, #28]
 810127c:	005b      	lsls	r3, r3, #1
 810127e:	2203      	movs	r2, #3
 8101280:	fa02 f303 	lsl.w	r3, r2, r3
 8101284:	43db      	mvns	r3, r3
 8101286:	69ba      	ldr	r2, [r7, #24]
 8101288:	4013      	ands	r3, r2
 810128a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810128c:	683b      	ldr	r3, [r7, #0]
 810128e:	68da      	ldr	r2, [r3, #12]
 8101290:	69fb      	ldr	r3, [r7, #28]
 8101292:	005b      	lsls	r3, r3, #1
 8101294:	fa02 f303 	lsl.w	r3, r2, r3
 8101298:	69ba      	ldr	r2, [r7, #24]
 810129a:	4313      	orrs	r3, r2
 810129c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810129e:	687b      	ldr	r3, [r7, #4]
 81012a0:	69ba      	ldr	r2, [r7, #24]
 81012a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81012a4:	687b      	ldr	r3, [r7, #4]
 81012a6:	685b      	ldr	r3, [r3, #4]
 81012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81012aa:	2201      	movs	r2, #1
 81012ac:	69fb      	ldr	r3, [r7, #28]
 81012ae:	fa02 f303 	lsl.w	r3, r2, r3
 81012b2:	43db      	mvns	r3, r3
 81012b4:	69ba      	ldr	r2, [r7, #24]
 81012b6:	4013      	ands	r3, r2
 81012b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81012ba:	683b      	ldr	r3, [r7, #0]
 81012bc:	685b      	ldr	r3, [r3, #4]
 81012be:	091b      	lsrs	r3, r3, #4
 81012c0:	f003 0201 	and.w	r2, r3, #1
 81012c4:	69fb      	ldr	r3, [r7, #28]
 81012c6:	fa02 f303 	lsl.w	r3, r2, r3
 81012ca:	69ba      	ldr	r2, [r7, #24]
 81012cc:	4313      	orrs	r3, r2
 81012ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81012d0:	687b      	ldr	r3, [r7, #4]
 81012d2:	69ba      	ldr	r2, [r7, #24]
 81012d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81012d6:	683b      	ldr	r3, [r7, #0]
 81012d8:	685b      	ldr	r3, [r3, #4]
 81012da:	f003 0303 	and.w	r3, r3, #3
 81012de:	2b03      	cmp	r3, #3
 81012e0:	d017      	beq.n	8101312 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81012e2:	687b      	ldr	r3, [r7, #4]
 81012e4:	68db      	ldr	r3, [r3, #12]
 81012e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81012e8:	69fb      	ldr	r3, [r7, #28]
 81012ea:	005b      	lsls	r3, r3, #1
 81012ec:	2203      	movs	r2, #3
 81012ee:	fa02 f303 	lsl.w	r3, r2, r3
 81012f2:	43db      	mvns	r3, r3
 81012f4:	69ba      	ldr	r2, [r7, #24]
 81012f6:	4013      	ands	r3, r2
 81012f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81012fa:	683b      	ldr	r3, [r7, #0]
 81012fc:	689a      	ldr	r2, [r3, #8]
 81012fe:	69fb      	ldr	r3, [r7, #28]
 8101300:	005b      	lsls	r3, r3, #1
 8101302:	fa02 f303 	lsl.w	r3, r2, r3
 8101306:	69ba      	ldr	r2, [r7, #24]
 8101308:	4313      	orrs	r3, r2
 810130a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810130c:	687b      	ldr	r3, [r7, #4]
 810130e:	69ba      	ldr	r2, [r7, #24]
 8101310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101312:	683b      	ldr	r3, [r7, #0]
 8101314:	685b      	ldr	r3, [r3, #4]
 8101316:	f003 0303 	and.w	r3, r3, #3
 810131a:	2b02      	cmp	r3, #2
 810131c:	d123      	bne.n	8101366 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810131e:	69fb      	ldr	r3, [r7, #28]
 8101320:	08da      	lsrs	r2, r3, #3
 8101322:	687b      	ldr	r3, [r7, #4]
 8101324:	3208      	adds	r2, #8
 8101326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810132c:	69fb      	ldr	r3, [r7, #28]
 810132e:	f003 0307 	and.w	r3, r3, #7
 8101332:	009b      	lsls	r3, r3, #2
 8101334:	220f      	movs	r2, #15
 8101336:	fa02 f303 	lsl.w	r3, r2, r3
 810133a:	43db      	mvns	r3, r3
 810133c:	69ba      	ldr	r2, [r7, #24]
 810133e:	4013      	ands	r3, r2
 8101340:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101342:	683b      	ldr	r3, [r7, #0]
 8101344:	691a      	ldr	r2, [r3, #16]
 8101346:	69fb      	ldr	r3, [r7, #28]
 8101348:	f003 0307 	and.w	r3, r3, #7
 810134c:	009b      	lsls	r3, r3, #2
 810134e:	fa02 f303 	lsl.w	r3, r2, r3
 8101352:	69ba      	ldr	r2, [r7, #24]
 8101354:	4313      	orrs	r3, r2
 8101356:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101358:	69fb      	ldr	r3, [r7, #28]
 810135a:	08da      	lsrs	r2, r3, #3
 810135c:	687b      	ldr	r3, [r7, #4]
 810135e:	3208      	adds	r2, #8
 8101360:	69b9      	ldr	r1, [r7, #24]
 8101362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101366:	687b      	ldr	r3, [r7, #4]
 8101368:	681b      	ldr	r3, [r3, #0]
 810136a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810136c:	69fb      	ldr	r3, [r7, #28]
 810136e:	005b      	lsls	r3, r3, #1
 8101370:	2203      	movs	r2, #3
 8101372:	fa02 f303 	lsl.w	r3, r2, r3
 8101376:	43db      	mvns	r3, r3
 8101378:	69ba      	ldr	r2, [r7, #24]
 810137a:	4013      	ands	r3, r2
 810137c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810137e:	683b      	ldr	r3, [r7, #0]
 8101380:	685b      	ldr	r3, [r3, #4]
 8101382:	f003 0203 	and.w	r2, r3, #3
 8101386:	69fb      	ldr	r3, [r7, #28]
 8101388:	005b      	lsls	r3, r3, #1
 810138a:	fa02 f303 	lsl.w	r3, r2, r3
 810138e:	69ba      	ldr	r2, [r7, #24]
 8101390:	4313      	orrs	r3, r2
 8101392:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101394:	687b      	ldr	r3, [r7, #4]
 8101396:	69ba      	ldr	r2, [r7, #24]
 8101398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810139a:	683b      	ldr	r3, [r7, #0]
 810139c:	685b      	ldr	r3, [r3, #4]
 810139e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81013a2:	2b00      	cmp	r3, #0
 81013a4:	f000 80e0 	beq.w	8101568 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81013a8:	4b2f      	ldr	r3, [pc, #188]	; (8101468 <HAL_GPIO_Init+0x238>)
 81013aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81013ae:	4a2e      	ldr	r2, [pc, #184]	; (8101468 <HAL_GPIO_Init+0x238>)
 81013b0:	f043 0302 	orr.w	r3, r3, #2
 81013b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81013b8:	4b2b      	ldr	r3, [pc, #172]	; (8101468 <HAL_GPIO_Init+0x238>)
 81013ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81013be:	f003 0302 	and.w	r3, r3, #2
 81013c2:	60fb      	str	r3, [r7, #12]
 81013c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81013c6:	4a29      	ldr	r2, [pc, #164]	; (810146c <HAL_GPIO_Init+0x23c>)
 81013c8:	69fb      	ldr	r3, [r7, #28]
 81013ca:	089b      	lsrs	r3, r3, #2
 81013cc:	3302      	adds	r3, #2
 81013ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81013d4:	69fb      	ldr	r3, [r7, #28]
 81013d6:	f003 0303 	and.w	r3, r3, #3
 81013da:	009b      	lsls	r3, r3, #2
 81013dc:	220f      	movs	r2, #15
 81013de:	fa02 f303 	lsl.w	r3, r2, r3
 81013e2:	43db      	mvns	r3, r3
 81013e4:	69ba      	ldr	r2, [r7, #24]
 81013e6:	4013      	ands	r3, r2
 81013e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81013ea:	687b      	ldr	r3, [r7, #4]
 81013ec:	4a20      	ldr	r2, [pc, #128]	; (8101470 <HAL_GPIO_Init+0x240>)
 81013ee:	4293      	cmp	r3, r2
 81013f0:	d052      	beq.n	8101498 <HAL_GPIO_Init+0x268>
 81013f2:	687b      	ldr	r3, [r7, #4]
 81013f4:	4a1f      	ldr	r2, [pc, #124]	; (8101474 <HAL_GPIO_Init+0x244>)
 81013f6:	4293      	cmp	r3, r2
 81013f8:	d031      	beq.n	810145e <HAL_GPIO_Init+0x22e>
 81013fa:	687b      	ldr	r3, [r7, #4]
 81013fc:	4a1e      	ldr	r2, [pc, #120]	; (8101478 <HAL_GPIO_Init+0x248>)
 81013fe:	4293      	cmp	r3, r2
 8101400:	d02b      	beq.n	810145a <HAL_GPIO_Init+0x22a>
 8101402:	687b      	ldr	r3, [r7, #4]
 8101404:	4a1d      	ldr	r2, [pc, #116]	; (810147c <HAL_GPIO_Init+0x24c>)
 8101406:	4293      	cmp	r3, r2
 8101408:	d025      	beq.n	8101456 <HAL_GPIO_Init+0x226>
 810140a:	687b      	ldr	r3, [r7, #4]
 810140c:	4a1c      	ldr	r2, [pc, #112]	; (8101480 <HAL_GPIO_Init+0x250>)
 810140e:	4293      	cmp	r3, r2
 8101410:	d01f      	beq.n	8101452 <HAL_GPIO_Init+0x222>
 8101412:	687b      	ldr	r3, [r7, #4]
 8101414:	4a1b      	ldr	r2, [pc, #108]	; (8101484 <HAL_GPIO_Init+0x254>)
 8101416:	4293      	cmp	r3, r2
 8101418:	d019      	beq.n	810144e <HAL_GPIO_Init+0x21e>
 810141a:	687b      	ldr	r3, [r7, #4]
 810141c:	4a1a      	ldr	r2, [pc, #104]	; (8101488 <HAL_GPIO_Init+0x258>)
 810141e:	4293      	cmp	r3, r2
 8101420:	d013      	beq.n	810144a <HAL_GPIO_Init+0x21a>
 8101422:	687b      	ldr	r3, [r7, #4]
 8101424:	4a19      	ldr	r2, [pc, #100]	; (810148c <HAL_GPIO_Init+0x25c>)
 8101426:	4293      	cmp	r3, r2
 8101428:	d00d      	beq.n	8101446 <HAL_GPIO_Init+0x216>
 810142a:	687b      	ldr	r3, [r7, #4]
 810142c:	4a18      	ldr	r2, [pc, #96]	; (8101490 <HAL_GPIO_Init+0x260>)
 810142e:	4293      	cmp	r3, r2
 8101430:	d007      	beq.n	8101442 <HAL_GPIO_Init+0x212>
 8101432:	687b      	ldr	r3, [r7, #4]
 8101434:	4a17      	ldr	r2, [pc, #92]	; (8101494 <HAL_GPIO_Init+0x264>)
 8101436:	4293      	cmp	r3, r2
 8101438:	d101      	bne.n	810143e <HAL_GPIO_Init+0x20e>
 810143a:	2309      	movs	r3, #9
 810143c:	e02d      	b.n	810149a <HAL_GPIO_Init+0x26a>
 810143e:	230a      	movs	r3, #10
 8101440:	e02b      	b.n	810149a <HAL_GPIO_Init+0x26a>
 8101442:	2308      	movs	r3, #8
 8101444:	e029      	b.n	810149a <HAL_GPIO_Init+0x26a>
 8101446:	2307      	movs	r3, #7
 8101448:	e027      	b.n	810149a <HAL_GPIO_Init+0x26a>
 810144a:	2306      	movs	r3, #6
 810144c:	e025      	b.n	810149a <HAL_GPIO_Init+0x26a>
 810144e:	2305      	movs	r3, #5
 8101450:	e023      	b.n	810149a <HAL_GPIO_Init+0x26a>
 8101452:	2304      	movs	r3, #4
 8101454:	e021      	b.n	810149a <HAL_GPIO_Init+0x26a>
 8101456:	2303      	movs	r3, #3
 8101458:	e01f      	b.n	810149a <HAL_GPIO_Init+0x26a>
 810145a:	2302      	movs	r3, #2
 810145c:	e01d      	b.n	810149a <HAL_GPIO_Init+0x26a>
 810145e:	2301      	movs	r3, #1
 8101460:	e01b      	b.n	810149a <HAL_GPIO_Init+0x26a>
 8101462:	bf00      	nop
 8101464:	580000c0 	.word	0x580000c0
 8101468:	58024400 	.word	0x58024400
 810146c:	58000400 	.word	0x58000400
 8101470:	58020000 	.word	0x58020000
 8101474:	58020400 	.word	0x58020400
 8101478:	58020800 	.word	0x58020800
 810147c:	58020c00 	.word	0x58020c00
 8101480:	58021000 	.word	0x58021000
 8101484:	58021400 	.word	0x58021400
 8101488:	58021800 	.word	0x58021800
 810148c:	58021c00 	.word	0x58021c00
 8101490:	58022000 	.word	0x58022000
 8101494:	58022400 	.word	0x58022400
 8101498:	2300      	movs	r3, #0
 810149a:	69fa      	ldr	r2, [r7, #28]
 810149c:	f002 0203 	and.w	r2, r2, #3
 81014a0:	0092      	lsls	r2, r2, #2
 81014a2:	4093      	lsls	r3, r2
 81014a4:	69ba      	ldr	r2, [r7, #24]
 81014a6:	4313      	orrs	r3, r2
 81014a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81014aa:	4938      	ldr	r1, [pc, #224]	; (810158c <HAL_GPIO_Init+0x35c>)
 81014ac:	69fb      	ldr	r3, [r7, #28]
 81014ae:	089b      	lsrs	r3, r3, #2
 81014b0:	3302      	adds	r3, #2
 81014b2:	69ba      	ldr	r2, [r7, #24]
 81014b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81014b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81014bc:	681b      	ldr	r3, [r3, #0]
 81014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81014c0:	693b      	ldr	r3, [r7, #16]
 81014c2:	43db      	mvns	r3, r3
 81014c4:	69ba      	ldr	r2, [r7, #24]
 81014c6:	4013      	ands	r3, r2
 81014c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81014ca:	683b      	ldr	r3, [r7, #0]
 81014cc:	685b      	ldr	r3, [r3, #4]
 81014ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81014d2:	2b00      	cmp	r3, #0
 81014d4:	d003      	beq.n	81014de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81014d6:	69ba      	ldr	r2, [r7, #24]
 81014d8:	693b      	ldr	r3, [r7, #16]
 81014da:	4313      	orrs	r3, r2
 81014dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81014de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81014e2:	69bb      	ldr	r3, [r7, #24]
 81014e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81014e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81014ea:	685b      	ldr	r3, [r3, #4]
 81014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81014ee:	693b      	ldr	r3, [r7, #16]
 81014f0:	43db      	mvns	r3, r3
 81014f2:	69ba      	ldr	r2, [r7, #24]
 81014f4:	4013      	ands	r3, r2
 81014f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81014f8:	683b      	ldr	r3, [r7, #0]
 81014fa:	685b      	ldr	r3, [r3, #4]
 81014fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101500:	2b00      	cmp	r3, #0
 8101502:	d003      	beq.n	810150c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101504:	69ba      	ldr	r2, [r7, #24]
 8101506:	693b      	ldr	r3, [r7, #16]
 8101508:	4313      	orrs	r3, r2
 810150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810150c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101510:	69bb      	ldr	r3, [r7, #24]
 8101512:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101514:	697b      	ldr	r3, [r7, #20]
 8101516:	685b      	ldr	r3, [r3, #4]
 8101518:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810151a:	693b      	ldr	r3, [r7, #16]
 810151c:	43db      	mvns	r3, r3
 810151e:	69ba      	ldr	r2, [r7, #24]
 8101520:	4013      	ands	r3, r2
 8101522:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101524:	683b      	ldr	r3, [r7, #0]
 8101526:	685b      	ldr	r3, [r3, #4]
 8101528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810152c:	2b00      	cmp	r3, #0
 810152e:	d003      	beq.n	8101538 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101530:	69ba      	ldr	r2, [r7, #24]
 8101532:	693b      	ldr	r3, [r7, #16]
 8101534:	4313      	orrs	r3, r2
 8101536:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101538:	697b      	ldr	r3, [r7, #20]
 810153a:	69ba      	ldr	r2, [r7, #24]
 810153c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810153e:	697b      	ldr	r3, [r7, #20]
 8101540:	681b      	ldr	r3, [r3, #0]
 8101542:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101544:	693b      	ldr	r3, [r7, #16]
 8101546:	43db      	mvns	r3, r3
 8101548:	69ba      	ldr	r2, [r7, #24]
 810154a:	4013      	ands	r3, r2
 810154c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810154e:	683b      	ldr	r3, [r7, #0]
 8101550:	685b      	ldr	r3, [r3, #4]
 8101552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101556:	2b00      	cmp	r3, #0
 8101558:	d003      	beq.n	8101562 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810155a:	69ba      	ldr	r2, [r7, #24]
 810155c:	693b      	ldr	r3, [r7, #16]
 810155e:	4313      	orrs	r3, r2
 8101560:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101562:	697b      	ldr	r3, [r7, #20]
 8101564:	69ba      	ldr	r2, [r7, #24]
 8101566:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101568:	69fb      	ldr	r3, [r7, #28]
 810156a:	3301      	adds	r3, #1
 810156c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810156e:	683b      	ldr	r3, [r7, #0]
 8101570:	681a      	ldr	r2, [r3, #0]
 8101572:	69fb      	ldr	r3, [r7, #28]
 8101574:	fa22 f303 	lsr.w	r3, r2, r3
 8101578:	2b00      	cmp	r3, #0
 810157a:	f47f ae63 	bne.w	8101244 <HAL_GPIO_Init+0x14>
  }
}
 810157e:	bf00      	nop
 8101580:	bf00      	nop
 8101582:	3724      	adds	r7, #36	; 0x24
 8101584:	46bd      	mov	sp, r7
 8101586:	f85d 7b04 	ldr.w	r7, [sp], #4
 810158a:	4770      	bx	lr
 810158c:	58000400 	.word	0x58000400

08101590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101590:	b480      	push	{r7}
 8101592:	b083      	sub	sp, #12
 8101594:	af00      	add	r7, sp, #0
 8101596:	6078      	str	r0, [r7, #4]
 8101598:	460b      	mov	r3, r1
 810159a:	807b      	strh	r3, [r7, #2]
 810159c:	4613      	mov	r3, r2
 810159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81015a0:	787b      	ldrb	r3, [r7, #1]
 81015a2:	2b00      	cmp	r3, #0
 81015a4:	d003      	beq.n	81015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81015a6:	887a      	ldrh	r2, [r7, #2]
 81015a8:	687b      	ldr	r3, [r7, #4]
 81015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81015ac:	e003      	b.n	81015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81015ae:	887b      	ldrh	r3, [r7, #2]
 81015b0:	041a      	lsls	r2, r3, #16
 81015b2:	687b      	ldr	r3, [r7, #4]
 81015b4:	619a      	str	r2, [r3, #24]
}
 81015b6:	bf00      	nop
 81015b8:	370c      	adds	r7, #12
 81015ba:	46bd      	mov	sp, r7
 81015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015c0:	4770      	bx	lr

081015c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81015c2:	b480      	push	{r7}
 81015c4:	b085      	sub	sp, #20
 81015c6:	af00      	add	r7, sp, #0
 81015c8:	6078      	str	r0, [r7, #4]
 81015ca:	460b      	mov	r3, r1
 81015cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 81015ce:	687b      	ldr	r3, [r7, #4]
 81015d0:	695b      	ldr	r3, [r3, #20]
 81015d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 81015d4:	887a      	ldrh	r2, [r7, #2]
 81015d6:	68fb      	ldr	r3, [r7, #12]
 81015d8:	4013      	ands	r3, r2
 81015da:	041a      	lsls	r2, r3, #16
 81015dc:	68fb      	ldr	r3, [r7, #12]
 81015de:	43d9      	mvns	r1, r3
 81015e0:	887b      	ldrh	r3, [r7, #2]
 81015e2:	400b      	ands	r3, r1
 81015e4:	431a      	orrs	r2, r3
 81015e6:	687b      	ldr	r3, [r7, #4]
 81015e8:	619a      	str	r2, [r3, #24]
}
 81015ea:	bf00      	nop
 81015ec:	3714      	adds	r7, #20
 81015ee:	46bd      	mov	sp, r7
 81015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015f4:	4770      	bx	lr
	...

081015f8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81015f8:	b480      	push	{r7}
 81015fa:	b083      	sub	sp, #12
 81015fc:	af00      	add	r7, sp, #0
 81015fe:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101600:	4b05      	ldr	r3, [pc, #20]	; (8101618 <HAL_HSEM_ActivateNotification+0x20>)
 8101602:	681a      	ldr	r2, [r3, #0]
 8101604:	4904      	ldr	r1, [pc, #16]	; (8101618 <HAL_HSEM_ActivateNotification+0x20>)
 8101606:	687b      	ldr	r3, [r7, #4]
 8101608:	4313      	orrs	r3, r2
 810160a:	600b      	str	r3, [r1, #0]
#endif
}
 810160c:	bf00      	nop
 810160e:	370c      	adds	r7, #12
 8101610:	46bd      	mov	sp, r7
 8101612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101616:	4770      	bx	lr
 8101618:	58026510 	.word	0x58026510

0810161c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810161c:	b580      	push	{r7, lr}
 810161e:	b084      	sub	sp, #16
 8101620:	af00      	add	r7, sp, #0
 8101622:	60f8      	str	r0, [r7, #12]
 8101624:	460b      	mov	r3, r1
 8101626:	607a      	str	r2, [r7, #4]
 8101628:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810162a:	4b37      	ldr	r3, [pc, #220]	; (8101708 <HAL_PWREx_EnterSTOPMode+0xec>)
 810162c:	681b      	ldr	r3, [r3, #0]
 810162e:	f023 0201 	bic.w	r2, r3, #1
 8101632:	4935      	ldr	r1, [pc, #212]	; (8101708 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101634:	68fb      	ldr	r3, [r7, #12]
 8101636:	4313      	orrs	r3, r2
 8101638:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810163a:	687b      	ldr	r3, [r7, #4]
 810163c:	2b00      	cmp	r3, #0
 810163e:	d123      	bne.n	8101688 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101640:	f7ff fde2 	bl	8101208 <HAL_GetCurrentCPUID>
 8101644:	4603      	mov	r3, r0
 8101646:	2b03      	cmp	r3, #3
 8101648:	d158      	bne.n	81016fc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810164a:	4b2f      	ldr	r3, [pc, #188]	; (8101708 <HAL_PWREx_EnterSTOPMode+0xec>)
 810164c:	691b      	ldr	r3, [r3, #16]
 810164e:	4a2e      	ldr	r2, [pc, #184]	; (8101708 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101650:	f023 0301 	bic.w	r3, r3, #1
 8101654:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101656:	4b2d      	ldr	r3, [pc, #180]	; (810170c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101658:	691b      	ldr	r3, [r3, #16]
 810165a:	4a2c      	ldr	r2, [pc, #176]	; (810170c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810165c:	f043 0304 	orr.w	r3, r3, #4
 8101660:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101662:	f3bf 8f4f 	dsb	sy
}
 8101666:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101668:	f3bf 8f6f 	isb	sy
}
 810166c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810166e:	7afb      	ldrb	r3, [r7, #11]
 8101670:	2b01      	cmp	r3, #1
 8101672:	d101      	bne.n	8101678 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101674:	bf30      	wfi
 8101676:	e000      	b.n	810167a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101678:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810167a:	4b24      	ldr	r3, [pc, #144]	; (810170c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810167c:	691b      	ldr	r3, [r3, #16]
 810167e:	4a23      	ldr	r2, [pc, #140]	; (810170c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101680:	f023 0304 	bic.w	r3, r3, #4
 8101684:	6113      	str	r3, [r2, #16]
 8101686:	e03c      	b.n	8101702 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101688:	687b      	ldr	r3, [r7, #4]
 810168a:	2b01      	cmp	r3, #1
 810168c:	d123      	bne.n	81016d6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810168e:	f7ff fdbb 	bl	8101208 <HAL_GetCurrentCPUID>
 8101692:	4603      	mov	r3, r0
 8101694:	2b01      	cmp	r3, #1
 8101696:	d133      	bne.n	8101700 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101698:	4b1b      	ldr	r3, [pc, #108]	; (8101708 <HAL_PWREx_EnterSTOPMode+0xec>)
 810169a:	695b      	ldr	r3, [r3, #20]
 810169c:	4a1a      	ldr	r2, [pc, #104]	; (8101708 <HAL_PWREx_EnterSTOPMode+0xec>)
 810169e:	f023 0302 	bic.w	r3, r3, #2
 81016a2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81016a4:	4b19      	ldr	r3, [pc, #100]	; (810170c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81016a6:	691b      	ldr	r3, [r3, #16]
 81016a8:	4a18      	ldr	r2, [pc, #96]	; (810170c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81016aa:	f043 0304 	orr.w	r3, r3, #4
 81016ae:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81016b0:	f3bf 8f4f 	dsb	sy
}
 81016b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81016b6:	f3bf 8f6f 	isb	sy
}
 81016ba:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81016bc:	7afb      	ldrb	r3, [r7, #11]
 81016be:	2b01      	cmp	r3, #1
 81016c0:	d101      	bne.n	81016c6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81016c2:	bf30      	wfi
 81016c4:	e000      	b.n	81016c8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81016c6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81016c8:	4b10      	ldr	r3, [pc, #64]	; (810170c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81016ca:	691b      	ldr	r3, [r3, #16]
 81016cc:	4a0f      	ldr	r2, [pc, #60]	; (810170c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81016ce:	f023 0304 	bic.w	r3, r3, #4
 81016d2:	6113      	str	r3, [r2, #16]
 81016d4:	e015      	b.n	8101702 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81016d6:	f7ff fd97 	bl	8101208 <HAL_GetCurrentCPUID>
 81016da:	4603      	mov	r3, r0
 81016dc:	2b03      	cmp	r3, #3
 81016de:	d106      	bne.n	81016ee <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81016e0:	4b09      	ldr	r3, [pc, #36]	; (8101708 <HAL_PWREx_EnterSTOPMode+0xec>)
 81016e2:	691b      	ldr	r3, [r3, #16]
 81016e4:	4a08      	ldr	r2, [pc, #32]	; (8101708 <HAL_PWREx_EnterSTOPMode+0xec>)
 81016e6:	f023 0304 	bic.w	r3, r3, #4
 81016ea:	6113      	str	r3, [r2, #16]
 81016ec:	e009      	b.n	8101702 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81016ee:	4b06      	ldr	r3, [pc, #24]	; (8101708 <HAL_PWREx_EnterSTOPMode+0xec>)
 81016f0:	695b      	ldr	r3, [r3, #20]
 81016f2:	4a05      	ldr	r2, [pc, #20]	; (8101708 <HAL_PWREx_EnterSTOPMode+0xec>)
 81016f4:	f023 0304 	bic.w	r3, r3, #4
 81016f8:	6153      	str	r3, [r2, #20]
 81016fa:	e002      	b.n	8101702 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81016fc:	bf00      	nop
 81016fe:	e000      	b.n	8101702 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101700:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101702:	3710      	adds	r7, #16
 8101704:	46bd      	mov	sp, r7
 8101706:	bd80      	pop	{r7, pc}
 8101708:	58024800 	.word	0x58024800
 810170c:	e000ed00 	.word	0xe000ed00

08101710 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101710:	b580      	push	{r7, lr}
 8101712:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101714:	f7ff fd78 	bl	8101208 <HAL_GetCurrentCPUID>
 8101718:	4603      	mov	r3, r0
 810171a:	2b03      	cmp	r3, #3
 810171c:	d101      	bne.n	8101722 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810171e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101720:	e001      	b.n	8101726 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101722:	bf40      	sev
    __WFE ();
 8101724:	bf20      	wfe
}
 8101726:	bf00      	nop
 8101728:	bd80      	pop	{r7, pc}
	...

0810172c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810172c:	b480      	push	{r7}
 810172e:	b089      	sub	sp, #36	; 0x24
 8101730:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101732:	4bb3      	ldr	r3, [pc, #716]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101734:	691b      	ldr	r3, [r3, #16]
 8101736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810173a:	2b18      	cmp	r3, #24
 810173c:	f200 8155 	bhi.w	81019ea <HAL_RCC_GetSysClockFreq+0x2be>
 8101740:	a201      	add	r2, pc, #4	; (adr r2, 8101748 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101746:	bf00      	nop
 8101748:	081017ad 	.word	0x081017ad
 810174c:	081019eb 	.word	0x081019eb
 8101750:	081019eb 	.word	0x081019eb
 8101754:	081019eb 	.word	0x081019eb
 8101758:	081019eb 	.word	0x081019eb
 810175c:	081019eb 	.word	0x081019eb
 8101760:	081019eb 	.word	0x081019eb
 8101764:	081019eb 	.word	0x081019eb
 8101768:	081017d3 	.word	0x081017d3
 810176c:	081019eb 	.word	0x081019eb
 8101770:	081019eb 	.word	0x081019eb
 8101774:	081019eb 	.word	0x081019eb
 8101778:	081019eb 	.word	0x081019eb
 810177c:	081019eb 	.word	0x081019eb
 8101780:	081019eb 	.word	0x081019eb
 8101784:	081019eb 	.word	0x081019eb
 8101788:	081017d9 	.word	0x081017d9
 810178c:	081019eb 	.word	0x081019eb
 8101790:	081019eb 	.word	0x081019eb
 8101794:	081019eb 	.word	0x081019eb
 8101798:	081019eb 	.word	0x081019eb
 810179c:	081019eb 	.word	0x081019eb
 81017a0:	081019eb 	.word	0x081019eb
 81017a4:	081019eb 	.word	0x081019eb
 81017a8:	081017df 	.word	0x081017df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81017ac:	4b94      	ldr	r3, [pc, #592]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017ae:	681b      	ldr	r3, [r3, #0]
 81017b0:	f003 0320 	and.w	r3, r3, #32
 81017b4:	2b00      	cmp	r3, #0
 81017b6:	d009      	beq.n	81017cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81017b8:	4b91      	ldr	r3, [pc, #580]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017ba:	681b      	ldr	r3, [r3, #0]
 81017bc:	08db      	lsrs	r3, r3, #3
 81017be:	f003 0303 	and.w	r3, r3, #3
 81017c2:	4a90      	ldr	r2, [pc, #576]	; (8101a04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81017c4:	fa22 f303 	lsr.w	r3, r2, r3
 81017c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81017ca:	e111      	b.n	81019f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81017cc:	4b8d      	ldr	r3, [pc, #564]	; (8101a04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81017ce:	61bb      	str	r3, [r7, #24]
    break;
 81017d0:	e10e      	b.n	81019f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81017d2:	4b8d      	ldr	r3, [pc, #564]	; (8101a08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81017d4:	61bb      	str	r3, [r7, #24]
    break;
 81017d6:	e10b      	b.n	81019f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81017d8:	4b8c      	ldr	r3, [pc, #560]	; (8101a0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 81017da:	61bb      	str	r3, [r7, #24]
    break;
 81017dc:	e108      	b.n	81019f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81017de:	4b88      	ldr	r3, [pc, #544]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81017e2:	f003 0303 	and.w	r3, r3, #3
 81017e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81017e8:	4b85      	ldr	r3, [pc, #532]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81017ec:	091b      	lsrs	r3, r3, #4
 81017ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81017f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81017f4:	4b82      	ldr	r3, [pc, #520]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81017f8:	f003 0301 	and.w	r3, r3, #1
 81017fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81017fe:	4b80      	ldr	r3, [pc, #512]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101802:	08db      	lsrs	r3, r3, #3
 8101804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101808:	68fa      	ldr	r2, [r7, #12]
 810180a:	fb02 f303 	mul.w	r3, r2, r3
 810180e:	ee07 3a90 	vmov	s15, r3
 8101812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101816:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810181a:	693b      	ldr	r3, [r7, #16]
 810181c:	2b00      	cmp	r3, #0
 810181e:	f000 80e1 	beq.w	81019e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101822:	697b      	ldr	r3, [r7, #20]
 8101824:	2b02      	cmp	r3, #2
 8101826:	f000 8083 	beq.w	8101930 <HAL_RCC_GetSysClockFreq+0x204>
 810182a:	697b      	ldr	r3, [r7, #20]
 810182c:	2b02      	cmp	r3, #2
 810182e:	f200 80a1 	bhi.w	8101974 <HAL_RCC_GetSysClockFreq+0x248>
 8101832:	697b      	ldr	r3, [r7, #20]
 8101834:	2b00      	cmp	r3, #0
 8101836:	d003      	beq.n	8101840 <HAL_RCC_GetSysClockFreq+0x114>
 8101838:	697b      	ldr	r3, [r7, #20]
 810183a:	2b01      	cmp	r3, #1
 810183c:	d056      	beq.n	81018ec <HAL_RCC_GetSysClockFreq+0x1c0>
 810183e:	e099      	b.n	8101974 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101840:	4b6f      	ldr	r3, [pc, #444]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101842:	681b      	ldr	r3, [r3, #0]
 8101844:	f003 0320 	and.w	r3, r3, #32
 8101848:	2b00      	cmp	r3, #0
 810184a:	d02d      	beq.n	81018a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810184c:	4b6c      	ldr	r3, [pc, #432]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810184e:	681b      	ldr	r3, [r3, #0]
 8101850:	08db      	lsrs	r3, r3, #3
 8101852:	f003 0303 	and.w	r3, r3, #3
 8101856:	4a6b      	ldr	r2, [pc, #428]	; (8101a04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101858:	fa22 f303 	lsr.w	r3, r2, r3
 810185c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810185e:	687b      	ldr	r3, [r7, #4]
 8101860:	ee07 3a90 	vmov	s15, r3
 8101864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101868:	693b      	ldr	r3, [r7, #16]
 810186a:	ee07 3a90 	vmov	s15, r3
 810186e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101876:	4b62      	ldr	r3, [pc, #392]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810187a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810187e:	ee07 3a90 	vmov	s15, r3
 8101882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101886:	ed97 6a02 	vldr	s12, [r7, #8]
 810188a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101a10 <HAL_RCC_GetSysClockFreq+0x2e4>
 810188e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810189a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810189e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81018a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81018a6:	e087      	b.n	81019b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81018a8:	693b      	ldr	r3, [r7, #16]
 81018aa:	ee07 3a90 	vmov	s15, r3
 81018ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101a14 <HAL_RCC_GetSysClockFreq+0x2e8>
 81018b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81018ba:	4b51      	ldr	r3, [pc, #324]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81018be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81018c2:	ee07 3a90 	vmov	s15, r3
 81018c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81018ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81018ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101a10 <HAL_RCC_GetSysClockFreq+0x2e4>
 81018d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81018d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81018da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81018de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81018e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81018e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81018ea:	e065      	b.n	81019b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81018ec:	693b      	ldr	r3, [r7, #16]
 81018ee:	ee07 3a90 	vmov	s15, r3
 81018f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101a18 <HAL_RCC_GetSysClockFreq+0x2ec>
 81018fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81018fe:	4b40      	ldr	r3, [pc, #256]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101906:	ee07 3a90 	vmov	s15, r3
 810190a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810190e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101912:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101a10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810191a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810191e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101926:	ee67 7a27 	vmul.f32	s15, s14, s15
 810192a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810192e:	e043      	b.n	81019b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101930:	693b      	ldr	r3, [r7, #16]
 8101932:	ee07 3a90 	vmov	s15, r3
 8101936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810193a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101a1c <HAL_RCC_GetSysClockFreq+0x2f0>
 810193e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101942:	4b2f      	ldr	r3, [pc, #188]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810194a:	ee07 3a90 	vmov	s15, r3
 810194e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101952:	ed97 6a02 	vldr	s12, [r7, #8]
 8101956:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101a10 <HAL_RCC_GetSysClockFreq+0x2e4>
 810195a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810195e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810196a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810196e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101972:	e021      	b.n	81019b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101974:	693b      	ldr	r3, [r7, #16]
 8101976:	ee07 3a90 	vmov	s15, r3
 810197a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810197e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101a18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101986:	4b1e      	ldr	r3, [pc, #120]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810198a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810198e:	ee07 3a90 	vmov	s15, r3
 8101992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101996:	ed97 6a02 	vldr	s12, [r7, #8]
 810199a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101a10 <HAL_RCC_GetSysClockFreq+0x2e4>
 810199e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81019a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81019a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81019aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81019ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81019b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81019b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81019b8:	4b11      	ldr	r3, [pc, #68]	; (8101a00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81019bc:	0a5b      	lsrs	r3, r3, #9
 81019be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81019c2:	3301      	adds	r3, #1
 81019c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81019c6:	683b      	ldr	r3, [r7, #0]
 81019c8:	ee07 3a90 	vmov	s15, r3
 81019cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81019d0:	edd7 6a07 	vldr	s13, [r7, #28]
 81019d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81019d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81019dc:	ee17 3a90 	vmov	r3, s15
 81019e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81019e2:	e005      	b.n	81019f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81019e4:	2300      	movs	r3, #0
 81019e6:	61bb      	str	r3, [r7, #24]
    break;
 81019e8:	e002      	b.n	81019f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81019ea:	4b07      	ldr	r3, [pc, #28]	; (8101a08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81019ec:	61bb      	str	r3, [r7, #24]
    break;
 81019ee:	bf00      	nop
  }

  return sysclockfreq;
 81019f0:	69bb      	ldr	r3, [r7, #24]
}
 81019f2:	4618      	mov	r0, r3
 81019f4:	3724      	adds	r7, #36	; 0x24
 81019f6:	46bd      	mov	sp, r7
 81019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019fc:	4770      	bx	lr
 81019fe:	bf00      	nop
 8101a00:	58024400 	.word	0x58024400
 8101a04:	03d09000 	.word	0x03d09000
 8101a08:	003d0900 	.word	0x003d0900
 8101a0c:	007a1200 	.word	0x007a1200
 8101a10:	46000000 	.word	0x46000000
 8101a14:	4c742400 	.word	0x4c742400
 8101a18:	4a742400 	.word	0x4a742400
 8101a1c:	4af42400 	.word	0x4af42400

08101a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101a20:	b580      	push	{r7, lr}
 8101a22:	b082      	sub	sp, #8
 8101a24:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101a26:	f7ff fe81 	bl	810172c <HAL_RCC_GetSysClockFreq>
 8101a2a:	4602      	mov	r2, r0
 8101a2c:	4b11      	ldr	r3, [pc, #68]	; (8101a74 <HAL_RCC_GetHCLKFreq+0x54>)
 8101a2e:	699b      	ldr	r3, [r3, #24]
 8101a30:	0a1b      	lsrs	r3, r3, #8
 8101a32:	f003 030f 	and.w	r3, r3, #15
 8101a36:	4910      	ldr	r1, [pc, #64]	; (8101a78 <HAL_RCC_GetHCLKFreq+0x58>)
 8101a38:	5ccb      	ldrb	r3, [r1, r3]
 8101a3a:	f003 031f 	and.w	r3, r3, #31
 8101a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8101a42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101a44:	4b0b      	ldr	r3, [pc, #44]	; (8101a74 <HAL_RCC_GetHCLKFreq+0x54>)
 8101a46:	699b      	ldr	r3, [r3, #24]
 8101a48:	f003 030f 	and.w	r3, r3, #15
 8101a4c:	4a0a      	ldr	r2, [pc, #40]	; (8101a78 <HAL_RCC_GetHCLKFreq+0x58>)
 8101a4e:	5cd3      	ldrb	r3, [r2, r3]
 8101a50:	f003 031f 	and.w	r3, r3, #31
 8101a54:	687a      	ldr	r2, [r7, #4]
 8101a56:	fa22 f303 	lsr.w	r3, r2, r3
 8101a5a:	4a08      	ldr	r2, [pc, #32]	; (8101a7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a5c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101a5e:	4b07      	ldr	r3, [pc, #28]	; (8101a7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a60:	681b      	ldr	r3, [r3, #0]
 8101a62:	4a07      	ldr	r2, [pc, #28]	; (8101a80 <HAL_RCC_GetHCLKFreq+0x60>)
 8101a64:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8101a66:	4b05      	ldr	r3, [pc, #20]	; (8101a7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a68:	681b      	ldr	r3, [r3, #0]
}
 8101a6a:	4618      	mov	r0, r3
 8101a6c:	3708      	adds	r7, #8
 8101a6e:	46bd      	mov	sp, r7
 8101a70:	bd80      	pop	{r7, pc}
 8101a72:	bf00      	nop
 8101a74:	58024400 	.word	0x58024400
 8101a78:	08105bf0 	.word	0x08105bf0
 8101a7c:	10000004 	.word	0x10000004
 8101a80:	10000000 	.word	0x10000000

08101a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101a84:	b580      	push	{r7, lr}
 8101a86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101a88:	f7ff ffca 	bl	8101a20 <HAL_RCC_GetHCLKFreq>
 8101a8c:	4602      	mov	r2, r0
 8101a8e:	4b06      	ldr	r3, [pc, #24]	; (8101aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101a90:	69db      	ldr	r3, [r3, #28]
 8101a92:	091b      	lsrs	r3, r3, #4
 8101a94:	f003 0307 	and.w	r3, r3, #7
 8101a98:	4904      	ldr	r1, [pc, #16]	; (8101aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8101a9a:	5ccb      	ldrb	r3, [r1, r3]
 8101a9c:	f003 031f 	and.w	r3, r3, #31
 8101aa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101aa4:	4618      	mov	r0, r3
 8101aa6:	bd80      	pop	{r7, pc}
 8101aa8:	58024400 	.word	0x58024400
 8101aac:	08105bf0 	.word	0x08105bf0

08101ab0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8101ab0:	b480      	push	{r7}
 8101ab2:	b083      	sub	sp, #12
 8101ab4:	af00      	add	r7, sp, #0
 8101ab6:	6078      	str	r0, [r7, #4]
 8101ab8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8101aba:	687b      	ldr	r3, [r7, #4]
 8101abc:	223f      	movs	r2, #63	; 0x3f
 8101abe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8101ac0:	4b1a      	ldr	r3, [pc, #104]	; (8101b2c <HAL_RCC_GetClockConfig+0x7c>)
 8101ac2:	691b      	ldr	r3, [r3, #16]
 8101ac4:	f003 0207 	and.w	r2, r3, #7
 8101ac8:	687b      	ldr	r3, [r7, #4]
 8101aca:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8101acc:	4b17      	ldr	r3, [pc, #92]	; (8101b2c <HAL_RCC_GetClockConfig+0x7c>)
 8101ace:	699b      	ldr	r3, [r3, #24]
 8101ad0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8101ad4:	687b      	ldr	r3, [r7, #4]
 8101ad6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8101ad8:	4b14      	ldr	r3, [pc, #80]	; (8101b2c <HAL_RCC_GetClockConfig+0x7c>)
 8101ada:	699b      	ldr	r3, [r3, #24]
 8101adc:	f003 020f 	and.w	r2, r3, #15
 8101ae0:	687b      	ldr	r3, [r7, #4]
 8101ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8101ae4:	4b11      	ldr	r3, [pc, #68]	; (8101b2c <HAL_RCC_GetClockConfig+0x7c>)
 8101ae6:	699b      	ldr	r3, [r3, #24]
 8101ae8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8101af0:	4b0e      	ldr	r3, [pc, #56]	; (8101b2c <HAL_RCC_GetClockConfig+0x7c>)
 8101af2:	69db      	ldr	r3, [r3, #28]
 8101af4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101af8:	687b      	ldr	r3, [r7, #4]
 8101afa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8101afc:	4b0b      	ldr	r3, [pc, #44]	; (8101b2c <HAL_RCC_GetClockConfig+0x7c>)
 8101afe:	69db      	ldr	r3, [r3, #28]
 8101b00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8101b04:	687b      	ldr	r3, [r7, #4]
 8101b06:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8101b08:	4b08      	ldr	r3, [pc, #32]	; (8101b2c <HAL_RCC_GetClockConfig+0x7c>)
 8101b0a:	6a1b      	ldr	r3, [r3, #32]
 8101b0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101b10:	687b      	ldr	r3, [r7, #4]
 8101b12:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8101b14:	4b06      	ldr	r3, [pc, #24]	; (8101b30 <HAL_RCC_GetClockConfig+0x80>)
 8101b16:	681b      	ldr	r3, [r3, #0]
 8101b18:	f003 020f 	and.w	r2, r3, #15
 8101b1c:	683b      	ldr	r3, [r7, #0]
 8101b1e:	601a      	str	r2, [r3, #0]
}
 8101b20:	bf00      	nop
 8101b22:	370c      	adds	r7, #12
 8101b24:	46bd      	mov	sp, r7
 8101b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b2a:	4770      	bx	lr
 8101b2c:	58024400 	.word	0x58024400
 8101b30:	52002000 	.word	0x52002000

08101b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8101b34:	b580      	push	{r7, lr}
 8101b36:	b082      	sub	sp, #8
 8101b38:	af00      	add	r7, sp, #0
 8101b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8101b3c:	687b      	ldr	r3, [r7, #4]
 8101b3e:	2b00      	cmp	r3, #0
 8101b40:	d101      	bne.n	8101b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8101b42:	2301      	movs	r3, #1
 8101b44:	e049      	b.n	8101bda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8101b46:	687b      	ldr	r3, [r7, #4]
 8101b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101b4c:	b2db      	uxtb	r3, r3
 8101b4e:	2b00      	cmp	r3, #0
 8101b50:	d106      	bne.n	8101b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8101b52:	687b      	ldr	r3, [r7, #4]
 8101b54:	2200      	movs	r2, #0
 8101b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8101b5a:	6878      	ldr	r0, [r7, #4]
 8101b5c:	f7ff f92a 	bl	8100db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101b60:	687b      	ldr	r3, [r7, #4]
 8101b62:	2202      	movs	r2, #2
 8101b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8101b68:	687b      	ldr	r3, [r7, #4]
 8101b6a:	681a      	ldr	r2, [r3, #0]
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	3304      	adds	r3, #4
 8101b70:	4619      	mov	r1, r3
 8101b72:	4610      	mov	r0, r2
 8101b74:	f000 fa66 	bl	8102044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8101b78:	687b      	ldr	r3, [r7, #4]
 8101b7a:	2201      	movs	r2, #1
 8101b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101b80:	687b      	ldr	r3, [r7, #4]
 8101b82:	2201      	movs	r2, #1
 8101b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8101b88:	687b      	ldr	r3, [r7, #4]
 8101b8a:	2201      	movs	r2, #1
 8101b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101b90:	687b      	ldr	r3, [r7, #4]
 8101b92:	2201      	movs	r2, #1
 8101b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101b98:	687b      	ldr	r3, [r7, #4]
 8101b9a:	2201      	movs	r2, #1
 8101b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101ba0:	687b      	ldr	r3, [r7, #4]
 8101ba2:	2201      	movs	r2, #1
 8101ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101ba8:	687b      	ldr	r3, [r7, #4]
 8101baa:	2201      	movs	r2, #1
 8101bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101bb0:	687b      	ldr	r3, [r7, #4]
 8101bb2:	2201      	movs	r2, #1
 8101bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8101bb8:	687b      	ldr	r3, [r7, #4]
 8101bba:	2201      	movs	r2, #1
 8101bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8101bc0:	687b      	ldr	r3, [r7, #4]
 8101bc2:	2201      	movs	r2, #1
 8101bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8101bc8:	687b      	ldr	r3, [r7, #4]
 8101bca:	2201      	movs	r2, #1
 8101bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8101bd0:	687b      	ldr	r3, [r7, #4]
 8101bd2:	2201      	movs	r2, #1
 8101bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8101bd8:	2300      	movs	r3, #0
}
 8101bda:	4618      	mov	r0, r3
 8101bdc:	3708      	adds	r7, #8
 8101bde:	46bd      	mov	sp, r7
 8101be0:	bd80      	pop	{r7, pc}
	...

08101be4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8101be4:	b480      	push	{r7}
 8101be6:	b085      	sub	sp, #20
 8101be8:	af00      	add	r7, sp, #0
 8101bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101bf2:	b2db      	uxtb	r3, r3
 8101bf4:	2b01      	cmp	r3, #1
 8101bf6:	d001      	beq.n	8101bfc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8101bf8:	2301      	movs	r3, #1
 8101bfa:	e04c      	b.n	8101c96 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101bfc:	687b      	ldr	r3, [r7, #4]
 8101bfe:	2202      	movs	r2, #2
 8101c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8101c04:	687b      	ldr	r3, [r7, #4]
 8101c06:	681b      	ldr	r3, [r3, #0]
 8101c08:	4a26      	ldr	r2, [pc, #152]	; (8101ca4 <HAL_TIM_Base_Start+0xc0>)
 8101c0a:	4293      	cmp	r3, r2
 8101c0c:	d022      	beq.n	8101c54 <HAL_TIM_Base_Start+0x70>
 8101c0e:	687b      	ldr	r3, [r7, #4]
 8101c10:	681b      	ldr	r3, [r3, #0]
 8101c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101c16:	d01d      	beq.n	8101c54 <HAL_TIM_Base_Start+0x70>
 8101c18:	687b      	ldr	r3, [r7, #4]
 8101c1a:	681b      	ldr	r3, [r3, #0]
 8101c1c:	4a22      	ldr	r2, [pc, #136]	; (8101ca8 <HAL_TIM_Base_Start+0xc4>)
 8101c1e:	4293      	cmp	r3, r2
 8101c20:	d018      	beq.n	8101c54 <HAL_TIM_Base_Start+0x70>
 8101c22:	687b      	ldr	r3, [r7, #4]
 8101c24:	681b      	ldr	r3, [r3, #0]
 8101c26:	4a21      	ldr	r2, [pc, #132]	; (8101cac <HAL_TIM_Base_Start+0xc8>)
 8101c28:	4293      	cmp	r3, r2
 8101c2a:	d013      	beq.n	8101c54 <HAL_TIM_Base_Start+0x70>
 8101c2c:	687b      	ldr	r3, [r7, #4]
 8101c2e:	681b      	ldr	r3, [r3, #0]
 8101c30:	4a1f      	ldr	r2, [pc, #124]	; (8101cb0 <HAL_TIM_Base_Start+0xcc>)
 8101c32:	4293      	cmp	r3, r2
 8101c34:	d00e      	beq.n	8101c54 <HAL_TIM_Base_Start+0x70>
 8101c36:	687b      	ldr	r3, [r7, #4]
 8101c38:	681b      	ldr	r3, [r3, #0]
 8101c3a:	4a1e      	ldr	r2, [pc, #120]	; (8101cb4 <HAL_TIM_Base_Start+0xd0>)
 8101c3c:	4293      	cmp	r3, r2
 8101c3e:	d009      	beq.n	8101c54 <HAL_TIM_Base_Start+0x70>
 8101c40:	687b      	ldr	r3, [r7, #4]
 8101c42:	681b      	ldr	r3, [r3, #0]
 8101c44:	4a1c      	ldr	r2, [pc, #112]	; (8101cb8 <HAL_TIM_Base_Start+0xd4>)
 8101c46:	4293      	cmp	r3, r2
 8101c48:	d004      	beq.n	8101c54 <HAL_TIM_Base_Start+0x70>
 8101c4a:	687b      	ldr	r3, [r7, #4]
 8101c4c:	681b      	ldr	r3, [r3, #0]
 8101c4e:	4a1b      	ldr	r2, [pc, #108]	; (8101cbc <HAL_TIM_Base_Start+0xd8>)
 8101c50:	4293      	cmp	r3, r2
 8101c52:	d115      	bne.n	8101c80 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8101c54:	687b      	ldr	r3, [r7, #4]
 8101c56:	681b      	ldr	r3, [r3, #0]
 8101c58:	689a      	ldr	r2, [r3, #8]
 8101c5a:	4b19      	ldr	r3, [pc, #100]	; (8101cc0 <HAL_TIM_Base_Start+0xdc>)
 8101c5c:	4013      	ands	r3, r2
 8101c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101c60:	68fb      	ldr	r3, [r7, #12]
 8101c62:	2b06      	cmp	r3, #6
 8101c64:	d015      	beq.n	8101c92 <HAL_TIM_Base_Start+0xae>
 8101c66:	68fb      	ldr	r3, [r7, #12]
 8101c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101c6c:	d011      	beq.n	8101c92 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8101c6e:	687b      	ldr	r3, [r7, #4]
 8101c70:	681b      	ldr	r3, [r3, #0]
 8101c72:	681a      	ldr	r2, [r3, #0]
 8101c74:	687b      	ldr	r3, [r7, #4]
 8101c76:	681b      	ldr	r3, [r3, #0]
 8101c78:	f042 0201 	orr.w	r2, r2, #1
 8101c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101c7e:	e008      	b.n	8101c92 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8101c80:	687b      	ldr	r3, [r7, #4]
 8101c82:	681b      	ldr	r3, [r3, #0]
 8101c84:	681a      	ldr	r2, [r3, #0]
 8101c86:	687b      	ldr	r3, [r7, #4]
 8101c88:	681b      	ldr	r3, [r3, #0]
 8101c8a:	f042 0201 	orr.w	r2, r2, #1
 8101c8e:	601a      	str	r2, [r3, #0]
 8101c90:	e000      	b.n	8101c94 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101c92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8101c94:	2300      	movs	r3, #0
}
 8101c96:	4618      	mov	r0, r3
 8101c98:	3714      	adds	r7, #20
 8101c9a:	46bd      	mov	sp, r7
 8101c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ca0:	4770      	bx	lr
 8101ca2:	bf00      	nop
 8101ca4:	40010000 	.word	0x40010000
 8101ca8:	40000400 	.word	0x40000400
 8101cac:	40000800 	.word	0x40000800
 8101cb0:	40000c00 	.word	0x40000c00
 8101cb4:	40010400 	.word	0x40010400
 8101cb8:	40001800 	.word	0x40001800
 8101cbc:	40014000 	.word	0x40014000
 8101cc0:	00010007 	.word	0x00010007

08101cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8101cc4:	b480      	push	{r7}
 8101cc6:	b085      	sub	sp, #20
 8101cc8:	af00      	add	r7, sp, #0
 8101cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101cd2:	b2db      	uxtb	r3, r3
 8101cd4:	2b01      	cmp	r3, #1
 8101cd6:	d001      	beq.n	8101cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8101cd8:	2301      	movs	r3, #1
 8101cda:	e054      	b.n	8101d86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	2202      	movs	r2, #2
 8101ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8101ce4:	687b      	ldr	r3, [r7, #4]
 8101ce6:	681b      	ldr	r3, [r3, #0]
 8101ce8:	68da      	ldr	r2, [r3, #12]
 8101cea:	687b      	ldr	r3, [r7, #4]
 8101cec:	681b      	ldr	r3, [r3, #0]
 8101cee:	f042 0201 	orr.w	r2, r2, #1
 8101cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8101cf4:	687b      	ldr	r3, [r7, #4]
 8101cf6:	681b      	ldr	r3, [r3, #0]
 8101cf8:	4a26      	ldr	r2, [pc, #152]	; (8101d94 <HAL_TIM_Base_Start_IT+0xd0>)
 8101cfa:	4293      	cmp	r3, r2
 8101cfc:	d022      	beq.n	8101d44 <HAL_TIM_Base_Start_IT+0x80>
 8101cfe:	687b      	ldr	r3, [r7, #4]
 8101d00:	681b      	ldr	r3, [r3, #0]
 8101d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101d06:	d01d      	beq.n	8101d44 <HAL_TIM_Base_Start_IT+0x80>
 8101d08:	687b      	ldr	r3, [r7, #4]
 8101d0a:	681b      	ldr	r3, [r3, #0]
 8101d0c:	4a22      	ldr	r2, [pc, #136]	; (8101d98 <HAL_TIM_Base_Start_IT+0xd4>)
 8101d0e:	4293      	cmp	r3, r2
 8101d10:	d018      	beq.n	8101d44 <HAL_TIM_Base_Start_IT+0x80>
 8101d12:	687b      	ldr	r3, [r7, #4]
 8101d14:	681b      	ldr	r3, [r3, #0]
 8101d16:	4a21      	ldr	r2, [pc, #132]	; (8101d9c <HAL_TIM_Base_Start_IT+0xd8>)
 8101d18:	4293      	cmp	r3, r2
 8101d1a:	d013      	beq.n	8101d44 <HAL_TIM_Base_Start_IT+0x80>
 8101d1c:	687b      	ldr	r3, [r7, #4]
 8101d1e:	681b      	ldr	r3, [r3, #0]
 8101d20:	4a1f      	ldr	r2, [pc, #124]	; (8101da0 <HAL_TIM_Base_Start_IT+0xdc>)
 8101d22:	4293      	cmp	r3, r2
 8101d24:	d00e      	beq.n	8101d44 <HAL_TIM_Base_Start_IT+0x80>
 8101d26:	687b      	ldr	r3, [r7, #4]
 8101d28:	681b      	ldr	r3, [r3, #0]
 8101d2a:	4a1e      	ldr	r2, [pc, #120]	; (8101da4 <HAL_TIM_Base_Start_IT+0xe0>)
 8101d2c:	4293      	cmp	r3, r2
 8101d2e:	d009      	beq.n	8101d44 <HAL_TIM_Base_Start_IT+0x80>
 8101d30:	687b      	ldr	r3, [r7, #4]
 8101d32:	681b      	ldr	r3, [r3, #0]
 8101d34:	4a1c      	ldr	r2, [pc, #112]	; (8101da8 <HAL_TIM_Base_Start_IT+0xe4>)
 8101d36:	4293      	cmp	r3, r2
 8101d38:	d004      	beq.n	8101d44 <HAL_TIM_Base_Start_IT+0x80>
 8101d3a:	687b      	ldr	r3, [r7, #4]
 8101d3c:	681b      	ldr	r3, [r3, #0]
 8101d3e:	4a1b      	ldr	r2, [pc, #108]	; (8101dac <HAL_TIM_Base_Start_IT+0xe8>)
 8101d40:	4293      	cmp	r3, r2
 8101d42:	d115      	bne.n	8101d70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8101d44:	687b      	ldr	r3, [r7, #4]
 8101d46:	681b      	ldr	r3, [r3, #0]
 8101d48:	689a      	ldr	r2, [r3, #8]
 8101d4a:	4b19      	ldr	r3, [pc, #100]	; (8101db0 <HAL_TIM_Base_Start_IT+0xec>)
 8101d4c:	4013      	ands	r3, r2
 8101d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101d50:	68fb      	ldr	r3, [r7, #12]
 8101d52:	2b06      	cmp	r3, #6
 8101d54:	d015      	beq.n	8101d82 <HAL_TIM_Base_Start_IT+0xbe>
 8101d56:	68fb      	ldr	r3, [r7, #12]
 8101d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101d5c:	d011      	beq.n	8101d82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8101d5e:	687b      	ldr	r3, [r7, #4]
 8101d60:	681b      	ldr	r3, [r3, #0]
 8101d62:	681a      	ldr	r2, [r3, #0]
 8101d64:	687b      	ldr	r3, [r7, #4]
 8101d66:	681b      	ldr	r3, [r3, #0]
 8101d68:	f042 0201 	orr.w	r2, r2, #1
 8101d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101d6e:	e008      	b.n	8101d82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8101d70:	687b      	ldr	r3, [r7, #4]
 8101d72:	681b      	ldr	r3, [r3, #0]
 8101d74:	681a      	ldr	r2, [r3, #0]
 8101d76:	687b      	ldr	r3, [r7, #4]
 8101d78:	681b      	ldr	r3, [r3, #0]
 8101d7a:	f042 0201 	orr.w	r2, r2, #1
 8101d7e:	601a      	str	r2, [r3, #0]
 8101d80:	e000      	b.n	8101d84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101d82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8101d84:	2300      	movs	r3, #0
}
 8101d86:	4618      	mov	r0, r3
 8101d88:	3714      	adds	r7, #20
 8101d8a:	46bd      	mov	sp, r7
 8101d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d90:	4770      	bx	lr
 8101d92:	bf00      	nop
 8101d94:	40010000 	.word	0x40010000
 8101d98:	40000400 	.word	0x40000400
 8101d9c:	40000800 	.word	0x40000800
 8101da0:	40000c00 	.word	0x40000c00
 8101da4:	40010400 	.word	0x40010400
 8101da8:	40001800 	.word	0x40001800
 8101dac:	40014000 	.word	0x40014000
 8101db0:	00010007 	.word	0x00010007

08101db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8101db4:	b580      	push	{r7, lr}
 8101db6:	b082      	sub	sp, #8
 8101db8:	af00      	add	r7, sp, #0
 8101dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8101dbc:	687b      	ldr	r3, [r7, #4]
 8101dbe:	681b      	ldr	r3, [r3, #0]
 8101dc0:	691b      	ldr	r3, [r3, #16]
 8101dc2:	f003 0302 	and.w	r3, r3, #2
 8101dc6:	2b02      	cmp	r3, #2
 8101dc8:	d122      	bne.n	8101e10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8101dca:	687b      	ldr	r3, [r7, #4]
 8101dcc:	681b      	ldr	r3, [r3, #0]
 8101dce:	68db      	ldr	r3, [r3, #12]
 8101dd0:	f003 0302 	and.w	r3, r3, #2
 8101dd4:	2b02      	cmp	r3, #2
 8101dd6:	d11b      	bne.n	8101e10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8101dd8:	687b      	ldr	r3, [r7, #4]
 8101dda:	681b      	ldr	r3, [r3, #0]
 8101ddc:	f06f 0202 	mvn.w	r2, #2
 8101de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8101de2:	687b      	ldr	r3, [r7, #4]
 8101de4:	2201      	movs	r2, #1
 8101de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8101de8:	687b      	ldr	r3, [r7, #4]
 8101dea:	681b      	ldr	r3, [r3, #0]
 8101dec:	699b      	ldr	r3, [r3, #24]
 8101dee:	f003 0303 	and.w	r3, r3, #3
 8101df2:	2b00      	cmp	r3, #0
 8101df4:	d003      	beq.n	8101dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8101df6:	6878      	ldr	r0, [r7, #4]
 8101df8:	f000 f905 	bl	8102006 <HAL_TIM_IC_CaptureCallback>
 8101dfc:	e005      	b.n	8101e0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8101dfe:	6878      	ldr	r0, [r7, #4]
 8101e00:	f000 f8f7 	bl	8101ff2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101e04:	6878      	ldr	r0, [r7, #4]
 8101e06:	f000 f908 	bl	810201a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101e0a:	687b      	ldr	r3, [r7, #4]
 8101e0c:	2200      	movs	r2, #0
 8101e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8101e10:	687b      	ldr	r3, [r7, #4]
 8101e12:	681b      	ldr	r3, [r3, #0]
 8101e14:	691b      	ldr	r3, [r3, #16]
 8101e16:	f003 0304 	and.w	r3, r3, #4
 8101e1a:	2b04      	cmp	r3, #4
 8101e1c:	d122      	bne.n	8101e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8101e1e:	687b      	ldr	r3, [r7, #4]
 8101e20:	681b      	ldr	r3, [r3, #0]
 8101e22:	68db      	ldr	r3, [r3, #12]
 8101e24:	f003 0304 	and.w	r3, r3, #4
 8101e28:	2b04      	cmp	r3, #4
 8101e2a:	d11b      	bne.n	8101e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8101e2c:	687b      	ldr	r3, [r7, #4]
 8101e2e:	681b      	ldr	r3, [r3, #0]
 8101e30:	f06f 0204 	mvn.w	r2, #4
 8101e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8101e36:	687b      	ldr	r3, [r7, #4]
 8101e38:	2202      	movs	r2, #2
 8101e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8101e3c:	687b      	ldr	r3, [r7, #4]
 8101e3e:	681b      	ldr	r3, [r3, #0]
 8101e40:	699b      	ldr	r3, [r3, #24]
 8101e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101e46:	2b00      	cmp	r3, #0
 8101e48:	d003      	beq.n	8101e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101e4a:	6878      	ldr	r0, [r7, #4]
 8101e4c:	f000 f8db 	bl	8102006 <HAL_TIM_IC_CaptureCallback>
 8101e50:	e005      	b.n	8101e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101e52:	6878      	ldr	r0, [r7, #4]
 8101e54:	f000 f8cd 	bl	8101ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101e58:	6878      	ldr	r0, [r7, #4]
 8101e5a:	f000 f8de 	bl	810201a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101e5e:	687b      	ldr	r3, [r7, #4]
 8101e60:	2200      	movs	r2, #0
 8101e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8101e64:	687b      	ldr	r3, [r7, #4]
 8101e66:	681b      	ldr	r3, [r3, #0]
 8101e68:	691b      	ldr	r3, [r3, #16]
 8101e6a:	f003 0308 	and.w	r3, r3, #8
 8101e6e:	2b08      	cmp	r3, #8
 8101e70:	d122      	bne.n	8101eb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8101e72:	687b      	ldr	r3, [r7, #4]
 8101e74:	681b      	ldr	r3, [r3, #0]
 8101e76:	68db      	ldr	r3, [r3, #12]
 8101e78:	f003 0308 	and.w	r3, r3, #8
 8101e7c:	2b08      	cmp	r3, #8
 8101e7e:	d11b      	bne.n	8101eb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8101e80:	687b      	ldr	r3, [r7, #4]
 8101e82:	681b      	ldr	r3, [r3, #0]
 8101e84:	f06f 0208 	mvn.w	r2, #8
 8101e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8101e8a:	687b      	ldr	r3, [r7, #4]
 8101e8c:	2204      	movs	r2, #4
 8101e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8101e90:	687b      	ldr	r3, [r7, #4]
 8101e92:	681b      	ldr	r3, [r3, #0]
 8101e94:	69db      	ldr	r3, [r3, #28]
 8101e96:	f003 0303 	and.w	r3, r3, #3
 8101e9a:	2b00      	cmp	r3, #0
 8101e9c:	d003      	beq.n	8101ea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101e9e:	6878      	ldr	r0, [r7, #4]
 8101ea0:	f000 f8b1 	bl	8102006 <HAL_TIM_IC_CaptureCallback>
 8101ea4:	e005      	b.n	8101eb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101ea6:	6878      	ldr	r0, [r7, #4]
 8101ea8:	f000 f8a3 	bl	8101ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101eac:	6878      	ldr	r0, [r7, #4]
 8101eae:	f000 f8b4 	bl	810201a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	2200      	movs	r2, #0
 8101eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8101eb8:	687b      	ldr	r3, [r7, #4]
 8101eba:	681b      	ldr	r3, [r3, #0]
 8101ebc:	691b      	ldr	r3, [r3, #16]
 8101ebe:	f003 0310 	and.w	r3, r3, #16
 8101ec2:	2b10      	cmp	r3, #16
 8101ec4:	d122      	bne.n	8101f0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8101ec6:	687b      	ldr	r3, [r7, #4]
 8101ec8:	681b      	ldr	r3, [r3, #0]
 8101eca:	68db      	ldr	r3, [r3, #12]
 8101ecc:	f003 0310 	and.w	r3, r3, #16
 8101ed0:	2b10      	cmp	r3, #16
 8101ed2:	d11b      	bne.n	8101f0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	681b      	ldr	r3, [r3, #0]
 8101ed8:	f06f 0210 	mvn.w	r2, #16
 8101edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	2208      	movs	r2, #8
 8101ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8101ee4:	687b      	ldr	r3, [r7, #4]
 8101ee6:	681b      	ldr	r3, [r3, #0]
 8101ee8:	69db      	ldr	r3, [r3, #28]
 8101eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101eee:	2b00      	cmp	r3, #0
 8101ef0:	d003      	beq.n	8101efa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101ef2:	6878      	ldr	r0, [r7, #4]
 8101ef4:	f000 f887 	bl	8102006 <HAL_TIM_IC_CaptureCallback>
 8101ef8:	e005      	b.n	8101f06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101efa:	6878      	ldr	r0, [r7, #4]
 8101efc:	f000 f879 	bl	8101ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101f00:	6878      	ldr	r0, [r7, #4]
 8101f02:	f000 f88a 	bl	810201a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101f06:	687b      	ldr	r3, [r7, #4]
 8101f08:	2200      	movs	r2, #0
 8101f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8101f0c:	687b      	ldr	r3, [r7, #4]
 8101f0e:	681b      	ldr	r3, [r3, #0]
 8101f10:	691b      	ldr	r3, [r3, #16]
 8101f12:	f003 0301 	and.w	r3, r3, #1
 8101f16:	2b01      	cmp	r3, #1
 8101f18:	d10e      	bne.n	8101f38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8101f1a:	687b      	ldr	r3, [r7, #4]
 8101f1c:	681b      	ldr	r3, [r3, #0]
 8101f1e:	68db      	ldr	r3, [r3, #12]
 8101f20:	f003 0301 	and.w	r3, r3, #1
 8101f24:	2b01      	cmp	r3, #1
 8101f26:	d107      	bne.n	8101f38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8101f28:	687b      	ldr	r3, [r7, #4]
 8101f2a:	681b      	ldr	r3, [r3, #0]
 8101f2c:	f06f 0201 	mvn.w	r2, #1
 8101f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8101f32:	6878      	ldr	r0, [r7, #4]
 8101f34:	f7fe ff08 	bl	8100d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8101f38:	687b      	ldr	r3, [r7, #4]
 8101f3a:	681b      	ldr	r3, [r3, #0]
 8101f3c:	691b      	ldr	r3, [r3, #16]
 8101f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101f42:	2b80      	cmp	r3, #128	; 0x80
 8101f44:	d10e      	bne.n	8101f64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8101f46:	687b      	ldr	r3, [r7, #4]
 8101f48:	681b      	ldr	r3, [r3, #0]
 8101f4a:	68db      	ldr	r3, [r3, #12]
 8101f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101f50:	2b80      	cmp	r3, #128	; 0x80
 8101f52:	d107      	bne.n	8101f64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	681b      	ldr	r3, [r3, #0]
 8101f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8101f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8101f5e:	6878      	ldr	r0, [r7, #4]
 8101f60:	f000 f914 	bl	810218c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8101f64:	687b      	ldr	r3, [r7, #4]
 8101f66:	681b      	ldr	r3, [r3, #0]
 8101f68:	691b      	ldr	r3, [r3, #16]
 8101f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101f72:	d10e      	bne.n	8101f92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8101f74:	687b      	ldr	r3, [r7, #4]
 8101f76:	681b      	ldr	r3, [r3, #0]
 8101f78:	68db      	ldr	r3, [r3, #12]
 8101f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101f7e:	2b80      	cmp	r3, #128	; 0x80
 8101f80:	d107      	bne.n	8101f92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8101f82:	687b      	ldr	r3, [r7, #4]
 8101f84:	681b      	ldr	r3, [r3, #0]
 8101f86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8101f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8101f8c:	6878      	ldr	r0, [r7, #4]
 8101f8e:	f000 f907 	bl	81021a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8101f92:	687b      	ldr	r3, [r7, #4]
 8101f94:	681b      	ldr	r3, [r3, #0]
 8101f96:	691b      	ldr	r3, [r3, #16]
 8101f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101f9c:	2b40      	cmp	r3, #64	; 0x40
 8101f9e:	d10e      	bne.n	8101fbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8101fa0:	687b      	ldr	r3, [r7, #4]
 8101fa2:	681b      	ldr	r3, [r3, #0]
 8101fa4:	68db      	ldr	r3, [r3, #12]
 8101fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101faa:	2b40      	cmp	r3, #64	; 0x40
 8101fac:	d107      	bne.n	8101fbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8101fae:	687b      	ldr	r3, [r7, #4]
 8101fb0:	681b      	ldr	r3, [r3, #0]
 8101fb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8101fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8101fb8:	6878      	ldr	r0, [r7, #4]
 8101fba:	f000 f838 	bl	810202e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8101fbe:	687b      	ldr	r3, [r7, #4]
 8101fc0:	681b      	ldr	r3, [r3, #0]
 8101fc2:	691b      	ldr	r3, [r3, #16]
 8101fc4:	f003 0320 	and.w	r3, r3, #32
 8101fc8:	2b20      	cmp	r3, #32
 8101fca:	d10e      	bne.n	8101fea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8101fcc:	687b      	ldr	r3, [r7, #4]
 8101fce:	681b      	ldr	r3, [r3, #0]
 8101fd0:	68db      	ldr	r3, [r3, #12]
 8101fd2:	f003 0320 	and.w	r3, r3, #32
 8101fd6:	2b20      	cmp	r3, #32
 8101fd8:	d107      	bne.n	8101fea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	681b      	ldr	r3, [r3, #0]
 8101fde:	f06f 0220 	mvn.w	r2, #32
 8101fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8101fe4:	6878      	ldr	r0, [r7, #4]
 8101fe6:	f000 f8c7 	bl	8102178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8101fea:	bf00      	nop
 8101fec:	3708      	adds	r7, #8
 8101fee:	46bd      	mov	sp, r7
 8101ff0:	bd80      	pop	{r7, pc}

08101ff2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101ff2:	b480      	push	{r7}
 8101ff4:	b083      	sub	sp, #12
 8101ff6:	af00      	add	r7, sp, #0
 8101ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8101ffa:	bf00      	nop
 8101ffc:	370c      	adds	r7, #12
 8101ffe:	46bd      	mov	sp, r7
 8102000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102004:	4770      	bx	lr

08102006 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8102006:	b480      	push	{r7}
 8102008:	b083      	sub	sp, #12
 810200a:	af00      	add	r7, sp, #0
 810200c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810200e:	bf00      	nop
 8102010:	370c      	adds	r7, #12
 8102012:	46bd      	mov	sp, r7
 8102014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102018:	4770      	bx	lr

0810201a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810201a:	b480      	push	{r7}
 810201c:	b083      	sub	sp, #12
 810201e:	af00      	add	r7, sp, #0
 8102020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8102022:	bf00      	nop
 8102024:	370c      	adds	r7, #12
 8102026:	46bd      	mov	sp, r7
 8102028:	f85d 7b04 	ldr.w	r7, [sp], #4
 810202c:	4770      	bx	lr

0810202e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810202e:	b480      	push	{r7}
 8102030:	b083      	sub	sp, #12
 8102032:	af00      	add	r7, sp, #0
 8102034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8102036:	bf00      	nop
 8102038:	370c      	adds	r7, #12
 810203a:	46bd      	mov	sp, r7
 810203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102040:	4770      	bx	lr
	...

08102044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8102044:	b480      	push	{r7}
 8102046:	b085      	sub	sp, #20
 8102048:	af00      	add	r7, sp, #0
 810204a:	6078      	str	r0, [r7, #4]
 810204c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	681b      	ldr	r3, [r3, #0]
 8102052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8102054:	687b      	ldr	r3, [r7, #4]
 8102056:	4a40      	ldr	r2, [pc, #256]	; (8102158 <TIM_Base_SetConfig+0x114>)
 8102058:	4293      	cmp	r3, r2
 810205a:	d013      	beq.n	8102084 <TIM_Base_SetConfig+0x40>
 810205c:	687b      	ldr	r3, [r7, #4]
 810205e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102062:	d00f      	beq.n	8102084 <TIM_Base_SetConfig+0x40>
 8102064:	687b      	ldr	r3, [r7, #4]
 8102066:	4a3d      	ldr	r2, [pc, #244]	; (810215c <TIM_Base_SetConfig+0x118>)
 8102068:	4293      	cmp	r3, r2
 810206a:	d00b      	beq.n	8102084 <TIM_Base_SetConfig+0x40>
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	4a3c      	ldr	r2, [pc, #240]	; (8102160 <TIM_Base_SetConfig+0x11c>)
 8102070:	4293      	cmp	r3, r2
 8102072:	d007      	beq.n	8102084 <TIM_Base_SetConfig+0x40>
 8102074:	687b      	ldr	r3, [r7, #4]
 8102076:	4a3b      	ldr	r2, [pc, #236]	; (8102164 <TIM_Base_SetConfig+0x120>)
 8102078:	4293      	cmp	r3, r2
 810207a:	d003      	beq.n	8102084 <TIM_Base_SetConfig+0x40>
 810207c:	687b      	ldr	r3, [r7, #4]
 810207e:	4a3a      	ldr	r2, [pc, #232]	; (8102168 <TIM_Base_SetConfig+0x124>)
 8102080:	4293      	cmp	r3, r2
 8102082:	d108      	bne.n	8102096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8102084:	68fb      	ldr	r3, [r7, #12]
 8102086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810208a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810208c:	683b      	ldr	r3, [r7, #0]
 810208e:	685b      	ldr	r3, [r3, #4]
 8102090:	68fa      	ldr	r2, [r7, #12]
 8102092:	4313      	orrs	r3, r2
 8102094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	4a2f      	ldr	r2, [pc, #188]	; (8102158 <TIM_Base_SetConfig+0x114>)
 810209a:	4293      	cmp	r3, r2
 810209c:	d01f      	beq.n	81020de <TIM_Base_SetConfig+0x9a>
 810209e:	687b      	ldr	r3, [r7, #4]
 81020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81020a4:	d01b      	beq.n	81020de <TIM_Base_SetConfig+0x9a>
 81020a6:	687b      	ldr	r3, [r7, #4]
 81020a8:	4a2c      	ldr	r2, [pc, #176]	; (810215c <TIM_Base_SetConfig+0x118>)
 81020aa:	4293      	cmp	r3, r2
 81020ac:	d017      	beq.n	81020de <TIM_Base_SetConfig+0x9a>
 81020ae:	687b      	ldr	r3, [r7, #4]
 81020b0:	4a2b      	ldr	r2, [pc, #172]	; (8102160 <TIM_Base_SetConfig+0x11c>)
 81020b2:	4293      	cmp	r3, r2
 81020b4:	d013      	beq.n	81020de <TIM_Base_SetConfig+0x9a>
 81020b6:	687b      	ldr	r3, [r7, #4]
 81020b8:	4a2a      	ldr	r2, [pc, #168]	; (8102164 <TIM_Base_SetConfig+0x120>)
 81020ba:	4293      	cmp	r3, r2
 81020bc:	d00f      	beq.n	81020de <TIM_Base_SetConfig+0x9a>
 81020be:	687b      	ldr	r3, [r7, #4]
 81020c0:	4a29      	ldr	r2, [pc, #164]	; (8102168 <TIM_Base_SetConfig+0x124>)
 81020c2:	4293      	cmp	r3, r2
 81020c4:	d00b      	beq.n	81020de <TIM_Base_SetConfig+0x9a>
 81020c6:	687b      	ldr	r3, [r7, #4]
 81020c8:	4a28      	ldr	r2, [pc, #160]	; (810216c <TIM_Base_SetConfig+0x128>)
 81020ca:	4293      	cmp	r3, r2
 81020cc:	d007      	beq.n	81020de <TIM_Base_SetConfig+0x9a>
 81020ce:	687b      	ldr	r3, [r7, #4]
 81020d0:	4a27      	ldr	r2, [pc, #156]	; (8102170 <TIM_Base_SetConfig+0x12c>)
 81020d2:	4293      	cmp	r3, r2
 81020d4:	d003      	beq.n	81020de <TIM_Base_SetConfig+0x9a>
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	4a26      	ldr	r2, [pc, #152]	; (8102174 <TIM_Base_SetConfig+0x130>)
 81020da:	4293      	cmp	r3, r2
 81020dc:	d108      	bne.n	81020f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81020de:	68fb      	ldr	r3, [r7, #12]
 81020e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81020e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81020e6:	683b      	ldr	r3, [r7, #0]
 81020e8:	68db      	ldr	r3, [r3, #12]
 81020ea:	68fa      	ldr	r2, [r7, #12]
 81020ec:	4313      	orrs	r3, r2
 81020ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81020f0:	68fb      	ldr	r3, [r7, #12]
 81020f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81020f6:	683b      	ldr	r3, [r7, #0]
 81020f8:	695b      	ldr	r3, [r3, #20]
 81020fa:	4313      	orrs	r3, r2
 81020fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81020fe:	687b      	ldr	r3, [r7, #4]
 8102100:	68fa      	ldr	r2, [r7, #12]
 8102102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8102104:	683b      	ldr	r3, [r7, #0]
 8102106:	689a      	ldr	r2, [r3, #8]
 8102108:	687b      	ldr	r3, [r7, #4]
 810210a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810210c:	683b      	ldr	r3, [r7, #0]
 810210e:	681a      	ldr	r2, [r3, #0]
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8102114:	687b      	ldr	r3, [r7, #4]
 8102116:	4a10      	ldr	r2, [pc, #64]	; (8102158 <TIM_Base_SetConfig+0x114>)
 8102118:	4293      	cmp	r3, r2
 810211a:	d00f      	beq.n	810213c <TIM_Base_SetConfig+0xf8>
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	4a12      	ldr	r2, [pc, #72]	; (8102168 <TIM_Base_SetConfig+0x124>)
 8102120:	4293      	cmp	r3, r2
 8102122:	d00b      	beq.n	810213c <TIM_Base_SetConfig+0xf8>
 8102124:	687b      	ldr	r3, [r7, #4]
 8102126:	4a11      	ldr	r2, [pc, #68]	; (810216c <TIM_Base_SetConfig+0x128>)
 8102128:	4293      	cmp	r3, r2
 810212a:	d007      	beq.n	810213c <TIM_Base_SetConfig+0xf8>
 810212c:	687b      	ldr	r3, [r7, #4]
 810212e:	4a10      	ldr	r2, [pc, #64]	; (8102170 <TIM_Base_SetConfig+0x12c>)
 8102130:	4293      	cmp	r3, r2
 8102132:	d003      	beq.n	810213c <TIM_Base_SetConfig+0xf8>
 8102134:	687b      	ldr	r3, [r7, #4]
 8102136:	4a0f      	ldr	r2, [pc, #60]	; (8102174 <TIM_Base_SetConfig+0x130>)
 8102138:	4293      	cmp	r3, r2
 810213a:	d103      	bne.n	8102144 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810213c:	683b      	ldr	r3, [r7, #0]
 810213e:	691a      	ldr	r2, [r3, #16]
 8102140:	687b      	ldr	r3, [r7, #4]
 8102142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8102144:	687b      	ldr	r3, [r7, #4]
 8102146:	2201      	movs	r2, #1
 8102148:	615a      	str	r2, [r3, #20]
}
 810214a:	bf00      	nop
 810214c:	3714      	adds	r7, #20
 810214e:	46bd      	mov	sp, r7
 8102150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102154:	4770      	bx	lr
 8102156:	bf00      	nop
 8102158:	40010000 	.word	0x40010000
 810215c:	40000400 	.word	0x40000400
 8102160:	40000800 	.word	0x40000800
 8102164:	40000c00 	.word	0x40000c00
 8102168:	40010400 	.word	0x40010400
 810216c:	40014000 	.word	0x40014000
 8102170:	40014400 	.word	0x40014400
 8102174:	40014800 	.word	0x40014800

08102178 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8102178:	b480      	push	{r7}
 810217a:	b083      	sub	sp, #12
 810217c:	af00      	add	r7, sp, #0
 810217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8102180:	bf00      	nop
 8102182:	370c      	adds	r7, #12
 8102184:	46bd      	mov	sp, r7
 8102186:	f85d 7b04 	ldr.w	r7, [sp], #4
 810218a:	4770      	bx	lr

0810218c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810218c:	b480      	push	{r7}
 810218e:	b083      	sub	sp, #12
 8102190:	af00      	add	r7, sp, #0
 8102192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8102194:	bf00      	nop
 8102196:	370c      	adds	r7, #12
 8102198:	46bd      	mov	sp, r7
 810219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810219e:	4770      	bx	lr

081021a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81021a0:	b480      	push	{r7}
 81021a2:	b083      	sub	sp, #12
 81021a4:	af00      	add	r7, sp, #0
 81021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81021a8:	bf00      	nop
 81021aa:	370c      	adds	r7, #12
 81021ac:	46bd      	mov	sp, r7
 81021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021b2:	4770      	bx	lr

081021b4 <__NVIC_SetPriority>:
{
 81021b4:	b480      	push	{r7}
 81021b6:	b083      	sub	sp, #12
 81021b8:	af00      	add	r7, sp, #0
 81021ba:	4603      	mov	r3, r0
 81021bc:	6039      	str	r1, [r7, #0]
 81021be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81021c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81021c4:	2b00      	cmp	r3, #0
 81021c6:	db0a      	blt.n	81021de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81021c8:	683b      	ldr	r3, [r7, #0]
 81021ca:	b2da      	uxtb	r2, r3
 81021cc:	490c      	ldr	r1, [pc, #48]	; (8102200 <__NVIC_SetPriority+0x4c>)
 81021ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81021d2:	0112      	lsls	r2, r2, #4
 81021d4:	b2d2      	uxtb	r2, r2
 81021d6:	440b      	add	r3, r1
 81021d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 81021dc:	e00a      	b.n	81021f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81021de:	683b      	ldr	r3, [r7, #0]
 81021e0:	b2da      	uxtb	r2, r3
 81021e2:	4908      	ldr	r1, [pc, #32]	; (8102204 <__NVIC_SetPriority+0x50>)
 81021e4:	88fb      	ldrh	r3, [r7, #6]
 81021e6:	f003 030f 	and.w	r3, r3, #15
 81021ea:	3b04      	subs	r3, #4
 81021ec:	0112      	lsls	r2, r2, #4
 81021ee:	b2d2      	uxtb	r2, r2
 81021f0:	440b      	add	r3, r1
 81021f2:	761a      	strb	r2, [r3, #24]
}
 81021f4:	bf00      	nop
 81021f6:	370c      	adds	r7, #12
 81021f8:	46bd      	mov	sp, r7
 81021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021fe:	4770      	bx	lr
 8102200:	e000e100 	.word	0xe000e100
 8102204:	e000ed00 	.word	0xe000ed00

08102208 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8102208:	b580      	push	{r7, lr}
 810220a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 810220c:	4b05      	ldr	r3, [pc, #20]	; (8102224 <SysTick_Handler+0x1c>)
 810220e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8102210:	f002 fd62 	bl	8104cd8 <xTaskGetSchedulerState>
 8102214:	4603      	mov	r3, r0
 8102216:	2b01      	cmp	r3, #1
 8102218:	d001      	beq.n	810221e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810221a:	f000 fe1d 	bl	8102e58 <xPortSysTickHandler>
  }
}
 810221e:	bf00      	nop
 8102220:	bd80      	pop	{r7, pc}
 8102222:	bf00      	nop
 8102224:	e000e010 	.word	0xe000e010

08102228 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8102228:	b580      	push	{r7, lr}
 810222a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810222c:	2100      	movs	r1, #0
 810222e:	f06f 0004 	mvn.w	r0, #4
 8102232:	f7ff ffbf 	bl	81021b4 <__NVIC_SetPriority>
#endif
}
 8102236:	bf00      	nop
 8102238:	bd80      	pop	{r7, pc}
	...

0810223c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810223c:	b480      	push	{r7}
 810223e:	b083      	sub	sp, #12
 8102240:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8102242:	f3ef 8305 	mrs	r3, IPSR
 8102246:	603b      	str	r3, [r7, #0]
  return(result);
 8102248:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810224a:	2b00      	cmp	r3, #0
 810224c:	d003      	beq.n	8102256 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810224e:	f06f 0305 	mvn.w	r3, #5
 8102252:	607b      	str	r3, [r7, #4]
 8102254:	e00c      	b.n	8102270 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8102256:	4b0a      	ldr	r3, [pc, #40]	; (8102280 <osKernelInitialize+0x44>)
 8102258:	681b      	ldr	r3, [r3, #0]
 810225a:	2b00      	cmp	r3, #0
 810225c:	d105      	bne.n	810226a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810225e:	4b08      	ldr	r3, [pc, #32]	; (8102280 <osKernelInitialize+0x44>)
 8102260:	2201      	movs	r2, #1
 8102262:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8102264:	2300      	movs	r3, #0
 8102266:	607b      	str	r3, [r7, #4]
 8102268:	e002      	b.n	8102270 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810226a:	f04f 33ff 	mov.w	r3, #4294967295
 810226e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8102270:	687b      	ldr	r3, [r7, #4]
}
 8102272:	4618      	mov	r0, r3
 8102274:	370c      	adds	r7, #12
 8102276:	46bd      	mov	sp, r7
 8102278:	f85d 7b04 	ldr.w	r7, [sp], #4
 810227c:	4770      	bx	lr
 810227e:	bf00      	nop
 8102280:	10000134 	.word	0x10000134

08102284 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8102284:	b580      	push	{r7, lr}
 8102286:	b082      	sub	sp, #8
 8102288:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810228a:	f3ef 8305 	mrs	r3, IPSR
 810228e:	603b      	str	r3, [r7, #0]
  return(result);
 8102290:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8102292:	2b00      	cmp	r3, #0
 8102294:	d003      	beq.n	810229e <osKernelStart+0x1a>
    stat = osErrorISR;
 8102296:	f06f 0305 	mvn.w	r3, #5
 810229a:	607b      	str	r3, [r7, #4]
 810229c:	e010      	b.n	81022c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810229e:	4b0b      	ldr	r3, [pc, #44]	; (81022cc <osKernelStart+0x48>)
 81022a0:	681b      	ldr	r3, [r3, #0]
 81022a2:	2b01      	cmp	r3, #1
 81022a4:	d109      	bne.n	81022ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 81022a6:	f7ff ffbf 	bl	8102228 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 81022aa:	4b08      	ldr	r3, [pc, #32]	; (81022cc <osKernelStart+0x48>)
 81022ac:	2202      	movs	r2, #2
 81022ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 81022b0:	f002 f880 	bl	81043b4 <vTaskStartScheduler>
      stat = osOK;
 81022b4:	2300      	movs	r3, #0
 81022b6:	607b      	str	r3, [r7, #4]
 81022b8:	e002      	b.n	81022c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 81022ba:	f04f 33ff 	mov.w	r3, #4294967295
 81022be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 81022c0:	687b      	ldr	r3, [r7, #4]
}
 81022c2:	4618      	mov	r0, r3
 81022c4:	3708      	adds	r7, #8
 81022c6:	46bd      	mov	sp, r7
 81022c8:	bd80      	pop	{r7, pc}
 81022ca:	bf00      	nop
 81022cc:	10000134 	.word	0x10000134

081022d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81022d0:	b580      	push	{r7, lr}
 81022d2:	b08e      	sub	sp, #56	; 0x38
 81022d4:	af04      	add	r7, sp, #16
 81022d6:	60f8      	str	r0, [r7, #12]
 81022d8:	60b9      	str	r1, [r7, #8]
 81022da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81022dc:	2300      	movs	r3, #0
 81022de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81022e0:	f3ef 8305 	mrs	r3, IPSR
 81022e4:	617b      	str	r3, [r7, #20]
  return(result);
 81022e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 81022e8:	2b00      	cmp	r3, #0
 81022ea:	d17e      	bne.n	81023ea <osThreadNew+0x11a>
 81022ec:	68fb      	ldr	r3, [r7, #12]
 81022ee:	2b00      	cmp	r3, #0
 81022f0:	d07b      	beq.n	81023ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 81022f2:	2380      	movs	r3, #128	; 0x80
 81022f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 81022f6:	2318      	movs	r3, #24
 81022f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 81022fa:	2300      	movs	r3, #0
 81022fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 81022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8102302:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8102304:	687b      	ldr	r3, [r7, #4]
 8102306:	2b00      	cmp	r3, #0
 8102308:	d045      	beq.n	8102396 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810230a:	687b      	ldr	r3, [r7, #4]
 810230c:	681b      	ldr	r3, [r3, #0]
 810230e:	2b00      	cmp	r3, #0
 8102310:	d002      	beq.n	8102318 <osThreadNew+0x48>
        name = attr->name;
 8102312:	687b      	ldr	r3, [r7, #4]
 8102314:	681b      	ldr	r3, [r3, #0]
 8102316:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8102318:	687b      	ldr	r3, [r7, #4]
 810231a:	699b      	ldr	r3, [r3, #24]
 810231c:	2b00      	cmp	r3, #0
 810231e:	d002      	beq.n	8102326 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	699b      	ldr	r3, [r3, #24]
 8102324:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8102326:	69fb      	ldr	r3, [r7, #28]
 8102328:	2b00      	cmp	r3, #0
 810232a:	d008      	beq.n	810233e <osThreadNew+0x6e>
 810232c:	69fb      	ldr	r3, [r7, #28]
 810232e:	2b38      	cmp	r3, #56	; 0x38
 8102330:	d805      	bhi.n	810233e <osThreadNew+0x6e>
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	685b      	ldr	r3, [r3, #4]
 8102336:	f003 0301 	and.w	r3, r3, #1
 810233a:	2b00      	cmp	r3, #0
 810233c:	d001      	beq.n	8102342 <osThreadNew+0x72>
        return (NULL);
 810233e:	2300      	movs	r3, #0
 8102340:	e054      	b.n	81023ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8102342:	687b      	ldr	r3, [r7, #4]
 8102344:	695b      	ldr	r3, [r3, #20]
 8102346:	2b00      	cmp	r3, #0
 8102348:	d003      	beq.n	8102352 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	695b      	ldr	r3, [r3, #20]
 810234e:	089b      	lsrs	r3, r3, #2
 8102350:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8102352:	687b      	ldr	r3, [r7, #4]
 8102354:	689b      	ldr	r3, [r3, #8]
 8102356:	2b00      	cmp	r3, #0
 8102358:	d00e      	beq.n	8102378 <osThreadNew+0xa8>
 810235a:	687b      	ldr	r3, [r7, #4]
 810235c:	68db      	ldr	r3, [r3, #12]
 810235e:	2bbb      	cmp	r3, #187	; 0xbb
 8102360:	d90a      	bls.n	8102378 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8102362:	687b      	ldr	r3, [r7, #4]
 8102364:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8102366:	2b00      	cmp	r3, #0
 8102368:	d006      	beq.n	8102378 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810236a:	687b      	ldr	r3, [r7, #4]
 810236c:	695b      	ldr	r3, [r3, #20]
 810236e:	2b00      	cmp	r3, #0
 8102370:	d002      	beq.n	8102378 <osThreadNew+0xa8>
        mem = 1;
 8102372:	2301      	movs	r3, #1
 8102374:	61bb      	str	r3, [r7, #24]
 8102376:	e010      	b.n	810239a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	689b      	ldr	r3, [r3, #8]
 810237c:	2b00      	cmp	r3, #0
 810237e:	d10c      	bne.n	810239a <osThreadNew+0xca>
 8102380:	687b      	ldr	r3, [r7, #4]
 8102382:	68db      	ldr	r3, [r3, #12]
 8102384:	2b00      	cmp	r3, #0
 8102386:	d108      	bne.n	810239a <osThreadNew+0xca>
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	691b      	ldr	r3, [r3, #16]
 810238c:	2b00      	cmp	r3, #0
 810238e:	d104      	bne.n	810239a <osThreadNew+0xca>
          mem = 0;
 8102390:	2300      	movs	r3, #0
 8102392:	61bb      	str	r3, [r7, #24]
 8102394:	e001      	b.n	810239a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8102396:	2300      	movs	r3, #0
 8102398:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810239a:	69bb      	ldr	r3, [r7, #24]
 810239c:	2b01      	cmp	r3, #1
 810239e:	d110      	bne.n	81023c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81023a0:	687b      	ldr	r3, [r7, #4]
 81023a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 81023a4:	687a      	ldr	r2, [r7, #4]
 81023a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81023a8:	9202      	str	r2, [sp, #8]
 81023aa:	9301      	str	r3, [sp, #4]
 81023ac:	69fb      	ldr	r3, [r7, #28]
 81023ae:	9300      	str	r3, [sp, #0]
 81023b0:	68bb      	ldr	r3, [r7, #8]
 81023b2:	6a3a      	ldr	r2, [r7, #32]
 81023b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81023b6:	68f8      	ldr	r0, [r7, #12]
 81023b8:	f001 fe0f 	bl	8103fda <xTaskCreateStatic>
 81023bc:	4603      	mov	r3, r0
 81023be:	613b      	str	r3, [r7, #16]
 81023c0:	e013      	b.n	81023ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 81023c2:	69bb      	ldr	r3, [r7, #24]
 81023c4:	2b00      	cmp	r3, #0
 81023c6:	d110      	bne.n	81023ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81023c8:	6a3b      	ldr	r3, [r7, #32]
 81023ca:	b29a      	uxth	r2, r3
 81023cc:	f107 0310 	add.w	r3, r7, #16
 81023d0:	9301      	str	r3, [sp, #4]
 81023d2:	69fb      	ldr	r3, [r7, #28]
 81023d4:	9300      	str	r3, [sp, #0]
 81023d6:	68bb      	ldr	r3, [r7, #8]
 81023d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81023da:	68f8      	ldr	r0, [r7, #12]
 81023dc:	f001 fe5a 	bl	8104094 <xTaskCreate>
 81023e0:	4603      	mov	r3, r0
 81023e2:	2b01      	cmp	r3, #1
 81023e4:	d001      	beq.n	81023ea <osThreadNew+0x11a>
            hTask = NULL;
 81023e6:	2300      	movs	r3, #0
 81023e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 81023ea:	693b      	ldr	r3, [r7, #16]
}
 81023ec:	4618      	mov	r0, r3
 81023ee:	3728      	adds	r7, #40	; 0x28
 81023f0:	46bd      	mov	sp, r7
 81023f2:	bd80      	pop	{r7, pc}

081023f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 81023f4:	b580      	push	{r7, lr}
 81023f6:	b084      	sub	sp, #16
 81023f8:	af00      	add	r7, sp, #0
 81023fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81023fc:	f3ef 8305 	mrs	r3, IPSR
 8102400:	60bb      	str	r3, [r7, #8]
  return(result);
 8102402:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8102404:	2b00      	cmp	r3, #0
 8102406:	d003      	beq.n	8102410 <osDelay+0x1c>
    stat = osErrorISR;
 8102408:	f06f 0305 	mvn.w	r3, #5
 810240c:	60fb      	str	r3, [r7, #12]
 810240e:	e007      	b.n	8102420 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8102410:	2300      	movs	r3, #0
 8102412:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8102414:	687b      	ldr	r3, [r7, #4]
 8102416:	2b00      	cmp	r3, #0
 8102418:	d002      	beq.n	8102420 <osDelay+0x2c>
      vTaskDelay(ticks);
 810241a:	6878      	ldr	r0, [r7, #4]
 810241c:	f001 ff96 	bl	810434c <vTaskDelay>
    }
  }

  return (stat);
 8102420:	68fb      	ldr	r3, [r7, #12]
}
 8102422:	4618      	mov	r0, r3
 8102424:	3710      	adds	r7, #16
 8102426:	46bd      	mov	sp, r7
 8102428:	bd80      	pop	{r7, pc}

0810242a <osMutexAcquire>:
  }

  return ((osMutexId_t)hMutex);
}

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 810242a:	b580      	push	{r7, lr}
 810242c:	b086      	sub	sp, #24
 810242e:	af00      	add	r7, sp, #0
 8102430:	6078      	str	r0, [r7, #4]
 8102432:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	f023 0301 	bic.w	r3, r3, #1
 810243a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 810243c:	687b      	ldr	r3, [r7, #4]
 810243e:	f003 0301 	and.w	r3, r3, #1
 8102442:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8102444:	2300      	movs	r3, #0
 8102446:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8102448:	f3ef 8305 	mrs	r3, IPSR
 810244c:	60bb      	str	r3, [r7, #8]
  return(result);
 810244e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8102450:	2b00      	cmp	r3, #0
 8102452:	d003      	beq.n	810245c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8102454:	f06f 0305 	mvn.w	r3, #5
 8102458:	617b      	str	r3, [r7, #20]
 810245a:	e02c      	b.n	81024b6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 810245c:	693b      	ldr	r3, [r7, #16]
 810245e:	2b00      	cmp	r3, #0
 8102460:	d103      	bne.n	810246a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8102462:	f06f 0303 	mvn.w	r3, #3
 8102466:	617b      	str	r3, [r7, #20]
 8102468:	e025      	b.n	81024b6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 810246a:	68fb      	ldr	r3, [r7, #12]
 810246c:	2b00      	cmp	r3, #0
 810246e:	d011      	beq.n	8102494 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8102470:	6839      	ldr	r1, [r7, #0]
 8102472:	6938      	ldr	r0, [r7, #16]
 8102474:	f000 feb7 	bl	81031e6 <xQueueTakeMutexRecursive>
 8102478:	4603      	mov	r3, r0
 810247a:	2b01      	cmp	r3, #1
 810247c:	d01b      	beq.n	81024b6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 810247e:	683b      	ldr	r3, [r7, #0]
 8102480:	2b00      	cmp	r3, #0
 8102482:	d003      	beq.n	810248c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8102484:	f06f 0301 	mvn.w	r3, #1
 8102488:	617b      	str	r3, [r7, #20]
 810248a:	e014      	b.n	81024b6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 810248c:	f06f 0302 	mvn.w	r3, #2
 8102490:	617b      	str	r3, [r7, #20]
 8102492:	e010      	b.n	81024b6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8102494:	6839      	ldr	r1, [r7, #0]
 8102496:	6938      	ldr	r0, [r7, #16]
 8102498:	f001 f956 	bl	8103748 <xQueueSemaphoreTake>
 810249c:	4603      	mov	r3, r0
 810249e:	2b01      	cmp	r3, #1
 81024a0:	d009      	beq.n	81024b6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 81024a2:	683b      	ldr	r3, [r7, #0]
 81024a4:	2b00      	cmp	r3, #0
 81024a6:	d003      	beq.n	81024b0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 81024a8:	f06f 0301 	mvn.w	r3, #1
 81024ac:	617b      	str	r3, [r7, #20]
 81024ae:	e002      	b.n	81024b6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 81024b0:	f06f 0302 	mvn.w	r3, #2
 81024b4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 81024b6:	697b      	ldr	r3, [r7, #20]
}
 81024b8:	4618      	mov	r0, r3
 81024ba:	3718      	adds	r7, #24
 81024bc:	46bd      	mov	sp, r7
 81024be:	bd80      	pop	{r7, pc}

081024c0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 81024c0:	b580      	push	{r7, lr}
 81024c2:	b086      	sub	sp, #24
 81024c4:	af00      	add	r7, sp, #0
 81024c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	f023 0301 	bic.w	r3, r3, #1
 81024ce:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 81024d0:	687b      	ldr	r3, [r7, #4]
 81024d2:	f003 0301 	and.w	r3, r3, #1
 81024d6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 81024d8:	2300      	movs	r3, #0
 81024da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81024dc:	f3ef 8305 	mrs	r3, IPSR
 81024e0:	60bb      	str	r3, [r7, #8]
  return(result);
 81024e2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 81024e4:	2b00      	cmp	r3, #0
 81024e6:	d003      	beq.n	81024f0 <osMutexRelease+0x30>
    stat = osErrorISR;
 81024e8:	f06f 0305 	mvn.w	r3, #5
 81024ec:	617b      	str	r3, [r7, #20]
 81024ee:	e01f      	b.n	8102530 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 81024f0:	693b      	ldr	r3, [r7, #16]
 81024f2:	2b00      	cmp	r3, #0
 81024f4:	d103      	bne.n	81024fe <osMutexRelease+0x3e>
    stat = osErrorParameter;
 81024f6:	f06f 0303 	mvn.w	r3, #3
 81024fa:	617b      	str	r3, [r7, #20]
 81024fc:	e018      	b.n	8102530 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 81024fe:	68fb      	ldr	r3, [r7, #12]
 8102500:	2b00      	cmp	r3, #0
 8102502:	d009      	beq.n	8102518 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8102504:	6938      	ldr	r0, [r7, #16]
 8102506:	f000 fe3a 	bl	810317e <xQueueGiveMutexRecursive>
 810250a:	4603      	mov	r3, r0
 810250c:	2b01      	cmp	r3, #1
 810250e:	d00f      	beq.n	8102530 <osMutexRelease+0x70>
        stat = osErrorResource;
 8102510:	f06f 0302 	mvn.w	r3, #2
 8102514:	617b      	str	r3, [r7, #20]
 8102516:	e00b      	b.n	8102530 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8102518:	2300      	movs	r3, #0
 810251a:	2200      	movs	r2, #0
 810251c:	2100      	movs	r1, #0
 810251e:	6938      	ldr	r0, [r7, #16]
 8102520:	f000 fe98 	bl	8103254 <xQueueGenericSend>
 8102524:	4603      	mov	r3, r0
 8102526:	2b01      	cmp	r3, #1
 8102528:	d002      	beq.n	8102530 <osMutexRelease+0x70>
        stat = osErrorResource;
 810252a:	f06f 0302 	mvn.w	r3, #2
 810252e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8102530:	697b      	ldr	r3, [r7, #20]
}
 8102532:	4618      	mov	r0, r3
 8102534:	3718      	adds	r7, #24
 8102536:	46bd      	mov	sp, r7
 8102538:	bd80      	pop	{r7, pc}
	...

0810253c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810253c:	b480      	push	{r7}
 810253e:	b085      	sub	sp, #20
 8102540:	af00      	add	r7, sp, #0
 8102542:	60f8      	str	r0, [r7, #12]
 8102544:	60b9      	str	r1, [r7, #8]
 8102546:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8102548:	68fb      	ldr	r3, [r7, #12]
 810254a:	4a07      	ldr	r2, [pc, #28]	; (8102568 <vApplicationGetIdleTaskMemory+0x2c>)
 810254c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810254e:	68bb      	ldr	r3, [r7, #8]
 8102550:	4a06      	ldr	r2, [pc, #24]	; (810256c <vApplicationGetIdleTaskMemory+0x30>)
 8102552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8102554:	687b      	ldr	r3, [r7, #4]
 8102556:	2280      	movs	r2, #128	; 0x80
 8102558:	601a      	str	r2, [r3, #0]
}
 810255a:	bf00      	nop
 810255c:	3714      	adds	r7, #20
 810255e:	46bd      	mov	sp, r7
 8102560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102564:	4770      	bx	lr
 8102566:	bf00      	nop
 8102568:	10000138 	.word	0x10000138
 810256c:	100001f4 	.word	0x100001f4

08102570 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8102570:	b480      	push	{r7}
 8102572:	b085      	sub	sp, #20
 8102574:	af00      	add	r7, sp, #0
 8102576:	60f8      	str	r0, [r7, #12]
 8102578:	60b9      	str	r1, [r7, #8]
 810257a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810257c:	68fb      	ldr	r3, [r7, #12]
 810257e:	4a07      	ldr	r2, [pc, #28]	; (810259c <vApplicationGetTimerTaskMemory+0x2c>)
 8102580:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8102582:	68bb      	ldr	r3, [r7, #8]
 8102584:	4a06      	ldr	r2, [pc, #24]	; (81025a0 <vApplicationGetTimerTaskMemory+0x30>)
 8102586:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8102588:	687b      	ldr	r3, [r7, #4]
 810258a:	f44f 7280 	mov.w	r2, #256	; 0x100
 810258e:	601a      	str	r2, [r3, #0]
}
 8102590:	bf00      	nop
 8102592:	3714      	adds	r7, #20
 8102594:	46bd      	mov	sp, r7
 8102596:	f85d 7b04 	ldr.w	r7, [sp], #4
 810259a:	4770      	bx	lr
 810259c:	100003f4 	.word	0x100003f4
 81025a0:	100004b0 	.word	0x100004b0

081025a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 81025a4:	b580      	push	{r7, lr}
 81025a6:	b08a      	sub	sp, #40	; 0x28
 81025a8:	af00      	add	r7, sp, #0
 81025aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 81025ac:	2300      	movs	r3, #0
 81025ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 81025b0:	f001 ff70 	bl	8104494 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 81025b4:	4b5b      	ldr	r3, [pc, #364]	; (8102724 <pvPortMalloc+0x180>)
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	2b00      	cmp	r3, #0
 81025ba:	d101      	bne.n	81025c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 81025bc:	f000 f920 	bl	8102800 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 81025c0:	4b59      	ldr	r3, [pc, #356]	; (8102728 <pvPortMalloc+0x184>)
 81025c2:	681a      	ldr	r2, [r3, #0]
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	4013      	ands	r3, r2
 81025c8:	2b00      	cmp	r3, #0
 81025ca:	f040 8093 	bne.w	81026f4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	2b00      	cmp	r3, #0
 81025d2:	d01d      	beq.n	8102610 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 81025d4:	2208      	movs	r2, #8
 81025d6:	687b      	ldr	r3, [r7, #4]
 81025d8:	4413      	add	r3, r2
 81025da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	f003 0307 	and.w	r3, r3, #7
 81025e2:	2b00      	cmp	r3, #0
 81025e4:	d014      	beq.n	8102610 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	f023 0307 	bic.w	r3, r3, #7
 81025ec:	3308      	adds	r3, #8
 81025ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81025f0:	687b      	ldr	r3, [r7, #4]
 81025f2:	f003 0307 	and.w	r3, r3, #7
 81025f6:	2b00      	cmp	r3, #0
 81025f8:	d00a      	beq.n	8102610 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81025fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81025fe:	f383 8811 	msr	BASEPRI, r3
 8102602:	f3bf 8f6f 	isb	sy
 8102606:	f3bf 8f4f 	dsb	sy
 810260a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810260c:	bf00      	nop
 810260e:	e7fe      	b.n	810260e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	2b00      	cmp	r3, #0
 8102614:	d06e      	beq.n	81026f4 <pvPortMalloc+0x150>
 8102616:	4b45      	ldr	r3, [pc, #276]	; (810272c <pvPortMalloc+0x188>)
 8102618:	681b      	ldr	r3, [r3, #0]
 810261a:	687a      	ldr	r2, [r7, #4]
 810261c:	429a      	cmp	r2, r3
 810261e:	d869      	bhi.n	81026f4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8102620:	4b43      	ldr	r3, [pc, #268]	; (8102730 <pvPortMalloc+0x18c>)
 8102622:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8102624:	4b42      	ldr	r3, [pc, #264]	; (8102730 <pvPortMalloc+0x18c>)
 8102626:	681b      	ldr	r3, [r3, #0]
 8102628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810262a:	e004      	b.n	8102636 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 810262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810262e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8102630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102632:	681b      	ldr	r3, [r3, #0]
 8102634:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8102636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102638:	685b      	ldr	r3, [r3, #4]
 810263a:	687a      	ldr	r2, [r7, #4]
 810263c:	429a      	cmp	r2, r3
 810263e:	d903      	bls.n	8102648 <pvPortMalloc+0xa4>
 8102640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102642:	681b      	ldr	r3, [r3, #0]
 8102644:	2b00      	cmp	r3, #0
 8102646:	d1f1      	bne.n	810262c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8102648:	4b36      	ldr	r3, [pc, #216]	; (8102724 <pvPortMalloc+0x180>)
 810264a:	681b      	ldr	r3, [r3, #0]
 810264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810264e:	429a      	cmp	r2, r3
 8102650:	d050      	beq.n	81026f4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8102652:	6a3b      	ldr	r3, [r7, #32]
 8102654:	681b      	ldr	r3, [r3, #0]
 8102656:	2208      	movs	r2, #8
 8102658:	4413      	add	r3, r2
 810265a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810265e:	681a      	ldr	r2, [r3, #0]
 8102660:	6a3b      	ldr	r3, [r7, #32]
 8102662:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8102664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102666:	685a      	ldr	r2, [r3, #4]
 8102668:	687b      	ldr	r3, [r7, #4]
 810266a:	1ad2      	subs	r2, r2, r3
 810266c:	2308      	movs	r3, #8
 810266e:	005b      	lsls	r3, r3, #1
 8102670:	429a      	cmp	r2, r3
 8102672:	d91f      	bls.n	81026b4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8102674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102676:	687b      	ldr	r3, [r7, #4]
 8102678:	4413      	add	r3, r2
 810267a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810267c:	69bb      	ldr	r3, [r7, #24]
 810267e:	f003 0307 	and.w	r3, r3, #7
 8102682:	2b00      	cmp	r3, #0
 8102684:	d00a      	beq.n	810269c <pvPortMalloc+0xf8>
	__asm volatile
 8102686:	f04f 0350 	mov.w	r3, #80	; 0x50
 810268a:	f383 8811 	msr	BASEPRI, r3
 810268e:	f3bf 8f6f 	isb	sy
 8102692:	f3bf 8f4f 	dsb	sy
 8102696:	613b      	str	r3, [r7, #16]
}
 8102698:	bf00      	nop
 810269a:	e7fe      	b.n	810269a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810269e:	685a      	ldr	r2, [r3, #4]
 81026a0:	687b      	ldr	r3, [r7, #4]
 81026a2:	1ad2      	subs	r2, r2, r3
 81026a4:	69bb      	ldr	r3, [r7, #24]
 81026a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 81026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81026aa:	687a      	ldr	r2, [r7, #4]
 81026ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 81026ae:	69b8      	ldr	r0, [r7, #24]
 81026b0:	f000 f908 	bl	81028c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 81026b4:	4b1d      	ldr	r3, [pc, #116]	; (810272c <pvPortMalloc+0x188>)
 81026b6:	681a      	ldr	r2, [r3, #0]
 81026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81026ba:	685b      	ldr	r3, [r3, #4]
 81026bc:	1ad3      	subs	r3, r2, r3
 81026be:	4a1b      	ldr	r2, [pc, #108]	; (810272c <pvPortMalloc+0x188>)
 81026c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81026c2:	4b1a      	ldr	r3, [pc, #104]	; (810272c <pvPortMalloc+0x188>)
 81026c4:	681a      	ldr	r2, [r3, #0]
 81026c6:	4b1b      	ldr	r3, [pc, #108]	; (8102734 <pvPortMalloc+0x190>)
 81026c8:	681b      	ldr	r3, [r3, #0]
 81026ca:	429a      	cmp	r2, r3
 81026cc:	d203      	bcs.n	81026d6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81026ce:	4b17      	ldr	r3, [pc, #92]	; (810272c <pvPortMalloc+0x188>)
 81026d0:	681b      	ldr	r3, [r3, #0]
 81026d2:	4a18      	ldr	r2, [pc, #96]	; (8102734 <pvPortMalloc+0x190>)
 81026d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81026d8:	685a      	ldr	r2, [r3, #4]
 81026da:	4b13      	ldr	r3, [pc, #76]	; (8102728 <pvPortMalloc+0x184>)
 81026dc:	681b      	ldr	r3, [r3, #0]
 81026de:	431a      	orrs	r2, r3
 81026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81026e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81026e6:	2200      	movs	r2, #0
 81026e8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 81026ea:	4b13      	ldr	r3, [pc, #76]	; (8102738 <pvPortMalloc+0x194>)
 81026ec:	681b      	ldr	r3, [r3, #0]
 81026ee:	3301      	adds	r3, #1
 81026f0:	4a11      	ldr	r2, [pc, #68]	; (8102738 <pvPortMalloc+0x194>)
 81026f2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81026f4:	f001 fedc 	bl	81044b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81026f8:	69fb      	ldr	r3, [r7, #28]
 81026fa:	f003 0307 	and.w	r3, r3, #7
 81026fe:	2b00      	cmp	r3, #0
 8102700:	d00a      	beq.n	8102718 <pvPortMalloc+0x174>
	__asm volatile
 8102702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102706:	f383 8811 	msr	BASEPRI, r3
 810270a:	f3bf 8f6f 	isb	sy
 810270e:	f3bf 8f4f 	dsb	sy
 8102712:	60fb      	str	r3, [r7, #12]
}
 8102714:	bf00      	nop
 8102716:	e7fe      	b.n	8102716 <pvPortMalloc+0x172>
	return pvReturn;
 8102718:	69fb      	ldr	r3, [r7, #28]
}
 810271a:	4618      	mov	r0, r3
 810271c:	3728      	adds	r7, #40	; 0x28
 810271e:	46bd      	mov	sp, r7
 8102720:	bd80      	pop	{r7, pc}
 8102722:	bf00      	nop
 8102724:	100044b8 	.word	0x100044b8
 8102728:	100044cc 	.word	0x100044cc
 810272c:	100044bc 	.word	0x100044bc
 8102730:	100044b0 	.word	0x100044b0
 8102734:	100044c0 	.word	0x100044c0
 8102738:	100044c4 	.word	0x100044c4

0810273c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810273c:	b580      	push	{r7, lr}
 810273e:	b086      	sub	sp, #24
 8102740:	af00      	add	r7, sp, #0
 8102742:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8102744:	687b      	ldr	r3, [r7, #4]
 8102746:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8102748:	687b      	ldr	r3, [r7, #4]
 810274a:	2b00      	cmp	r3, #0
 810274c:	d04d      	beq.n	81027ea <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810274e:	2308      	movs	r3, #8
 8102750:	425b      	negs	r3, r3
 8102752:	697a      	ldr	r2, [r7, #20]
 8102754:	4413      	add	r3, r2
 8102756:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8102758:	697b      	ldr	r3, [r7, #20]
 810275a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810275c:	693b      	ldr	r3, [r7, #16]
 810275e:	685a      	ldr	r2, [r3, #4]
 8102760:	4b24      	ldr	r3, [pc, #144]	; (81027f4 <vPortFree+0xb8>)
 8102762:	681b      	ldr	r3, [r3, #0]
 8102764:	4013      	ands	r3, r2
 8102766:	2b00      	cmp	r3, #0
 8102768:	d10a      	bne.n	8102780 <vPortFree+0x44>
	__asm volatile
 810276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810276e:	f383 8811 	msr	BASEPRI, r3
 8102772:	f3bf 8f6f 	isb	sy
 8102776:	f3bf 8f4f 	dsb	sy
 810277a:	60fb      	str	r3, [r7, #12]
}
 810277c:	bf00      	nop
 810277e:	e7fe      	b.n	810277e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8102780:	693b      	ldr	r3, [r7, #16]
 8102782:	681b      	ldr	r3, [r3, #0]
 8102784:	2b00      	cmp	r3, #0
 8102786:	d00a      	beq.n	810279e <vPortFree+0x62>
	__asm volatile
 8102788:	f04f 0350 	mov.w	r3, #80	; 0x50
 810278c:	f383 8811 	msr	BASEPRI, r3
 8102790:	f3bf 8f6f 	isb	sy
 8102794:	f3bf 8f4f 	dsb	sy
 8102798:	60bb      	str	r3, [r7, #8]
}
 810279a:	bf00      	nop
 810279c:	e7fe      	b.n	810279c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810279e:	693b      	ldr	r3, [r7, #16]
 81027a0:	685a      	ldr	r2, [r3, #4]
 81027a2:	4b14      	ldr	r3, [pc, #80]	; (81027f4 <vPortFree+0xb8>)
 81027a4:	681b      	ldr	r3, [r3, #0]
 81027a6:	4013      	ands	r3, r2
 81027a8:	2b00      	cmp	r3, #0
 81027aa:	d01e      	beq.n	81027ea <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 81027ac:	693b      	ldr	r3, [r7, #16]
 81027ae:	681b      	ldr	r3, [r3, #0]
 81027b0:	2b00      	cmp	r3, #0
 81027b2:	d11a      	bne.n	81027ea <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 81027b4:	693b      	ldr	r3, [r7, #16]
 81027b6:	685a      	ldr	r2, [r3, #4]
 81027b8:	4b0e      	ldr	r3, [pc, #56]	; (81027f4 <vPortFree+0xb8>)
 81027ba:	681b      	ldr	r3, [r3, #0]
 81027bc:	43db      	mvns	r3, r3
 81027be:	401a      	ands	r2, r3
 81027c0:	693b      	ldr	r3, [r7, #16]
 81027c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 81027c4:	f001 fe66 	bl	8104494 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 81027c8:	693b      	ldr	r3, [r7, #16]
 81027ca:	685a      	ldr	r2, [r3, #4]
 81027cc:	4b0a      	ldr	r3, [pc, #40]	; (81027f8 <vPortFree+0xbc>)
 81027ce:	681b      	ldr	r3, [r3, #0]
 81027d0:	4413      	add	r3, r2
 81027d2:	4a09      	ldr	r2, [pc, #36]	; (81027f8 <vPortFree+0xbc>)
 81027d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81027d6:	6938      	ldr	r0, [r7, #16]
 81027d8:	f000 f874 	bl	81028c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 81027dc:	4b07      	ldr	r3, [pc, #28]	; (81027fc <vPortFree+0xc0>)
 81027de:	681b      	ldr	r3, [r3, #0]
 81027e0:	3301      	adds	r3, #1
 81027e2:	4a06      	ldr	r2, [pc, #24]	; (81027fc <vPortFree+0xc0>)
 81027e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 81027e6:	f001 fe63 	bl	81044b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81027ea:	bf00      	nop
 81027ec:	3718      	adds	r7, #24
 81027ee:	46bd      	mov	sp, r7
 81027f0:	bd80      	pop	{r7, pc}
 81027f2:	bf00      	nop
 81027f4:	100044cc 	.word	0x100044cc
 81027f8:	100044bc 	.word	0x100044bc
 81027fc:	100044c8 	.word	0x100044c8

08102800 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8102800:	b480      	push	{r7}
 8102802:	b085      	sub	sp, #20
 8102804:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8102806:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 810280a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810280c:	4b27      	ldr	r3, [pc, #156]	; (81028ac <prvHeapInit+0xac>)
 810280e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8102810:	68fb      	ldr	r3, [r7, #12]
 8102812:	f003 0307 	and.w	r3, r3, #7
 8102816:	2b00      	cmp	r3, #0
 8102818:	d00c      	beq.n	8102834 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810281a:	68fb      	ldr	r3, [r7, #12]
 810281c:	3307      	adds	r3, #7
 810281e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8102820:	68fb      	ldr	r3, [r7, #12]
 8102822:	f023 0307 	bic.w	r3, r3, #7
 8102826:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8102828:	68ba      	ldr	r2, [r7, #8]
 810282a:	68fb      	ldr	r3, [r7, #12]
 810282c:	1ad3      	subs	r3, r2, r3
 810282e:	4a1f      	ldr	r2, [pc, #124]	; (81028ac <prvHeapInit+0xac>)
 8102830:	4413      	add	r3, r2
 8102832:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8102834:	68fb      	ldr	r3, [r7, #12]
 8102836:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8102838:	4a1d      	ldr	r2, [pc, #116]	; (81028b0 <prvHeapInit+0xb0>)
 810283a:	687b      	ldr	r3, [r7, #4]
 810283c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810283e:	4b1c      	ldr	r3, [pc, #112]	; (81028b0 <prvHeapInit+0xb0>)
 8102840:	2200      	movs	r2, #0
 8102842:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8102844:	687b      	ldr	r3, [r7, #4]
 8102846:	68ba      	ldr	r2, [r7, #8]
 8102848:	4413      	add	r3, r2
 810284a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810284c:	2208      	movs	r2, #8
 810284e:	68fb      	ldr	r3, [r7, #12]
 8102850:	1a9b      	subs	r3, r3, r2
 8102852:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8102854:	68fb      	ldr	r3, [r7, #12]
 8102856:	f023 0307 	bic.w	r3, r3, #7
 810285a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810285c:	68fb      	ldr	r3, [r7, #12]
 810285e:	4a15      	ldr	r2, [pc, #84]	; (81028b4 <prvHeapInit+0xb4>)
 8102860:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8102862:	4b14      	ldr	r3, [pc, #80]	; (81028b4 <prvHeapInit+0xb4>)
 8102864:	681b      	ldr	r3, [r3, #0]
 8102866:	2200      	movs	r2, #0
 8102868:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810286a:	4b12      	ldr	r3, [pc, #72]	; (81028b4 <prvHeapInit+0xb4>)
 810286c:	681b      	ldr	r3, [r3, #0]
 810286e:	2200      	movs	r2, #0
 8102870:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8102872:	687b      	ldr	r3, [r7, #4]
 8102874:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8102876:	683b      	ldr	r3, [r7, #0]
 8102878:	68fa      	ldr	r2, [r7, #12]
 810287a:	1ad2      	subs	r2, r2, r3
 810287c:	683b      	ldr	r3, [r7, #0]
 810287e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8102880:	4b0c      	ldr	r3, [pc, #48]	; (81028b4 <prvHeapInit+0xb4>)
 8102882:	681a      	ldr	r2, [r3, #0]
 8102884:	683b      	ldr	r3, [r7, #0]
 8102886:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8102888:	683b      	ldr	r3, [r7, #0]
 810288a:	685b      	ldr	r3, [r3, #4]
 810288c:	4a0a      	ldr	r2, [pc, #40]	; (81028b8 <prvHeapInit+0xb8>)
 810288e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8102890:	683b      	ldr	r3, [r7, #0]
 8102892:	685b      	ldr	r3, [r3, #4]
 8102894:	4a09      	ldr	r2, [pc, #36]	; (81028bc <prvHeapInit+0xbc>)
 8102896:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8102898:	4b09      	ldr	r3, [pc, #36]	; (81028c0 <prvHeapInit+0xc0>)
 810289a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810289e:	601a      	str	r2, [r3, #0]
}
 81028a0:	bf00      	nop
 81028a2:	3714      	adds	r7, #20
 81028a4:	46bd      	mov	sp, r7
 81028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028aa:	4770      	bx	lr
 81028ac:	100008b0 	.word	0x100008b0
 81028b0:	100044b0 	.word	0x100044b0
 81028b4:	100044b8 	.word	0x100044b8
 81028b8:	100044c0 	.word	0x100044c0
 81028bc:	100044bc 	.word	0x100044bc
 81028c0:	100044cc 	.word	0x100044cc

081028c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81028c4:	b480      	push	{r7}
 81028c6:	b085      	sub	sp, #20
 81028c8:	af00      	add	r7, sp, #0
 81028ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81028cc:	4b28      	ldr	r3, [pc, #160]	; (8102970 <prvInsertBlockIntoFreeList+0xac>)
 81028ce:	60fb      	str	r3, [r7, #12]
 81028d0:	e002      	b.n	81028d8 <prvInsertBlockIntoFreeList+0x14>
 81028d2:	68fb      	ldr	r3, [r7, #12]
 81028d4:	681b      	ldr	r3, [r3, #0]
 81028d6:	60fb      	str	r3, [r7, #12]
 81028d8:	68fb      	ldr	r3, [r7, #12]
 81028da:	681b      	ldr	r3, [r3, #0]
 81028dc:	687a      	ldr	r2, [r7, #4]
 81028de:	429a      	cmp	r2, r3
 81028e0:	d8f7      	bhi.n	81028d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81028e2:	68fb      	ldr	r3, [r7, #12]
 81028e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81028e6:	68fb      	ldr	r3, [r7, #12]
 81028e8:	685b      	ldr	r3, [r3, #4]
 81028ea:	68ba      	ldr	r2, [r7, #8]
 81028ec:	4413      	add	r3, r2
 81028ee:	687a      	ldr	r2, [r7, #4]
 81028f0:	429a      	cmp	r2, r3
 81028f2:	d108      	bne.n	8102906 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81028f4:	68fb      	ldr	r3, [r7, #12]
 81028f6:	685a      	ldr	r2, [r3, #4]
 81028f8:	687b      	ldr	r3, [r7, #4]
 81028fa:	685b      	ldr	r3, [r3, #4]
 81028fc:	441a      	add	r2, r3
 81028fe:	68fb      	ldr	r3, [r7, #12]
 8102900:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8102902:	68fb      	ldr	r3, [r7, #12]
 8102904:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8102906:	687b      	ldr	r3, [r7, #4]
 8102908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810290a:	687b      	ldr	r3, [r7, #4]
 810290c:	685b      	ldr	r3, [r3, #4]
 810290e:	68ba      	ldr	r2, [r7, #8]
 8102910:	441a      	add	r2, r3
 8102912:	68fb      	ldr	r3, [r7, #12]
 8102914:	681b      	ldr	r3, [r3, #0]
 8102916:	429a      	cmp	r2, r3
 8102918:	d118      	bne.n	810294c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810291a:	68fb      	ldr	r3, [r7, #12]
 810291c:	681a      	ldr	r2, [r3, #0]
 810291e:	4b15      	ldr	r3, [pc, #84]	; (8102974 <prvInsertBlockIntoFreeList+0xb0>)
 8102920:	681b      	ldr	r3, [r3, #0]
 8102922:	429a      	cmp	r2, r3
 8102924:	d00d      	beq.n	8102942 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8102926:	687b      	ldr	r3, [r7, #4]
 8102928:	685a      	ldr	r2, [r3, #4]
 810292a:	68fb      	ldr	r3, [r7, #12]
 810292c:	681b      	ldr	r3, [r3, #0]
 810292e:	685b      	ldr	r3, [r3, #4]
 8102930:	441a      	add	r2, r3
 8102932:	687b      	ldr	r3, [r7, #4]
 8102934:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8102936:	68fb      	ldr	r3, [r7, #12]
 8102938:	681b      	ldr	r3, [r3, #0]
 810293a:	681a      	ldr	r2, [r3, #0]
 810293c:	687b      	ldr	r3, [r7, #4]
 810293e:	601a      	str	r2, [r3, #0]
 8102940:	e008      	b.n	8102954 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8102942:	4b0c      	ldr	r3, [pc, #48]	; (8102974 <prvInsertBlockIntoFreeList+0xb0>)
 8102944:	681a      	ldr	r2, [r3, #0]
 8102946:	687b      	ldr	r3, [r7, #4]
 8102948:	601a      	str	r2, [r3, #0]
 810294a:	e003      	b.n	8102954 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810294c:	68fb      	ldr	r3, [r7, #12]
 810294e:	681a      	ldr	r2, [r3, #0]
 8102950:	687b      	ldr	r3, [r7, #4]
 8102952:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8102954:	68fa      	ldr	r2, [r7, #12]
 8102956:	687b      	ldr	r3, [r7, #4]
 8102958:	429a      	cmp	r2, r3
 810295a:	d002      	beq.n	8102962 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810295c:	68fb      	ldr	r3, [r7, #12]
 810295e:	687a      	ldr	r2, [r7, #4]
 8102960:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8102962:	bf00      	nop
 8102964:	3714      	adds	r7, #20
 8102966:	46bd      	mov	sp, r7
 8102968:	f85d 7b04 	ldr.w	r7, [sp], #4
 810296c:	4770      	bx	lr
 810296e:	bf00      	nop
 8102970:	100044b0 	.word	0x100044b0
 8102974:	100044b8 	.word	0x100044b8

08102978 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8102978:	b480      	push	{r7}
 810297a:	b083      	sub	sp, #12
 810297c:	af00      	add	r7, sp, #0
 810297e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	f103 0208 	add.w	r2, r3, #8
 8102986:	687b      	ldr	r3, [r7, #4]
 8102988:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810298a:	687b      	ldr	r3, [r7, #4]
 810298c:	f04f 32ff 	mov.w	r2, #4294967295
 8102990:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8102992:	687b      	ldr	r3, [r7, #4]
 8102994:	f103 0208 	add.w	r2, r3, #8
 8102998:	687b      	ldr	r3, [r7, #4]
 810299a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810299c:	687b      	ldr	r3, [r7, #4]
 810299e:	f103 0208 	add.w	r2, r3, #8
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 81029a6:	687b      	ldr	r3, [r7, #4]
 81029a8:	2200      	movs	r2, #0
 81029aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 81029ac:	bf00      	nop
 81029ae:	370c      	adds	r7, #12
 81029b0:	46bd      	mov	sp, r7
 81029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029b6:	4770      	bx	lr

081029b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81029b8:	b480      	push	{r7}
 81029ba:	b083      	sub	sp, #12
 81029bc:	af00      	add	r7, sp, #0
 81029be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81029c0:	687b      	ldr	r3, [r7, #4]
 81029c2:	2200      	movs	r2, #0
 81029c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81029c6:	bf00      	nop
 81029c8:	370c      	adds	r7, #12
 81029ca:	46bd      	mov	sp, r7
 81029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029d0:	4770      	bx	lr

081029d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81029d2:	b480      	push	{r7}
 81029d4:	b085      	sub	sp, #20
 81029d6:	af00      	add	r7, sp, #0
 81029d8:	6078      	str	r0, [r7, #4]
 81029da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	685b      	ldr	r3, [r3, #4]
 81029e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81029e2:	683b      	ldr	r3, [r7, #0]
 81029e4:	68fa      	ldr	r2, [r7, #12]
 81029e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81029e8:	68fb      	ldr	r3, [r7, #12]
 81029ea:	689a      	ldr	r2, [r3, #8]
 81029ec:	683b      	ldr	r3, [r7, #0]
 81029ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81029f0:	68fb      	ldr	r3, [r7, #12]
 81029f2:	689b      	ldr	r3, [r3, #8]
 81029f4:	683a      	ldr	r2, [r7, #0]
 81029f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81029f8:	68fb      	ldr	r3, [r7, #12]
 81029fa:	683a      	ldr	r2, [r7, #0]
 81029fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81029fe:	683b      	ldr	r3, [r7, #0]
 8102a00:	687a      	ldr	r2, [r7, #4]
 8102a02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8102a04:	687b      	ldr	r3, [r7, #4]
 8102a06:	681b      	ldr	r3, [r3, #0]
 8102a08:	1c5a      	adds	r2, r3, #1
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	601a      	str	r2, [r3, #0]
}
 8102a0e:	bf00      	nop
 8102a10:	3714      	adds	r7, #20
 8102a12:	46bd      	mov	sp, r7
 8102a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a18:	4770      	bx	lr

08102a1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8102a1a:	b480      	push	{r7}
 8102a1c:	b085      	sub	sp, #20
 8102a1e:	af00      	add	r7, sp, #0
 8102a20:	6078      	str	r0, [r7, #4]
 8102a22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8102a24:	683b      	ldr	r3, [r7, #0]
 8102a26:	681b      	ldr	r3, [r3, #0]
 8102a28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8102a2a:	68bb      	ldr	r3, [r7, #8]
 8102a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102a30:	d103      	bne.n	8102a3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	691b      	ldr	r3, [r3, #16]
 8102a36:	60fb      	str	r3, [r7, #12]
 8102a38:	e00c      	b.n	8102a54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8102a3a:	687b      	ldr	r3, [r7, #4]
 8102a3c:	3308      	adds	r3, #8
 8102a3e:	60fb      	str	r3, [r7, #12]
 8102a40:	e002      	b.n	8102a48 <vListInsert+0x2e>
 8102a42:	68fb      	ldr	r3, [r7, #12]
 8102a44:	685b      	ldr	r3, [r3, #4]
 8102a46:	60fb      	str	r3, [r7, #12]
 8102a48:	68fb      	ldr	r3, [r7, #12]
 8102a4a:	685b      	ldr	r3, [r3, #4]
 8102a4c:	681b      	ldr	r3, [r3, #0]
 8102a4e:	68ba      	ldr	r2, [r7, #8]
 8102a50:	429a      	cmp	r2, r3
 8102a52:	d2f6      	bcs.n	8102a42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8102a54:	68fb      	ldr	r3, [r7, #12]
 8102a56:	685a      	ldr	r2, [r3, #4]
 8102a58:	683b      	ldr	r3, [r7, #0]
 8102a5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8102a5c:	683b      	ldr	r3, [r7, #0]
 8102a5e:	685b      	ldr	r3, [r3, #4]
 8102a60:	683a      	ldr	r2, [r7, #0]
 8102a62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8102a64:	683b      	ldr	r3, [r7, #0]
 8102a66:	68fa      	ldr	r2, [r7, #12]
 8102a68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8102a6a:	68fb      	ldr	r3, [r7, #12]
 8102a6c:	683a      	ldr	r2, [r7, #0]
 8102a6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8102a70:	683b      	ldr	r3, [r7, #0]
 8102a72:	687a      	ldr	r2, [r7, #4]
 8102a74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8102a76:	687b      	ldr	r3, [r7, #4]
 8102a78:	681b      	ldr	r3, [r3, #0]
 8102a7a:	1c5a      	adds	r2, r3, #1
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	601a      	str	r2, [r3, #0]
}
 8102a80:	bf00      	nop
 8102a82:	3714      	adds	r7, #20
 8102a84:	46bd      	mov	sp, r7
 8102a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a8a:	4770      	bx	lr

08102a8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8102a8c:	b480      	push	{r7}
 8102a8e:	b085      	sub	sp, #20
 8102a90:	af00      	add	r7, sp, #0
 8102a92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	691b      	ldr	r3, [r3, #16]
 8102a98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8102a9a:	687b      	ldr	r3, [r7, #4]
 8102a9c:	685b      	ldr	r3, [r3, #4]
 8102a9e:	687a      	ldr	r2, [r7, #4]
 8102aa0:	6892      	ldr	r2, [r2, #8]
 8102aa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	689b      	ldr	r3, [r3, #8]
 8102aa8:	687a      	ldr	r2, [r7, #4]
 8102aaa:	6852      	ldr	r2, [r2, #4]
 8102aac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8102aae:	68fb      	ldr	r3, [r7, #12]
 8102ab0:	685b      	ldr	r3, [r3, #4]
 8102ab2:	687a      	ldr	r2, [r7, #4]
 8102ab4:	429a      	cmp	r2, r3
 8102ab6:	d103      	bne.n	8102ac0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	689a      	ldr	r2, [r3, #8]
 8102abc:	68fb      	ldr	r3, [r7, #12]
 8102abe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8102ac0:	687b      	ldr	r3, [r7, #4]
 8102ac2:	2200      	movs	r2, #0
 8102ac4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8102ac6:	68fb      	ldr	r3, [r7, #12]
 8102ac8:	681b      	ldr	r3, [r3, #0]
 8102aca:	1e5a      	subs	r2, r3, #1
 8102acc:	68fb      	ldr	r3, [r7, #12]
 8102ace:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8102ad0:	68fb      	ldr	r3, [r7, #12]
 8102ad2:	681b      	ldr	r3, [r3, #0]
}
 8102ad4:	4618      	mov	r0, r3
 8102ad6:	3714      	adds	r7, #20
 8102ad8:	46bd      	mov	sp, r7
 8102ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ade:	4770      	bx	lr

08102ae0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8102ae0:	b480      	push	{r7}
 8102ae2:	b085      	sub	sp, #20
 8102ae4:	af00      	add	r7, sp, #0
 8102ae6:	60f8      	str	r0, [r7, #12]
 8102ae8:	60b9      	str	r1, [r7, #8]
 8102aea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8102aec:	68fb      	ldr	r3, [r7, #12]
 8102aee:	3b04      	subs	r3, #4
 8102af0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8102af2:	68fb      	ldr	r3, [r7, #12]
 8102af4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8102af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8102afa:	68fb      	ldr	r3, [r7, #12]
 8102afc:	3b04      	subs	r3, #4
 8102afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8102b00:	68bb      	ldr	r3, [r7, #8]
 8102b02:	f023 0201 	bic.w	r2, r3, #1
 8102b06:	68fb      	ldr	r3, [r7, #12]
 8102b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8102b0a:	68fb      	ldr	r3, [r7, #12]
 8102b0c:	3b04      	subs	r3, #4
 8102b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8102b10:	4a0c      	ldr	r2, [pc, #48]	; (8102b44 <pxPortInitialiseStack+0x64>)
 8102b12:	68fb      	ldr	r3, [r7, #12]
 8102b14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8102b16:	68fb      	ldr	r3, [r7, #12]
 8102b18:	3b14      	subs	r3, #20
 8102b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8102b1c:	687a      	ldr	r2, [r7, #4]
 8102b1e:	68fb      	ldr	r3, [r7, #12]
 8102b20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8102b22:	68fb      	ldr	r3, [r7, #12]
 8102b24:	3b04      	subs	r3, #4
 8102b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8102b28:	68fb      	ldr	r3, [r7, #12]
 8102b2a:	f06f 0202 	mvn.w	r2, #2
 8102b2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8102b30:	68fb      	ldr	r3, [r7, #12]
 8102b32:	3b20      	subs	r3, #32
 8102b34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8102b36:	68fb      	ldr	r3, [r7, #12]
}
 8102b38:	4618      	mov	r0, r3
 8102b3a:	3714      	adds	r7, #20
 8102b3c:	46bd      	mov	sp, r7
 8102b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b42:	4770      	bx	lr
 8102b44:	08102b49 	.word	0x08102b49

08102b48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8102b48:	b480      	push	{r7}
 8102b4a:	b085      	sub	sp, #20
 8102b4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8102b4e:	2300      	movs	r3, #0
 8102b50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8102b52:	4b12      	ldr	r3, [pc, #72]	; (8102b9c <prvTaskExitError+0x54>)
 8102b54:	681b      	ldr	r3, [r3, #0]
 8102b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b5a:	d00a      	beq.n	8102b72 <prvTaskExitError+0x2a>
	__asm volatile
 8102b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102b60:	f383 8811 	msr	BASEPRI, r3
 8102b64:	f3bf 8f6f 	isb	sy
 8102b68:	f3bf 8f4f 	dsb	sy
 8102b6c:	60fb      	str	r3, [r7, #12]
}
 8102b6e:	bf00      	nop
 8102b70:	e7fe      	b.n	8102b70 <prvTaskExitError+0x28>
	__asm volatile
 8102b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102b76:	f383 8811 	msr	BASEPRI, r3
 8102b7a:	f3bf 8f6f 	isb	sy
 8102b7e:	f3bf 8f4f 	dsb	sy
 8102b82:	60bb      	str	r3, [r7, #8]
}
 8102b84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8102b86:	bf00      	nop
 8102b88:	687b      	ldr	r3, [r7, #4]
 8102b8a:	2b00      	cmp	r3, #0
 8102b8c:	d0fc      	beq.n	8102b88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8102b8e:	bf00      	nop
 8102b90:	bf00      	nop
 8102b92:	3714      	adds	r7, #20
 8102b94:	46bd      	mov	sp, r7
 8102b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b9a:	4770      	bx	lr
 8102b9c:	10000010 	.word	0x10000010

08102ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8102ba0:	4b07      	ldr	r3, [pc, #28]	; (8102bc0 <pxCurrentTCBConst2>)
 8102ba2:	6819      	ldr	r1, [r3, #0]
 8102ba4:	6808      	ldr	r0, [r1, #0]
 8102ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8102baa:	f380 8809 	msr	PSP, r0
 8102bae:	f3bf 8f6f 	isb	sy
 8102bb2:	f04f 0000 	mov.w	r0, #0
 8102bb6:	f380 8811 	msr	BASEPRI, r0
 8102bba:	4770      	bx	lr
 8102bbc:	f3af 8000 	nop.w

08102bc0 <pxCurrentTCBConst2>:
 8102bc0:	10004518 	.word	0x10004518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8102bc4:	bf00      	nop
 8102bc6:	bf00      	nop

08102bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8102bc8:	4808      	ldr	r0, [pc, #32]	; (8102bec <prvPortStartFirstTask+0x24>)
 8102bca:	6800      	ldr	r0, [r0, #0]
 8102bcc:	6800      	ldr	r0, [r0, #0]
 8102bce:	f380 8808 	msr	MSP, r0
 8102bd2:	f04f 0000 	mov.w	r0, #0
 8102bd6:	f380 8814 	msr	CONTROL, r0
 8102bda:	b662      	cpsie	i
 8102bdc:	b661      	cpsie	f
 8102bde:	f3bf 8f4f 	dsb	sy
 8102be2:	f3bf 8f6f 	isb	sy
 8102be6:	df00      	svc	0
 8102be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8102bea:	bf00      	nop
 8102bec:	e000ed08 	.word	0xe000ed08

08102bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8102bf0:	b580      	push	{r7, lr}
 8102bf2:	b086      	sub	sp, #24
 8102bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8102bf6:	4b46      	ldr	r3, [pc, #280]	; (8102d10 <xPortStartScheduler+0x120>)
 8102bf8:	681b      	ldr	r3, [r3, #0]
 8102bfa:	4a46      	ldr	r2, [pc, #280]	; (8102d14 <xPortStartScheduler+0x124>)
 8102bfc:	4293      	cmp	r3, r2
 8102bfe:	d10a      	bne.n	8102c16 <xPortStartScheduler+0x26>
	__asm volatile
 8102c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102c04:	f383 8811 	msr	BASEPRI, r3
 8102c08:	f3bf 8f6f 	isb	sy
 8102c0c:	f3bf 8f4f 	dsb	sy
 8102c10:	613b      	str	r3, [r7, #16]
}
 8102c12:	bf00      	nop
 8102c14:	e7fe      	b.n	8102c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8102c16:	4b3e      	ldr	r3, [pc, #248]	; (8102d10 <xPortStartScheduler+0x120>)
 8102c18:	681b      	ldr	r3, [r3, #0]
 8102c1a:	4a3f      	ldr	r2, [pc, #252]	; (8102d18 <xPortStartScheduler+0x128>)
 8102c1c:	4293      	cmp	r3, r2
 8102c1e:	d10a      	bne.n	8102c36 <xPortStartScheduler+0x46>
	__asm volatile
 8102c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102c24:	f383 8811 	msr	BASEPRI, r3
 8102c28:	f3bf 8f6f 	isb	sy
 8102c2c:	f3bf 8f4f 	dsb	sy
 8102c30:	60fb      	str	r3, [r7, #12]
}
 8102c32:	bf00      	nop
 8102c34:	e7fe      	b.n	8102c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8102c36:	4b39      	ldr	r3, [pc, #228]	; (8102d1c <xPortStartScheduler+0x12c>)
 8102c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8102c3a:	697b      	ldr	r3, [r7, #20]
 8102c3c:	781b      	ldrb	r3, [r3, #0]
 8102c3e:	b2db      	uxtb	r3, r3
 8102c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8102c42:	697b      	ldr	r3, [r7, #20]
 8102c44:	22ff      	movs	r2, #255	; 0xff
 8102c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8102c48:	697b      	ldr	r3, [r7, #20]
 8102c4a:	781b      	ldrb	r3, [r3, #0]
 8102c4c:	b2db      	uxtb	r3, r3
 8102c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8102c50:	78fb      	ldrb	r3, [r7, #3]
 8102c52:	b2db      	uxtb	r3, r3
 8102c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8102c58:	b2da      	uxtb	r2, r3
 8102c5a:	4b31      	ldr	r3, [pc, #196]	; (8102d20 <xPortStartScheduler+0x130>)
 8102c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8102c5e:	4b31      	ldr	r3, [pc, #196]	; (8102d24 <xPortStartScheduler+0x134>)
 8102c60:	2207      	movs	r2, #7
 8102c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8102c64:	e009      	b.n	8102c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8102c66:	4b2f      	ldr	r3, [pc, #188]	; (8102d24 <xPortStartScheduler+0x134>)
 8102c68:	681b      	ldr	r3, [r3, #0]
 8102c6a:	3b01      	subs	r3, #1
 8102c6c:	4a2d      	ldr	r2, [pc, #180]	; (8102d24 <xPortStartScheduler+0x134>)
 8102c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8102c70:	78fb      	ldrb	r3, [r7, #3]
 8102c72:	b2db      	uxtb	r3, r3
 8102c74:	005b      	lsls	r3, r3, #1
 8102c76:	b2db      	uxtb	r3, r3
 8102c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8102c7a:	78fb      	ldrb	r3, [r7, #3]
 8102c7c:	b2db      	uxtb	r3, r3
 8102c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102c82:	2b80      	cmp	r3, #128	; 0x80
 8102c84:	d0ef      	beq.n	8102c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8102c86:	4b27      	ldr	r3, [pc, #156]	; (8102d24 <xPortStartScheduler+0x134>)
 8102c88:	681b      	ldr	r3, [r3, #0]
 8102c8a:	f1c3 0307 	rsb	r3, r3, #7
 8102c8e:	2b04      	cmp	r3, #4
 8102c90:	d00a      	beq.n	8102ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8102c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102c96:	f383 8811 	msr	BASEPRI, r3
 8102c9a:	f3bf 8f6f 	isb	sy
 8102c9e:	f3bf 8f4f 	dsb	sy
 8102ca2:	60bb      	str	r3, [r7, #8]
}
 8102ca4:	bf00      	nop
 8102ca6:	e7fe      	b.n	8102ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8102ca8:	4b1e      	ldr	r3, [pc, #120]	; (8102d24 <xPortStartScheduler+0x134>)
 8102caa:	681b      	ldr	r3, [r3, #0]
 8102cac:	021b      	lsls	r3, r3, #8
 8102cae:	4a1d      	ldr	r2, [pc, #116]	; (8102d24 <xPortStartScheduler+0x134>)
 8102cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8102cb2:	4b1c      	ldr	r3, [pc, #112]	; (8102d24 <xPortStartScheduler+0x134>)
 8102cb4:	681b      	ldr	r3, [r3, #0]
 8102cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8102cba:	4a1a      	ldr	r2, [pc, #104]	; (8102d24 <xPortStartScheduler+0x134>)
 8102cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8102cbe:	687b      	ldr	r3, [r7, #4]
 8102cc0:	b2da      	uxtb	r2, r3
 8102cc2:	697b      	ldr	r3, [r7, #20]
 8102cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8102cc6:	4b18      	ldr	r3, [pc, #96]	; (8102d28 <xPortStartScheduler+0x138>)
 8102cc8:	681b      	ldr	r3, [r3, #0]
 8102cca:	4a17      	ldr	r2, [pc, #92]	; (8102d28 <xPortStartScheduler+0x138>)
 8102ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8102cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8102cd2:	4b15      	ldr	r3, [pc, #84]	; (8102d28 <xPortStartScheduler+0x138>)
 8102cd4:	681b      	ldr	r3, [r3, #0]
 8102cd6:	4a14      	ldr	r2, [pc, #80]	; (8102d28 <xPortStartScheduler+0x138>)
 8102cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8102cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8102cde:	f000 f8dd 	bl	8102e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8102ce2:	4b12      	ldr	r3, [pc, #72]	; (8102d2c <xPortStartScheduler+0x13c>)
 8102ce4:	2200      	movs	r2, #0
 8102ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8102ce8:	f000 f8fc 	bl	8102ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8102cec:	4b10      	ldr	r3, [pc, #64]	; (8102d30 <xPortStartScheduler+0x140>)
 8102cee:	681b      	ldr	r3, [r3, #0]
 8102cf0:	4a0f      	ldr	r2, [pc, #60]	; (8102d30 <xPortStartScheduler+0x140>)
 8102cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8102cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8102cf8:	f7ff ff66 	bl	8102bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8102cfc:	f001 fd40 	bl	8104780 <vTaskSwitchContext>
	prvTaskExitError();
 8102d00:	f7ff ff22 	bl	8102b48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8102d04:	2300      	movs	r3, #0
}
 8102d06:	4618      	mov	r0, r3
 8102d08:	3718      	adds	r7, #24
 8102d0a:	46bd      	mov	sp, r7
 8102d0c:	bd80      	pop	{r7, pc}
 8102d0e:	bf00      	nop
 8102d10:	e000ed00 	.word	0xe000ed00
 8102d14:	410fc271 	.word	0x410fc271
 8102d18:	410fc270 	.word	0x410fc270
 8102d1c:	e000e400 	.word	0xe000e400
 8102d20:	100044d0 	.word	0x100044d0
 8102d24:	100044d4 	.word	0x100044d4
 8102d28:	e000ed20 	.word	0xe000ed20
 8102d2c:	10000010 	.word	0x10000010
 8102d30:	e000ef34 	.word	0xe000ef34

08102d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8102d34:	b480      	push	{r7}
 8102d36:	b083      	sub	sp, #12
 8102d38:	af00      	add	r7, sp, #0
	__asm volatile
 8102d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102d3e:	f383 8811 	msr	BASEPRI, r3
 8102d42:	f3bf 8f6f 	isb	sy
 8102d46:	f3bf 8f4f 	dsb	sy
 8102d4a:	607b      	str	r3, [r7, #4]
}
 8102d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8102d4e:	4b0f      	ldr	r3, [pc, #60]	; (8102d8c <vPortEnterCritical+0x58>)
 8102d50:	681b      	ldr	r3, [r3, #0]
 8102d52:	3301      	adds	r3, #1
 8102d54:	4a0d      	ldr	r2, [pc, #52]	; (8102d8c <vPortEnterCritical+0x58>)
 8102d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8102d58:	4b0c      	ldr	r3, [pc, #48]	; (8102d8c <vPortEnterCritical+0x58>)
 8102d5a:	681b      	ldr	r3, [r3, #0]
 8102d5c:	2b01      	cmp	r3, #1
 8102d5e:	d10f      	bne.n	8102d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8102d60:	4b0b      	ldr	r3, [pc, #44]	; (8102d90 <vPortEnterCritical+0x5c>)
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	b2db      	uxtb	r3, r3
 8102d66:	2b00      	cmp	r3, #0
 8102d68:	d00a      	beq.n	8102d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8102d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102d6e:	f383 8811 	msr	BASEPRI, r3
 8102d72:	f3bf 8f6f 	isb	sy
 8102d76:	f3bf 8f4f 	dsb	sy
 8102d7a:	603b      	str	r3, [r7, #0]
}
 8102d7c:	bf00      	nop
 8102d7e:	e7fe      	b.n	8102d7e <vPortEnterCritical+0x4a>
	}
}
 8102d80:	bf00      	nop
 8102d82:	370c      	adds	r7, #12
 8102d84:	46bd      	mov	sp, r7
 8102d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d8a:	4770      	bx	lr
 8102d8c:	10000010 	.word	0x10000010
 8102d90:	e000ed04 	.word	0xe000ed04

08102d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8102d94:	b480      	push	{r7}
 8102d96:	b083      	sub	sp, #12
 8102d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8102d9a:	4b12      	ldr	r3, [pc, #72]	; (8102de4 <vPortExitCritical+0x50>)
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	2b00      	cmp	r3, #0
 8102da0:	d10a      	bne.n	8102db8 <vPortExitCritical+0x24>
	__asm volatile
 8102da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102da6:	f383 8811 	msr	BASEPRI, r3
 8102daa:	f3bf 8f6f 	isb	sy
 8102dae:	f3bf 8f4f 	dsb	sy
 8102db2:	607b      	str	r3, [r7, #4]
}
 8102db4:	bf00      	nop
 8102db6:	e7fe      	b.n	8102db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8102db8:	4b0a      	ldr	r3, [pc, #40]	; (8102de4 <vPortExitCritical+0x50>)
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	3b01      	subs	r3, #1
 8102dbe:	4a09      	ldr	r2, [pc, #36]	; (8102de4 <vPortExitCritical+0x50>)
 8102dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8102dc2:	4b08      	ldr	r3, [pc, #32]	; (8102de4 <vPortExitCritical+0x50>)
 8102dc4:	681b      	ldr	r3, [r3, #0]
 8102dc6:	2b00      	cmp	r3, #0
 8102dc8:	d105      	bne.n	8102dd6 <vPortExitCritical+0x42>
 8102dca:	2300      	movs	r3, #0
 8102dcc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8102dce:	683b      	ldr	r3, [r7, #0]
 8102dd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8102dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8102dd6:	bf00      	nop
 8102dd8:	370c      	adds	r7, #12
 8102dda:	46bd      	mov	sp, r7
 8102ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102de0:	4770      	bx	lr
 8102de2:	bf00      	nop
 8102de4:	10000010 	.word	0x10000010
	...

08102df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8102df0:	f3ef 8009 	mrs	r0, PSP
 8102df4:	f3bf 8f6f 	isb	sy
 8102df8:	4b15      	ldr	r3, [pc, #84]	; (8102e50 <pxCurrentTCBConst>)
 8102dfa:	681a      	ldr	r2, [r3, #0]
 8102dfc:	f01e 0f10 	tst.w	lr, #16
 8102e00:	bf08      	it	eq
 8102e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8102e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8102e0a:	6010      	str	r0, [r2, #0]
 8102e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8102e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8102e14:	f380 8811 	msr	BASEPRI, r0
 8102e18:	f3bf 8f4f 	dsb	sy
 8102e1c:	f3bf 8f6f 	isb	sy
 8102e20:	f001 fcae 	bl	8104780 <vTaskSwitchContext>
 8102e24:	f04f 0000 	mov.w	r0, #0
 8102e28:	f380 8811 	msr	BASEPRI, r0
 8102e2c:	bc09      	pop	{r0, r3}
 8102e2e:	6819      	ldr	r1, [r3, #0]
 8102e30:	6808      	ldr	r0, [r1, #0]
 8102e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8102e36:	f01e 0f10 	tst.w	lr, #16
 8102e3a:	bf08      	it	eq
 8102e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8102e40:	f380 8809 	msr	PSP, r0
 8102e44:	f3bf 8f6f 	isb	sy
 8102e48:	4770      	bx	lr
 8102e4a:	bf00      	nop
 8102e4c:	f3af 8000 	nop.w

08102e50 <pxCurrentTCBConst>:
 8102e50:	10004518 	.word	0x10004518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8102e54:	bf00      	nop
 8102e56:	bf00      	nop

08102e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8102e58:	b580      	push	{r7, lr}
 8102e5a:	b082      	sub	sp, #8
 8102e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8102e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102e62:	f383 8811 	msr	BASEPRI, r3
 8102e66:	f3bf 8f6f 	isb	sy
 8102e6a:	f3bf 8f4f 	dsb	sy
 8102e6e:	607b      	str	r3, [r7, #4]
}
 8102e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8102e72:	f001 fbcb 	bl	810460c <xTaskIncrementTick>
 8102e76:	4603      	mov	r3, r0
 8102e78:	2b00      	cmp	r3, #0
 8102e7a:	d003      	beq.n	8102e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8102e7c:	4b06      	ldr	r3, [pc, #24]	; (8102e98 <xPortSysTickHandler+0x40>)
 8102e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102e82:	601a      	str	r2, [r3, #0]
 8102e84:	2300      	movs	r3, #0
 8102e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8102e88:	683b      	ldr	r3, [r7, #0]
 8102e8a:	f383 8811 	msr	BASEPRI, r3
}
 8102e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8102e90:	bf00      	nop
 8102e92:	3708      	adds	r7, #8
 8102e94:	46bd      	mov	sp, r7
 8102e96:	bd80      	pop	{r7, pc}
 8102e98:	e000ed04 	.word	0xe000ed04

08102e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8102e9c:	b480      	push	{r7}
 8102e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8102ea0:	4b0b      	ldr	r3, [pc, #44]	; (8102ed0 <vPortSetupTimerInterrupt+0x34>)
 8102ea2:	2200      	movs	r2, #0
 8102ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8102ea6:	4b0b      	ldr	r3, [pc, #44]	; (8102ed4 <vPortSetupTimerInterrupt+0x38>)
 8102ea8:	2200      	movs	r2, #0
 8102eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8102eac:	4b0a      	ldr	r3, [pc, #40]	; (8102ed8 <vPortSetupTimerInterrupt+0x3c>)
 8102eae:	681b      	ldr	r3, [r3, #0]
 8102eb0:	4a0a      	ldr	r2, [pc, #40]	; (8102edc <vPortSetupTimerInterrupt+0x40>)
 8102eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8102eb6:	099b      	lsrs	r3, r3, #6
 8102eb8:	4a09      	ldr	r2, [pc, #36]	; (8102ee0 <vPortSetupTimerInterrupt+0x44>)
 8102eba:	3b01      	subs	r3, #1
 8102ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8102ebe:	4b04      	ldr	r3, [pc, #16]	; (8102ed0 <vPortSetupTimerInterrupt+0x34>)
 8102ec0:	2207      	movs	r2, #7
 8102ec2:	601a      	str	r2, [r3, #0]
}
 8102ec4:	bf00      	nop
 8102ec6:	46bd      	mov	sp, r7
 8102ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ecc:	4770      	bx	lr
 8102ece:	bf00      	nop
 8102ed0:	e000e010 	.word	0xe000e010
 8102ed4:	e000e018 	.word	0xe000e018
 8102ed8:	10000004 	.word	0x10000004
 8102edc:	10624dd3 	.word	0x10624dd3
 8102ee0:	e000e014 	.word	0xe000e014

08102ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8102ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8102ef4 <vPortEnableVFP+0x10>
 8102ee8:	6801      	ldr	r1, [r0, #0]
 8102eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8102eee:	6001      	str	r1, [r0, #0]
 8102ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8102ef2:	bf00      	nop
 8102ef4:	e000ed88 	.word	0xe000ed88

08102ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8102ef8:	b480      	push	{r7}
 8102efa:	b085      	sub	sp, #20
 8102efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8102efe:	f3ef 8305 	mrs	r3, IPSR
 8102f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8102f04:	68fb      	ldr	r3, [r7, #12]
 8102f06:	2b0f      	cmp	r3, #15
 8102f08:	d914      	bls.n	8102f34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8102f0a:	4a17      	ldr	r2, [pc, #92]	; (8102f68 <vPortValidateInterruptPriority+0x70>)
 8102f0c:	68fb      	ldr	r3, [r7, #12]
 8102f0e:	4413      	add	r3, r2
 8102f10:	781b      	ldrb	r3, [r3, #0]
 8102f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8102f14:	4b15      	ldr	r3, [pc, #84]	; (8102f6c <vPortValidateInterruptPriority+0x74>)
 8102f16:	781b      	ldrb	r3, [r3, #0]
 8102f18:	7afa      	ldrb	r2, [r7, #11]
 8102f1a:	429a      	cmp	r2, r3
 8102f1c:	d20a      	bcs.n	8102f34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8102f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102f22:	f383 8811 	msr	BASEPRI, r3
 8102f26:	f3bf 8f6f 	isb	sy
 8102f2a:	f3bf 8f4f 	dsb	sy
 8102f2e:	607b      	str	r3, [r7, #4]
}
 8102f30:	bf00      	nop
 8102f32:	e7fe      	b.n	8102f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8102f34:	4b0e      	ldr	r3, [pc, #56]	; (8102f70 <vPortValidateInterruptPriority+0x78>)
 8102f36:	681b      	ldr	r3, [r3, #0]
 8102f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8102f3c:	4b0d      	ldr	r3, [pc, #52]	; (8102f74 <vPortValidateInterruptPriority+0x7c>)
 8102f3e:	681b      	ldr	r3, [r3, #0]
 8102f40:	429a      	cmp	r2, r3
 8102f42:	d90a      	bls.n	8102f5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8102f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102f48:	f383 8811 	msr	BASEPRI, r3
 8102f4c:	f3bf 8f6f 	isb	sy
 8102f50:	f3bf 8f4f 	dsb	sy
 8102f54:	603b      	str	r3, [r7, #0]
}
 8102f56:	bf00      	nop
 8102f58:	e7fe      	b.n	8102f58 <vPortValidateInterruptPriority+0x60>
	}
 8102f5a:	bf00      	nop
 8102f5c:	3714      	adds	r7, #20
 8102f5e:	46bd      	mov	sp, r7
 8102f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f64:	4770      	bx	lr
 8102f66:	bf00      	nop
 8102f68:	e000e3f0 	.word	0xe000e3f0
 8102f6c:	100044d0 	.word	0x100044d0
 8102f70:	e000ed0c 	.word	0xe000ed0c
 8102f74:	100044d4 	.word	0x100044d4

08102f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8102f78:	b580      	push	{r7, lr}
 8102f7a:	b084      	sub	sp, #16
 8102f7c:	af00      	add	r7, sp, #0
 8102f7e:	6078      	str	r0, [r7, #4]
 8102f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8102f86:	68fb      	ldr	r3, [r7, #12]
 8102f88:	2b00      	cmp	r3, #0
 8102f8a:	d10a      	bne.n	8102fa2 <xQueueGenericReset+0x2a>
	__asm volatile
 8102f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102f90:	f383 8811 	msr	BASEPRI, r3
 8102f94:	f3bf 8f6f 	isb	sy
 8102f98:	f3bf 8f4f 	dsb	sy
 8102f9c:	60bb      	str	r3, [r7, #8]
}
 8102f9e:	bf00      	nop
 8102fa0:	e7fe      	b.n	8102fa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8102fa2:	f7ff fec7 	bl	8102d34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8102fa6:	68fb      	ldr	r3, [r7, #12]
 8102fa8:	681a      	ldr	r2, [r3, #0]
 8102faa:	68fb      	ldr	r3, [r7, #12]
 8102fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102fae:	68f9      	ldr	r1, [r7, #12]
 8102fb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8102fb2:	fb01 f303 	mul.w	r3, r1, r3
 8102fb6:	441a      	add	r2, r3
 8102fb8:	68fb      	ldr	r3, [r7, #12]
 8102fba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8102fbc:	68fb      	ldr	r3, [r7, #12]
 8102fbe:	2200      	movs	r2, #0
 8102fc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8102fc2:	68fb      	ldr	r3, [r7, #12]
 8102fc4:	681a      	ldr	r2, [r3, #0]
 8102fc6:	68fb      	ldr	r3, [r7, #12]
 8102fc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8102fca:	68fb      	ldr	r3, [r7, #12]
 8102fcc:	681a      	ldr	r2, [r3, #0]
 8102fce:	68fb      	ldr	r3, [r7, #12]
 8102fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102fd2:	3b01      	subs	r3, #1
 8102fd4:	68f9      	ldr	r1, [r7, #12]
 8102fd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8102fd8:	fb01 f303 	mul.w	r3, r1, r3
 8102fdc:	441a      	add	r2, r3
 8102fde:	68fb      	ldr	r3, [r7, #12]
 8102fe0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8102fe2:	68fb      	ldr	r3, [r7, #12]
 8102fe4:	22ff      	movs	r2, #255	; 0xff
 8102fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8102fea:	68fb      	ldr	r3, [r7, #12]
 8102fec:	22ff      	movs	r2, #255	; 0xff
 8102fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8102ff2:	683b      	ldr	r3, [r7, #0]
 8102ff4:	2b00      	cmp	r3, #0
 8102ff6:	d114      	bne.n	8103022 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102ff8:	68fb      	ldr	r3, [r7, #12]
 8102ffa:	691b      	ldr	r3, [r3, #16]
 8102ffc:	2b00      	cmp	r3, #0
 8102ffe:	d01a      	beq.n	8103036 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8103000:	68fb      	ldr	r3, [r7, #12]
 8103002:	3310      	adds	r3, #16
 8103004:	4618      	mov	r0, r3
 8103006:	f001 fc6f 	bl	81048e8 <xTaskRemoveFromEventList>
 810300a:	4603      	mov	r3, r0
 810300c:	2b00      	cmp	r3, #0
 810300e:	d012      	beq.n	8103036 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8103010:	4b0c      	ldr	r3, [pc, #48]	; (8103044 <xQueueGenericReset+0xcc>)
 8103012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103016:	601a      	str	r2, [r3, #0]
 8103018:	f3bf 8f4f 	dsb	sy
 810301c:	f3bf 8f6f 	isb	sy
 8103020:	e009      	b.n	8103036 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8103022:	68fb      	ldr	r3, [r7, #12]
 8103024:	3310      	adds	r3, #16
 8103026:	4618      	mov	r0, r3
 8103028:	f7ff fca6 	bl	8102978 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810302c:	68fb      	ldr	r3, [r7, #12]
 810302e:	3324      	adds	r3, #36	; 0x24
 8103030:	4618      	mov	r0, r3
 8103032:	f7ff fca1 	bl	8102978 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8103036:	f7ff fead 	bl	8102d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810303a:	2301      	movs	r3, #1
}
 810303c:	4618      	mov	r0, r3
 810303e:	3710      	adds	r7, #16
 8103040:	46bd      	mov	sp, r7
 8103042:	bd80      	pop	{r7, pc}
 8103044:	e000ed04 	.word	0xe000ed04

08103048 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8103048:	b580      	push	{r7, lr}
 810304a:	b08e      	sub	sp, #56	; 0x38
 810304c:	af02      	add	r7, sp, #8
 810304e:	60f8      	str	r0, [r7, #12]
 8103050:	60b9      	str	r1, [r7, #8]
 8103052:	607a      	str	r2, [r7, #4]
 8103054:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8103056:	68fb      	ldr	r3, [r7, #12]
 8103058:	2b00      	cmp	r3, #0
 810305a:	d10a      	bne.n	8103072 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 810305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103060:	f383 8811 	msr	BASEPRI, r3
 8103064:	f3bf 8f6f 	isb	sy
 8103068:	f3bf 8f4f 	dsb	sy
 810306c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810306e:	bf00      	nop
 8103070:	e7fe      	b.n	8103070 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8103072:	683b      	ldr	r3, [r7, #0]
 8103074:	2b00      	cmp	r3, #0
 8103076:	d10a      	bne.n	810308e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8103078:	f04f 0350 	mov.w	r3, #80	; 0x50
 810307c:	f383 8811 	msr	BASEPRI, r3
 8103080:	f3bf 8f6f 	isb	sy
 8103084:	f3bf 8f4f 	dsb	sy
 8103088:	627b      	str	r3, [r7, #36]	; 0x24
}
 810308a:	bf00      	nop
 810308c:	e7fe      	b.n	810308c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	2b00      	cmp	r3, #0
 8103092:	d002      	beq.n	810309a <xQueueGenericCreateStatic+0x52>
 8103094:	68bb      	ldr	r3, [r7, #8]
 8103096:	2b00      	cmp	r3, #0
 8103098:	d001      	beq.n	810309e <xQueueGenericCreateStatic+0x56>
 810309a:	2301      	movs	r3, #1
 810309c:	e000      	b.n	81030a0 <xQueueGenericCreateStatic+0x58>
 810309e:	2300      	movs	r3, #0
 81030a0:	2b00      	cmp	r3, #0
 81030a2:	d10a      	bne.n	81030ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 81030a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81030a8:	f383 8811 	msr	BASEPRI, r3
 81030ac:	f3bf 8f6f 	isb	sy
 81030b0:	f3bf 8f4f 	dsb	sy
 81030b4:	623b      	str	r3, [r7, #32]
}
 81030b6:	bf00      	nop
 81030b8:	e7fe      	b.n	81030b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	2b00      	cmp	r3, #0
 81030be:	d102      	bne.n	81030c6 <xQueueGenericCreateStatic+0x7e>
 81030c0:	68bb      	ldr	r3, [r7, #8]
 81030c2:	2b00      	cmp	r3, #0
 81030c4:	d101      	bne.n	81030ca <xQueueGenericCreateStatic+0x82>
 81030c6:	2301      	movs	r3, #1
 81030c8:	e000      	b.n	81030cc <xQueueGenericCreateStatic+0x84>
 81030ca:	2300      	movs	r3, #0
 81030cc:	2b00      	cmp	r3, #0
 81030ce:	d10a      	bne.n	81030e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 81030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81030d4:	f383 8811 	msr	BASEPRI, r3
 81030d8:	f3bf 8f6f 	isb	sy
 81030dc:	f3bf 8f4f 	dsb	sy
 81030e0:	61fb      	str	r3, [r7, #28]
}
 81030e2:	bf00      	nop
 81030e4:	e7fe      	b.n	81030e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81030e6:	2350      	movs	r3, #80	; 0x50
 81030e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81030ea:	697b      	ldr	r3, [r7, #20]
 81030ec:	2b50      	cmp	r3, #80	; 0x50
 81030ee:	d00a      	beq.n	8103106 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 81030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81030f4:	f383 8811 	msr	BASEPRI, r3
 81030f8:	f3bf 8f6f 	isb	sy
 81030fc:	f3bf 8f4f 	dsb	sy
 8103100:	61bb      	str	r3, [r7, #24]
}
 8103102:	bf00      	nop
 8103104:	e7fe      	b.n	8103104 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8103106:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8103108:	683b      	ldr	r3, [r7, #0]
 810310a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 810310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810310e:	2b00      	cmp	r3, #0
 8103110:	d00d      	beq.n	810312e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8103112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103114:	2201      	movs	r2, #1
 8103116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810311a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 810311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103120:	9300      	str	r3, [sp, #0]
 8103122:	4613      	mov	r3, r2
 8103124:	687a      	ldr	r2, [r7, #4]
 8103126:	68b9      	ldr	r1, [r7, #8]
 8103128:	68f8      	ldr	r0, [r7, #12]
 810312a:	f000 f805 	bl	8103138 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8103130:	4618      	mov	r0, r3
 8103132:	3730      	adds	r7, #48	; 0x30
 8103134:	46bd      	mov	sp, r7
 8103136:	bd80      	pop	{r7, pc}

08103138 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8103138:	b580      	push	{r7, lr}
 810313a:	b084      	sub	sp, #16
 810313c:	af00      	add	r7, sp, #0
 810313e:	60f8      	str	r0, [r7, #12]
 8103140:	60b9      	str	r1, [r7, #8]
 8103142:	607a      	str	r2, [r7, #4]
 8103144:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8103146:	68bb      	ldr	r3, [r7, #8]
 8103148:	2b00      	cmp	r3, #0
 810314a:	d103      	bne.n	8103154 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810314c:	69bb      	ldr	r3, [r7, #24]
 810314e:	69ba      	ldr	r2, [r7, #24]
 8103150:	601a      	str	r2, [r3, #0]
 8103152:	e002      	b.n	810315a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8103154:	69bb      	ldr	r3, [r7, #24]
 8103156:	687a      	ldr	r2, [r7, #4]
 8103158:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810315a:	69bb      	ldr	r3, [r7, #24]
 810315c:	68fa      	ldr	r2, [r7, #12]
 810315e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8103160:	69bb      	ldr	r3, [r7, #24]
 8103162:	68ba      	ldr	r2, [r7, #8]
 8103164:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8103166:	2101      	movs	r1, #1
 8103168:	69b8      	ldr	r0, [r7, #24]
 810316a:	f7ff ff05 	bl	8102f78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810316e:	69bb      	ldr	r3, [r7, #24]
 8103170:	78fa      	ldrb	r2, [r7, #3]
 8103172:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8103176:	bf00      	nop
 8103178:	3710      	adds	r7, #16
 810317a:	46bd      	mov	sp, r7
 810317c:	bd80      	pop	{r7, pc}

0810317e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 810317e:	b590      	push	{r4, r7, lr}
 8103180:	b087      	sub	sp, #28
 8103182:	af00      	add	r7, sp, #0
 8103184:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8103186:	687b      	ldr	r3, [r7, #4]
 8103188:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 810318a:	693b      	ldr	r3, [r7, #16]
 810318c:	2b00      	cmp	r3, #0
 810318e:	d10a      	bne.n	81031a6 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8103190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103194:	f383 8811 	msr	BASEPRI, r3
 8103198:	f3bf 8f6f 	isb	sy
 810319c:	f3bf 8f4f 	dsb	sy
 81031a0:	60fb      	str	r3, [r7, #12]
}
 81031a2:	bf00      	nop
 81031a4:	e7fe      	b.n	81031a4 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 81031a6:	693b      	ldr	r3, [r7, #16]
 81031a8:	689c      	ldr	r4, [r3, #8]
 81031aa:	f001 fd85 	bl	8104cb8 <xTaskGetCurrentTaskHandle>
 81031ae:	4603      	mov	r3, r0
 81031b0:	429c      	cmp	r4, r3
 81031b2:	d111      	bne.n	81031d8 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 81031b4:	693b      	ldr	r3, [r7, #16]
 81031b6:	68db      	ldr	r3, [r3, #12]
 81031b8:	1e5a      	subs	r2, r3, #1
 81031ba:	693b      	ldr	r3, [r7, #16]
 81031bc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 81031be:	693b      	ldr	r3, [r7, #16]
 81031c0:	68db      	ldr	r3, [r3, #12]
 81031c2:	2b00      	cmp	r3, #0
 81031c4:	d105      	bne.n	81031d2 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 81031c6:	2300      	movs	r3, #0
 81031c8:	2200      	movs	r2, #0
 81031ca:	2100      	movs	r1, #0
 81031cc:	6938      	ldr	r0, [r7, #16]
 81031ce:	f000 f841 	bl	8103254 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 81031d2:	2301      	movs	r3, #1
 81031d4:	617b      	str	r3, [r7, #20]
 81031d6:	e001      	b.n	81031dc <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 81031d8:	2300      	movs	r3, #0
 81031da:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 81031dc:	697b      	ldr	r3, [r7, #20]
	}
 81031de:	4618      	mov	r0, r3
 81031e0:	371c      	adds	r7, #28
 81031e2:	46bd      	mov	sp, r7
 81031e4:	bd90      	pop	{r4, r7, pc}

081031e6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 81031e6:	b590      	push	{r4, r7, lr}
 81031e8:	b087      	sub	sp, #28
 81031ea:	af00      	add	r7, sp, #0
 81031ec:	6078      	str	r0, [r7, #4]
 81031ee:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 81031f4:	693b      	ldr	r3, [r7, #16]
 81031f6:	2b00      	cmp	r3, #0
 81031f8:	d10a      	bne.n	8103210 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 81031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81031fe:	f383 8811 	msr	BASEPRI, r3
 8103202:	f3bf 8f6f 	isb	sy
 8103206:	f3bf 8f4f 	dsb	sy
 810320a:	60fb      	str	r3, [r7, #12]
}
 810320c:	bf00      	nop
 810320e:	e7fe      	b.n	810320e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8103210:	693b      	ldr	r3, [r7, #16]
 8103212:	689c      	ldr	r4, [r3, #8]
 8103214:	f001 fd50 	bl	8104cb8 <xTaskGetCurrentTaskHandle>
 8103218:	4603      	mov	r3, r0
 810321a:	429c      	cmp	r4, r3
 810321c:	d107      	bne.n	810322e <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 810321e:	693b      	ldr	r3, [r7, #16]
 8103220:	68db      	ldr	r3, [r3, #12]
 8103222:	1c5a      	adds	r2, r3, #1
 8103224:	693b      	ldr	r3, [r7, #16]
 8103226:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8103228:	2301      	movs	r3, #1
 810322a:	617b      	str	r3, [r7, #20]
 810322c:	e00c      	b.n	8103248 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 810322e:	6839      	ldr	r1, [r7, #0]
 8103230:	6938      	ldr	r0, [r7, #16]
 8103232:	f000 fa89 	bl	8103748 <xQueueSemaphoreTake>
 8103236:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8103238:	697b      	ldr	r3, [r7, #20]
 810323a:	2b00      	cmp	r3, #0
 810323c:	d004      	beq.n	8103248 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 810323e:	693b      	ldr	r3, [r7, #16]
 8103240:	68db      	ldr	r3, [r3, #12]
 8103242:	1c5a      	adds	r2, r3, #1
 8103244:	693b      	ldr	r3, [r7, #16]
 8103246:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8103248:	697b      	ldr	r3, [r7, #20]
	}
 810324a:	4618      	mov	r0, r3
 810324c:	371c      	adds	r7, #28
 810324e:	46bd      	mov	sp, r7
 8103250:	bd90      	pop	{r4, r7, pc}
	...

08103254 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8103254:	b580      	push	{r7, lr}
 8103256:	b08e      	sub	sp, #56	; 0x38
 8103258:	af00      	add	r7, sp, #0
 810325a:	60f8      	str	r0, [r7, #12]
 810325c:	60b9      	str	r1, [r7, #8]
 810325e:	607a      	str	r2, [r7, #4]
 8103260:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8103262:	2300      	movs	r3, #0
 8103264:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8103266:	68fb      	ldr	r3, [r7, #12]
 8103268:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810326c:	2b00      	cmp	r3, #0
 810326e:	d10a      	bne.n	8103286 <xQueueGenericSend+0x32>
	__asm volatile
 8103270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103274:	f383 8811 	msr	BASEPRI, r3
 8103278:	f3bf 8f6f 	isb	sy
 810327c:	f3bf 8f4f 	dsb	sy
 8103280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8103282:	bf00      	nop
 8103284:	e7fe      	b.n	8103284 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8103286:	68bb      	ldr	r3, [r7, #8]
 8103288:	2b00      	cmp	r3, #0
 810328a:	d103      	bne.n	8103294 <xQueueGenericSend+0x40>
 810328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103290:	2b00      	cmp	r3, #0
 8103292:	d101      	bne.n	8103298 <xQueueGenericSend+0x44>
 8103294:	2301      	movs	r3, #1
 8103296:	e000      	b.n	810329a <xQueueGenericSend+0x46>
 8103298:	2300      	movs	r3, #0
 810329a:	2b00      	cmp	r3, #0
 810329c:	d10a      	bne.n	81032b4 <xQueueGenericSend+0x60>
	__asm volatile
 810329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 81032a2:	f383 8811 	msr	BASEPRI, r3
 81032a6:	f3bf 8f6f 	isb	sy
 81032aa:	f3bf 8f4f 	dsb	sy
 81032ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 81032b0:	bf00      	nop
 81032b2:	e7fe      	b.n	81032b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81032b4:	683b      	ldr	r3, [r7, #0]
 81032b6:	2b02      	cmp	r3, #2
 81032b8:	d103      	bne.n	81032c2 <xQueueGenericSend+0x6e>
 81032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81032be:	2b01      	cmp	r3, #1
 81032c0:	d101      	bne.n	81032c6 <xQueueGenericSend+0x72>
 81032c2:	2301      	movs	r3, #1
 81032c4:	e000      	b.n	81032c8 <xQueueGenericSend+0x74>
 81032c6:	2300      	movs	r3, #0
 81032c8:	2b00      	cmp	r3, #0
 81032ca:	d10a      	bne.n	81032e2 <xQueueGenericSend+0x8e>
	__asm volatile
 81032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81032d0:	f383 8811 	msr	BASEPRI, r3
 81032d4:	f3bf 8f6f 	isb	sy
 81032d8:	f3bf 8f4f 	dsb	sy
 81032dc:	623b      	str	r3, [r7, #32]
}
 81032de:	bf00      	nop
 81032e0:	e7fe      	b.n	81032e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81032e2:	f001 fcf9 	bl	8104cd8 <xTaskGetSchedulerState>
 81032e6:	4603      	mov	r3, r0
 81032e8:	2b00      	cmp	r3, #0
 81032ea:	d102      	bne.n	81032f2 <xQueueGenericSend+0x9e>
 81032ec:	687b      	ldr	r3, [r7, #4]
 81032ee:	2b00      	cmp	r3, #0
 81032f0:	d101      	bne.n	81032f6 <xQueueGenericSend+0xa2>
 81032f2:	2301      	movs	r3, #1
 81032f4:	e000      	b.n	81032f8 <xQueueGenericSend+0xa4>
 81032f6:	2300      	movs	r3, #0
 81032f8:	2b00      	cmp	r3, #0
 81032fa:	d10a      	bne.n	8103312 <xQueueGenericSend+0xbe>
	__asm volatile
 81032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103300:	f383 8811 	msr	BASEPRI, r3
 8103304:	f3bf 8f6f 	isb	sy
 8103308:	f3bf 8f4f 	dsb	sy
 810330c:	61fb      	str	r3, [r7, #28]
}
 810330e:	bf00      	nop
 8103310:	e7fe      	b.n	8103310 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8103312:	f7ff fd0f 	bl	8102d34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8103316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810331e:	429a      	cmp	r2, r3
 8103320:	d302      	bcc.n	8103328 <xQueueGenericSend+0xd4>
 8103322:	683b      	ldr	r3, [r7, #0]
 8103324:	2b02      	cmp	r3, #2
 8103326:	d129      	bne.n	810337c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8103328:	683a      	ldr	r2, [r7, #0]
 810332a:	68b9      	ldr	r1, [r7, #8]
 810332c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810332e:	f000 fb2f 	bl	8103990 <prvCopyDataToQueue>
 8103332:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8103334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103338:	2b00      	cmp	r3, #0
 810333a:	d010      	beq.n	810335e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810333e:	3324      	adds	r3, #36	; 0x24
 8103340:	4618      	mov	r0, r3
 8103342:	f001 fad1 	bl	81048e8 <xTaskRemoveFromEventList>
 8103346:	4603      	mov	r3, r0
 8103348:	2b00      	cmp	r3, #0
 810334a:	d013      	beq.n	8103374 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810334c:	4b3f      	ldr	r3, [pc, #252]	; (810344c <xQueueGenericSend+0x1f8>)
 810334e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103352:	601a      	str	r2, [r3, #0]
 8103354:	f3bf 8f4f 	dsb	sy
 8103358:	f3bf 8f6f 	isb	sy
 810335c:	e00a      	b.n	8103374 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103360:	2b00      	cmp	r3, #0
 8103362:	d007      	beq.n	8103374 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8103364:	4b39      	ldr	r3, [pc, #228]	; (810344c <xQueueGenericSend+0x1f8>)
 8103366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810336a:	601a      	str	r2, [r3, #0]
 810336c:	f3bf 8f4f 	dsb	sy
 8103370:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8103374:	f7ff fd0e 	bl	8102d94 <vPortExitCritical>
				return pdPASS;
 8103378:	2301      	movs	r3, #1
 810337a:	e063      	b.n	8103444 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	2b00      	cmp	r3, #0
 8103380:	d103      	bne.n	810338a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8103382:	f7ff fd07 	bl	8102d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8103386:	2300      	movs	r3, #0
 8103388:	e05c      	b.n	8103444 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 810338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810338c:	2b00      	cmp	r3, #0
 810338e:	d106      	bne.n	810339e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8103390:	f107 0314 	add.w	r3, r7, #20
 8103394:	4618      	mov	r0, r3
 8103396:	f001 fb31 	bl	81049fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810339a:	2301      	movs	r3, #1
 810339c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810339e:	f7ff fcf9 	bl	8102d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81033a2:	f001 f877 	bl	8104494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81033a6:	f7ff fcc5 	bl	8102d34 <vPortEnterCritical>
 81033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81033ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81033b0:	b25b      	sxtb	r3, r3
 81033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81033b6:	d103      	bne.n	81033c0 <xQueueGenericSend+0x16c>
 81033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81033ba:	2200      	movs	r2, #0
 81033bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81033c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81033c6:	b25b      	sxtb	r3, r3
 81033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81033cc:	d103      	bne.n	81033d6 <xQueueGenericSend+0x182>
 81033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81033d0:	2200      	movs	r2, #0
 81033d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81033d6:	f7ff fcdd 	bl	8102d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81033da:	1d3a      	adds	r2, r7, #4
 81033dc:	f107 0314 	add.w	r3, r7, #20
 81033e0:	4611      	mov	r1, r2
 81033e2:	4618      	mov	r0, r3
 81033e4:	f001 fb20 	bl	8104a28 <xTaskCheckForTimeOut>
 81033e8:	4603      	mov	r3, r0
 81033ea:	2b00      	cmp	r3, #0
 81033ec:	d124      	bne.n	8103438 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 81033ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81033f0:	f000 fbc6 	bl	8103b80 <prvIsQueueFull>
 81033f4:	4603      	mov	r3, r0
 81033f6:	2b00      	cmp	r3, #0
 81033f8:	d018      	beq.n	810342c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 81033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81033fc:	3310      	adds	r3, #16
 81033fe:	687a      	ldr	r2, [r7, #4]
 8103400:	4611      	mov	r1, r2
 8103402:	4618      	mov	r0, r3
 8103404:	f001 fa20 	bl	8104848 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8103408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810340a:	f000 fb51 	bl	8103ab0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810340e:	f001 f84f 	bl	81044b0 <xTaskResumeAll>
 8103412:	4603      	mov	r3, r0
 8103414:	2b00      	cmp	r3, #0
 8103416:	f47f af7c 	bne.w	8103312 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 810341a:	4b0c      	ldr	r3, [pc, #48]	; (810344c <xQueueGenericSend+0x1f8>)
 810341c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103420:	601a      	str	r2, [r3, #0]
 8103422:	f3bf 8f4f 	dsb	sy
 8103426:	f3bf 8f6f 	isb	sy
 810342a:	e772      	b.n	8103312 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810342c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810342e:	f000 fb3f 	bl	8103ab0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8103432:	f001 f83d 	bl	81044b0 <xTaskResumeAll>
 8103436:	e76c      	b.n	8103312 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8103438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810343a:	f000 fb39 	bl	8103ab0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810343e:	f001 f837 	bl	81044b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8103442:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8103444:	4618      	mov	r0, r3
 8103446:	3738      	adds	r7, #56	; 0x38
 8103448:	46bd      	mov	sp, r7
 810344a:	bd80      	pop	{r7, pc}
 810344c:	e000ed04 	.word	0xe000ed04

08103450 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8103450:	b580      	push	{r7, lr}
 8103452:	b090      	sub	sp, #64	; 0x40
 8103454:	af00      	add	r7, sp, #0
 8103456:	60f8      	str	r0, [r7, #12]
 8103458:	60b9      	str	r1, [r7, #8]
 810345a:	607a      	str	r2, [r7, #4]
 810345c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810345e:	68fb      	ldr	r3, [r7, #12]
 8103460:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8103462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103464:	2b00      	cmp	r3, #0
 8103466:	d10a      	bne.n	810347e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8103468:	f04f 0350 	mov.w	r3, #80	; 0x50
 810346c:	f383 8811 	msr	BASEPRI, r3
 8103470:	f3bf 8f6f 	isb	sy
 8103474:	f3bf 8f4f 	dsb	sy
 8103478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810347a:	bf00      	nop
 810347c:	e7fe      	b.n	810347c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810347e:	68bb      	ldr	r3, [r7, #8]
 8103480:	2b00      	cmp	r3, #0
 8103482:	d103      	bne.n	810348c <xQueueGenericSendFromISR+0x3c>
 8103484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103488:	2b00      	cmp	r3, #0
 810348a:	d101      	bne.n	8103490 <xQueueGenericSendFromISR+0x40>
 810348c:	2301      	movs	r3, #1
 810348e:	e000      	b.n	8103492 <xQueueGenericSendFromISR+0x42>
 8103490:	2300      	movs	r3, #0
 8103492:	2b00      	cmp	r3, #0
 8103494:	d10a      	bne.n	81034ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8103496:	f04f 0350 	mov.w	r3, #80	; 0x50
 810349a:	f383 8811 	msr	BASEPRI, r3
 810349e:	f3bf 8f6f 	isb	sy
 81034a2:	f3bf 8f4f 	dsb	sy
 81034a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 81034a8:	bf00      	nop
 81034aa:	e7fe      	b.n	81034aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81034ac:	683b      	ldr	r3, [r7, #0]
 81034ae:	2b02      	cmp	r3, #2
 81034b0:	d103      	bne.n	81034ba <xQueueGenericSendFromISR+0x6a>
 81034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81034b6:	2b01      	cmp	r3, #1
 81034b8:	d101      	bne.n	81034be <xQueueGenericSendFromISR+0x6e>
 81034ba:	2301      	movs	r3, #1
 81034bc:	e000      	b.n	81034c0 <xQueueGenericSendFromISR+0x70>
 81034be:	2300      	movs	r3, #0
 81034c0:	2b00      	cmp	r3, #0
 81034c2:	d10a      	bne.n	81034da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 81034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81034c8:	f383 8811 	msr	BASEPRI, r3
 81034cc:	f3bf 8f6f 	isb	sy
 81034d0:	f3bf 8f4f 	dsb	sy
 81034d4:	623b      	str	r3, [r7, #32]
}
 81034d6:	bf00      	nop
 81034d8:	e7fe      	b.n	81034d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81034da:	f7ff fd0d 	bl	8102ef8 <vPortValidateInterruptPriority>
	__asm volatile
 81034de:	f3ef 8211 	mrs	r2, BASEPRI
 81034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81034e6:	f383 8811 	msr	BASEPRI, r3
 81034ea:	f3bf 8f6f 	isb	sy
 81034ee:	f3bf 8f4f 	dsb	sy
 81034f2:	61fa      	str	r2, [r7, #28]
 81034f4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 81034f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81034f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81034fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81034fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103502:	429a      	cmp	r2, r3
 8103504:	d302      	bcc.n	810350c <xQueueGenericSendFromISR+0xbc>
 8103506:	683b      	ldr	r3, [r7, #0]
 8103508:	2b02      	cmp	r3, #2
 810350a:	d12f      	bne.n	810356c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810350c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810350e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8103512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8103516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810351a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810351c:	683a      	ldr	r2, [r7, #0]
 810351e:	68b9      	ldr	r1, [r7, #8]
 8103520:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8103522:	f000 fa35 	bl	8103990 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8103526:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 810352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810352e:	d112      	bne.n	8103556 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8103530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103534:	2b00      	cmp	r3, #0
 8103536:	d016      	beq.n	8103566 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8103538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810353a:	3324      	adds	r3, #36	; 0x24
 810353c:	4618      	mov	r0, r3
 810353e:	f001 f9d3 	bl	81048e8 <xTaskRemoveFromEventList>
 8103542:	4603      	mov	r3, r0
 8103544:	2b00      	cmp	r3, #0
 8103546:	d00e      	beq.n	8103566 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	2b00      	cmp	r3, #0
 810354c:	d00b      	beq.n	8103566 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810354e:	687b      	ldr	r3, [r7, #4]
 8103550:	2201      	movs	r2, #1
 8103552:	601a      	str	r2, [r3, #0]
 8103554:	e007      	b.n	8103566 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8103556:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810355a:	3301      	adds	r3, #1
 810355c:	b2db      	uxtb	r3, r3
 810355e:	b25a      	sxtb	r2, r3
 8103560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8103566:	2301      	movs	r3, #1
 8103568:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 810356a:	e001      	b.n	8103570 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810356c:	2300      	movs	r3, #0
 810356e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8103570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103572:	617b      	str	r3, [r7, #20]
	__asm volatile
 8103574:	697b      	ldr	r3, [r7, #20]
 8103576:	f383 8811 	msr	BASEPRI, r3
}
 810357a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810357e:	4618      	mov	r0, r3
 8103580:	3740      	adds	r7, #64	; 0x40
 8103582:	46bd      	mov	sp, r7
 8103584:	bd80      	pop	{r7, pc}
	...

08103588 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8103588:	b580      	push	{r7, lr}
 810358a:	b08c      	sub	sp, #48	; 0x30
 810358c:	af00      	add	r7, sp, #0
 810358e:	60f8      	str	r0, [r7, #12]
 8103590:	60b9      	str	r1, [r7, #8]
 8103592:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8103594:	2300      	movs	r3, #0
 8103596:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8103598:	68fb      	ldr	r3, [r7, #12]
 810359a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810359e:	2b00      	cmp	r3, #0
 81035a0:	d10a      	bne.n	81035b8 <xQueueReceive+0x30>
	__asm volatile
 81035a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81035a6:	f383 8811 	msr	BASEPRI, r3
 81035aa:	f3bf 8f6f 	isb	sy
 81035ae:	f3bf 8f4f 	dsb	sy
 81035b2:	623b      	str	r3, [r7, #32]
}
 81035b4:	bf00      	nop
 81035b6:	e7fe      	b.n	81035b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81035b8:	68bb      	ldr	r3, [r7, #8]
 81035ba:	2b00      	cmp	r3, #0
 81035bc:	d103      	bne.n	81035c6 <xQueueReceive+0x3e>
 81035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81035c2:	2b00      	cmp	r3, #0
 81035c4:	d101      	bne.n	81035ca <xQueueReceive+0x42>
 81035c6:	2301      	movs	r3, #1
 81035c8:	e000      	b.n	81035cc <xQueueReceive+0x44>
 81035ca:	2300      	movs	r3, #0
 81035cc:	2b00      	cmp	r3, #0
 81035ce:	d10a      	bne.n	81035e6 <xQueueReceive+0x5e>
	__asm volatile
 81035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81035d4:	f383 8811 	msr	BASEPRI, r3
 81035d8:	f3bf 8f6f 	isb	sy
 81035dc:	f3bf 8f4f 	dsb	sy
 81035e0:	61fb      	str	r3, [r7, #28]
}
 81035e2:	bf00      	nop
 81035e4:	e7fe      	b.n	81035e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81035e6:	f001 fb77 	bl	8104cd8 <xTaskGetSchedulerState>
 81035ea:	4603      	mov	r3, r0
 81035ec:	2b00      	cmp	r3, #0
 81035ee:	d102      	bne.n	81035f6 <xQueueReceive+0x6e>
 81035f0:	687b      	ldr	r3, [r7, #4]
 81035f2:	2b00      	cmp	r3, #0
 81035f4:	d101      	bne.n	81035fa <xQueueReceive+0x72>
 81035f6:	2301      	movs	r3, #1
 81035f8:	e000      	b.n	81035fc <xQueueReceive+0x74>
 81035fa:	2300      	movs	r3, #0
 81035fc:	2b00      	cmp	r3, #0
 81035fe:	d10a      	bne.n	8103616 <xQueueReceive+0x8e>
	__asm volatile
 8103600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103604:	f383 8811 	msr	BASEPRI, r3
 8103608:	f3bf 8f6f 	isb	sy
 810360c:	f3bf 8f4f 	dsb	sy
 8103610:	61bb      	str	r3, [r7, #24]
}
 8103612:	bf00      	nop
 8103614:	e7fe      	b.n	8103614 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8103616:	f7ff fb8d 	bl	8102d34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810361e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8103620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103622:	2b00      	cmp	r3, #0
 8103624:	d01f      	beq.n	8103666 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8103626:	68b9      	ldr	r1, [r7, #8]
 8103628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810362a:	f000 fa1b 	bl	8103a64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103630:	1e5a      	subs	r2, r3, #1
 8103632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103634:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8103636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103638:	691b      	ldr	r3, [r3, #16]
 810363a:	2b00      	cmp	r3, #0
 810363c:	d00f      	beq.n	810365e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103640:	3310      	adds	r3, #16
 8103642:	4618      	mov	r0, r3
 8103644:	f001 f950 	bl	81048e8 <xTaskRemoveFromEventList>
 8103648:	4603      	mov	r3, r0
 810364a:	2b00      	cmp	r3, #0
 810364c:	d007      	beq.n	810365e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810364e:	4b3d      	ldr	r3, [pc, #244]	; (8103744 <xQueueReceive+0x1bc>)
 8103650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103654:	601a      	str	r2, [r3, #0]
 8103656:	f3bf 8f4f 	dsb	sy
 810365a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810365e:	f7ff fb99 	bl	8102d94 <vPortExitCritical>
				return pdPASS;
 8103662:	2301      	movs	r3, #1
 8103664:	e069      	b.n	810373a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	2b00      	cmp	r3, #0
 810366a:	d103      	bne.n	8103674 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810366c:	f7ff fb92 	bl	8102d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8103670:	2300      	movs	r3, #0
 8103672:	e062      	b.n	810373a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8103674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103676:	2b00      	cmp	r3, #0
 8103678:	d106      	bne.n	8103688 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810367a:	f107 0310 	add.w	r3, r7, #16
 810367e:	4618      	mov	r0, r3
 8103680:	f001 f9bc 	bl	81049fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8103684:	2301      	movs	r3, #1
 8103686:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8103688:	f7ff fb84 	bl	8102d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810368c:	f000 ff02 	bl	8104494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8103690:	f7ff fb50 	bl	8102d34 <vPortEnterCritical>
 8103694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810369a:	b25b      	sxtb	r3, r3
 810369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 81036a0:	d103      	bne.n	81036aa <xQueueReceive+0x122>
 81036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81036a4:	2200      	movs	r2, #0
 81036a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81036ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81036b0:	b25b      	sxtb	r3, r3
 81036b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81036b6:	d103      	bne.n	81036c0 <xQueueReceive+0x138>
 81036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81036ba:	2200      	movs	r2, #0
 81036bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81036c0:	f7ff fb68 	bl	8102d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81036c4:	1d3a      	adds	r2, r7, #4
 81036c6:	f107 0310 	add.w	r3, r7, #16
 81036ca:	4611      	mov	r1, r2
 81036cc:	4618      	mov	r0, r3
 81036ce:	f001 f9ab 	bl	8104a28 <xTaskCheckForTimeOut>
 81036d2:	4603      	mov	r3, r0
 81036d4:	2b00      	cmp	r3, #0
 81036d6:	d123      	bne.n	8103720 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81036d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81036da:	f000 fa3b 	bl	8103b54 <prvIsQueueEmpty>
 81036de:	4603      	mov	r3, r0
 81036e0:	2b00      	cmp	r3, #0
 81036e2:	d017      	beq.n	8103714 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81036e6:	3324      	adds	r3, #36	; 0x24
 81036e8:	687a      	ldr	r2, [r7, #4]
 81036ea:	4611      	mov	r1, r2
 81036ec:	4618      	mov	r0, r3
 81036ee:	f001 f8ab 	bl	8104848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81036f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81036f4:	f000 f9dc 	bl	8103ab0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81036f8:	f000 feda 	bl	81044b0 <xTaskResumeAll>
 81036fc:	4603      	mov	r3, r0
 81036fe:	2b00      	cmp	r3, #0
 8103700:	d189      	bne.n	8103616 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8103702:	4b10      	ldr	r3, [pc, #64]	; (8103744 <xQueueReceive+0x1bc>)
 8103704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103708:	601a      	str	r2, [r3, #0]
 810370a:	f3bf 8f4f 	dsb	sy
 810370e:	f3bf 8f6f 	isb	sy
 8103712:	e780      	b.n	8103616 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8103714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103716:	f000 f9cb 	bl	8103ab0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810371a:	f000 fec9 	bl	81044b0 <xTaskResumeAll>
 810371e:	e77a      	b.n	8103616 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8103720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103722:	f000 f9c5 	bl	8103ab0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8103726:	f000 fec3 	bl	81044b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810372a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810372c:	f000 fa12 	bl	8103b54 <prvIsQueueEmpty>
 8103730:	4603      	mov	r3, r0
 8103732:	2b00      	cmp	r3, #0
 8103734:	f43f af6f 	beq.w	8103616 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8103738:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810373a:	4618      	mov	r0, r3
 810373c:	3730      	adds	r7, #48	; 0x30
 810373e:	46bd      	mov	sp, r7
 8103740:	bd80      	pop	{r7, pc}
 8103742:	bf00      	nop
 8103744:	e000ed04 	.word	0xe000ed04

08103748 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8103748:	b580      	push	{r7, lr}
 810374a:	b08e      	sub	sp, #56	; 0x38
 810374c:	af00      	add	r7, sp, #0
 810374e:	6078      	str	r0, [r7, #4]
 8103750:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8103752:	2300      	movs	r3, #0
 8103754:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 810375a:	2300      	movs	r3, #0
 810375c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103760:	2b00      	cmp	r3, #0
 8103762:	d10a      	bne.n	810377a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8103764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103768:	f383 8811 	msr	BASEPRI, r3
 810376c:	f3bf 8f6f 	isb	sy
 8103770:	f3bf 8f4f 	dsb	sy
 8103774:	623b      	str	r3, [r7, #32]
}
 8103776:	bf00      	nop
 8103778:	e7fe      	b.n	8103778 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810377e:	2b00      	cmp	r3, #0
 8103780:	d00a      	beq.n	8103798 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8103782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103786:	f383 8811 	msr	BASEPRI, r3
 810378a:	f3bf 8f6f 	isb	sy
 810378e:	f3bf 8f4f 	dsb	sy
 8103792:	61fb      	str	r3, [r7, #28]
}
 8103794:	bf00      	nop
 8103796:	e7fe      	b.n	8103796 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8103798:	f001 fa9e 	bl	8104cd8 <xTaskGetSchedulerState>
 810379c:	4603      	mov	r3, r0
 810379e:	2b00      	cmp	r3, #0
 81037a0:	d102      	bne.n	81037a8 <xQueueSemaphoreTake+0x60>
 81037a2:	683b      	ldr	r3, [r7, #0]
 81037a4:	2b00      	cmp	r3, #0
 81037a6:	d101      	bne.n	81037ac <xQueueSemaphoreTake+0x64>
 81037a8:	2301      	movs	r3, #1
 81037aa:	e000      	b.n	81037ae <xQueueSemaphoreTake+0x66>
 81037ac:	2300      	movs	r3, #0
 81037ae:	2b00      	cmp	r3, #0
 81037b0:	d10a      	bne.n	81037c8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 81037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81037b6:	f383 8811 	msr	BASEPRI, r3
 81037ba:	f3bf 8f6f 	isb	sy
 81037be:	f3bf 8f4f 	dsb	sy
 81037c2:	61bb      	str	r3, [r7, #24]
}
 81037c4:	bf00      	nop
 81037c6:	e7fe      	b.n	81037c6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81037c8:	f7ff fab4 	bl	8102d34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 81037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81037d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 81037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037d4:	2b00      	cmp	r3, #0
 81037d6:	d024      	beq.n	8103822 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 81037d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037da:	1e5a      	subs	r2, r3, #1
 81037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81037de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	2b00      	cmp	r3, #0
 81037e6:	d104      	bne.n	81037f2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 81037e8:	f001 fbec 	bl	8104fc4 <pvTaskIncrementMutexHeldCount>
 81037ec:	4602      	mov	r2, r0
 81037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81037f0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81037f4:	691b      	ldr	r3, [r3, #16]
 81037f6:	2b00      	cmp	r3, #0
 81037f8:	d00f      	beq.n	810381a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81037fc:	3310      	adds	r3, #16
 81037fe:	4618      	mov	r0, r3
 8103800:	f001 f872 	bl	81048e8 <xTaskRemoveFromEventList>
 8103804:	4603      	mov	r3, r0
 8103806:	2b00      	cmp	r3, #0
 8103808:	d007      	beq.n	810381a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810380a:	4b54      	ldr	r3, [pc, #336]	; (810395c <xQueueSemaphoreTake+0x214>)
 810380c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103810:	601a      	str	r2, [r3, #0]
 8103812:	f3bf 8f4f 	dsb	sy
 8103816:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810381a:	f7ff fabb 	bl	8102d94 <vPortExitCritical>
				return pdPASS;
 810381e:	2301      	movs	r3, #1
 8103820:	e097      	b.n	8103952 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8103822:	683b      	ldr	r3, [r7, #0]
 8103824:	2b00      	cmp	r3, #0
 8103826:	d111      	bne.n	810384c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8103828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810382a:	2b00      	cmp	r3, #0
 810382c:	d00a      	beq.n	8103844 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 810382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103832:	f383 8811 	msr	BASEPRI, r3
 8103836:	f3bf 8f6f 	isb	sy
 810383a:	f3bf 8f4f 	dsb	sy
 810383e:	617b      	str	r3, [r7, #20]
}
 8103840:	bf00      	nop
 8103842:	e7fe      	b.n	8103842 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8103844:	f7ff faa6 	bl	8102d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8103848:	2300      	movs	r3, #0
 810384a:	e082      	b.n	8103952 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 810384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810384e:	2b00      	cmp	r3, #0
 8103850:	d106      	bne.n	8103860 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8103852:	f107 030c 	add.w	r3, r7, #12
 8103856:	4618      	mov	r0, r3
 8103858:	f001 f8d0 	bl	81049fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810385c:	2301      	movs	r3, #1
 810385e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8103860:	f7ff fa98 	bl	8102d94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8103864:	f000 fe16 	bl	8104494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8103868:	f7ff fa64 	bl	8102d34 <vPortEnterCritical>
 810386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810386e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8103872:	b25b      	sxtb	r3, r3
 8103874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103878:	d103      	bne.n	8103882 <xQueueSemaphoreTake+0x13a>
 810387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810387c:	2200      	movs	r2, #0
 810387e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8103888:	b25b      	sxtb	r3, r3
 810388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810388e:	d103      	bne.n	8103898 <xQueueSemaphoreTake+0x150>
 8103890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103892:	2200      	movs	r2, #0
 8103894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103898:	f7ff fa7c 	bl	8102d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810389c:	463a      	mov	r2, r7
 810389e:	f107 030c 	add.w	r3, r7, #12
 81038a2:	4611      	mov	r1, r2
 81038a4:	4618      	mov	r0, r3
 81038a6:	f001 f8bf 	bl	8104a28 <xTaskCheckForTimeOut>
 81038aa:	4603      	mov	r3, r0
 81038ac:	2b00      	cmp	r3, #0
 81038ae:	d132      	bne.n	8103916 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81038b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81038b2:	f000 f94f 	bl	8103b54 <prvIsQueueEmpty>
 81038b6:	4603      	mov	r3, r0
 81038b8:	2b00      	cmp	r3, #0
 81038ba:	d026      	beq.n	810390a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	2b00      	cmp	r3, #0
 81038c2:	d109      	bne.n	81038d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 81038c4:	f7ff fa36 	bl	8102d34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 81038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81038ca:	689b      	ldr	r3, [r3, #8]
 81038cc:	4618      	mov	r0, r3
 81038ce:	f001 fa21 	bl	8104d14 <xTaskPriorityInherit>
 81038d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 81038d4:	f7ff fa5e 	bl	8102d94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81038da:	3324      	adds	r3, #36	; 0x24
 81038dc:	683a      	ldr	r2, [r7, #0]
 81038de:	4611      	mov	r1, r2
 81038e0:	4618      	mov	r0, r3
 81038e2:	f000 ffb1 	bl	8104848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81038e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81038e8:	f000 f8e2 	bl	8103ab0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81038ec:	f000 fde0 	bl	81044b0 <xTaskResumeAll>
 81038f0:	4603      	mov	r3, r0
 81038f2:	2b00      	cmp	r3, #0
 81038f4:	f47f af68 	bne.w	81037c8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 81038f8:	4b18      	ldr	r3, [pc, #96]	; (810395c <xQueueSemaphoreTake+0x214>)
 81038fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81038fe:	601a      	str	r2, [r3, #0]
 8103900:	f3bf 8f4f 	dsb	sy
 8103904:	f3bf 8f6f 	isb	sy
 8103908:	e75e      	b.n	81037c8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 810390a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810390c:	f000 f8d0 	bl	8103ab0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8103910:	f000 fdce 	bl	81044b0 <xTaskResumeAll>
 8103914:	e758      	b.n	81037c8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8103916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8103918:	f000 f8ca 	bl	8103ab0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810391c:	f000 fdc8 	bl	81044b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8103920:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8103922:	f000 f917 	bl	8103b54 <prvIsQueueEmpty>
 8103926:	4603      	mov	r3, r0
 8103928:	2b00      	cmp	r3, #0
 810392a:	f43f af4d 	beq.w	81037c8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 810392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103930:	2b00      	cmp	r3, #0
 8103932:	d00d      	beq.n	8103950 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8103934:	f7ff f9fe 	bl	8102d34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8103938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810393a:	f000 f811 	bl	8103960 <prvGetDisinheritPriorityAfterTimeout>
 810393e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8103940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103942:	689b      	ldr	r3, [r3, #8]
 8103944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8103946:	4618      	mov	r0, r3
 8103948:	f001 faba 	bl	8104ec0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 810394c:	f7ff fa22 	bl	8102d94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8103950:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8103952:	4618      	mov	r0, r3
 8103954:	3738      	adds	r7, #56	; 0x38
 8103956:	46bd      	mov	sp, r7
 8103958:	bd80      	pop	{r7, pc}
 810395a:	bf00      	nop
 810395c:	e000ed04 	.word	0xe000ed04

08103960 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8103960:	b480      	push	{r7}
 8103962:	b085      	sub	sp, #20
 8103964:	af00      	add	r7, sp, #0
 8103966:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810396c:	2b00      	cmp	r3, #0
 810396e:	d006      	beq.n	810397e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103974:	681b      	ldr	r3, [r3, #0]
 8103976:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 810397a:	60fb      	str	r3, [r7, #12]
 810397c:	e001      	b.n	8103982 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 810397e:	2300      	movs	r3, #0
 8103980:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8103982:	68fb      	ldr	r3, [r7, #12]
	}
 8103984:	4618      	mov	r0, r3
 8103986:	3714      	adds	r7, #20
 8103988:	46bd      	mov	sp, r7
 810398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810398e:	4770      	bx	lr

08103990 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8103990:	b580      	push	{r7, lr}
 8103992:	b086      	sub	sp, #24
 8103994:	af00      	add	r7, sp, #0
 8103996:	60f8      	str	r0, [r7, #12]
 8103998:	60b9      	str	r1, [r7, #8]
 810399a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810399c:	2300      	movs	r3, #0
 810399e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81039a0:	68fb      	ldr	r3, [r7, #12]
 81039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81039a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 81039a6:	68fb      	ldr	r3, [r7, #12]
 81039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81039aa:	2b00      	cmp	r3, #0
 81039ac:	d10d      	bne.n	81039ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81039ae:	68fb      	ldr	r3, [r7, #12]
 81039b0:	681b      	ldr	r3, [r3, #0]
 81039b2:	2b00      	cmp	r3, #0
 81039b4:	d14d      	bne.n	8103a52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 81039b6:	68fb      	ldr	r3, [r7, #12]
 81039b8:	689b      	ldr	r3, [r3, #8]
 81039ba:	4618      	mov	r0, r3
 81039bc:	f001 fa12 	bl	8104de4 <xTaskPriorityDisinherit>
 81039c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 81039c2:	68fb      	ldr	r3, [r7, #12]
 81039c4:	2200      	movs	r2, #0
 81039c6:	609a      	str	r2, [r3, #8]
 81039c8:	e043      	b.n	8103a52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	2b00      	cmp	r3, #0
 81039ce:	d119      	bne.n	8103a04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81039d0:	68fb      	ldr	r3, [r7, #12]
 81039d2:	6858      	ldr	r0, [r3, #4]
 81039d4:	68fb      	ldr	r3, [r7, #12]
 81039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81039d8:	461a      	mov	r2, r3
 81039da:	68b9      	ldr	r1, [r7, #8]
 81039dc:	f002 f812 	bl	8105a04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81039e0:	68fb      	ldr	r3, [r7, #12]
 81039e2:	685a      	ldr	r2, [r3, #4]
 81039e4:	68fb      	ldr	r3, [r7, #12]
 81039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81039e8:	441a      	add	r2, r3
 81039ea:	68fb      	ldr	r3, [r7, #12]
 81039ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81039ee:	68fb      	ldr	r3, [r7, #12]
 81039f0:	685a      	ldr	r2, [r3, #4]
 81039f2:	68fb      	ldr	r3, [r7, #12]
 81039f4:	689b      	ldr	r3, [r3, #8]
 81039f6:	429a      	cmp	r2, r3
 81039f8:	d32b      	bcc.n	8103a52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 81039fa:	68fb      	ldr	r3, [r7, #12]
 81039fc:	681a      	ldr	r2, [r3, #0]
 81039fe:	68fb      	ldr	r3, [r7, #12]
 8103a00:	605a      	str	r2, [r3, #4]
 8103a02:	e026      	b.n	8103a52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8103a04:	68fb      	ldr	r3, [r7, #12]
 8103a06:	68d8      	ldr	r0, [r3, #12]
 8103a08:	68fb      	ldr	r3, [r7, #12]
 8103a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a0c:	461a      	mov	r2, r3
 8103a0e:	68b9      	ldr	r1, [r7, #8]
 8103a10:	f001 fff8 	bl	8105a04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8103a14:	68fb      	ldr	r3, [r7, #12]
 8103a16:	68da      	ldr	r2, [r3, #12]
 8103a18:	68fb      	ldr	r3, [r7, #12]
 8103a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a1c:	425b      	negs	r3, r3
 8103a1e:	441a      	add	r2, r3
 8103a20:	68fb      	ldr	r3, [r7, #12]
 8103a22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8103a24:	68fb      	ldr	r3, [r7, #12]
 8103a26:	68da      	ldr	r2, [r3, #12]
 8103a28:	68fb      	ldr	r3, [r7, #12]
 8103a2a:	681b      	ldr	r3, [r3, #0]
 8103a2c:	429a      	cmp	r2, r3
 8103a2e:	d207      	bcs.n	8103a40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8103a30:	68fb      	ldr	r3, [r7, #12]
 8103a32:	689a      	ldr	r2, [r3, #8]
 8103a34:	68fb      	ldr	r3, [r7, #12]
 8103a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a38:	425b      	negs	r3, r3
 8103a3a:	441a      	add	r2, r3
 8103a3c:	68fb      	ldr	r3, [r7, #12]
 8103a3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8103a40:	687b      	ldr	r3, [r7, #4]
 8103a42:	2b02      	cmp	r3, #2
 8103a44:	d105      	bne.n	8103a52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8103a46:	693b      	ldr	r3, [r7, #16]
 8103a48:	2b00      	cmp	r3, #0
 8103a4a:	d002      	beq.n	8103a52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8103a4c:	693b      	ldr	r3, [r7, #16]
 8103a4e:	3b01      	subs	r3, #1
 8103a50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8103a52:	693b      	ldr	r3, [r7, #16]
 8103a54:	1c5a      	adds	r2, r3, #1
 8103a56:	68fb      	ldr	r3, [r7, #12]
 8103a58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8103a5a:	697b      	ldr	r3, [r7, #20]
}
 8103a5c:	4618      	mov	r0, r3
 8103a5e:	3718      	adds	r7, #24
 8103a60:	46bd      	mov	sp, r7
 8103a62:	bd80      	pop	{r7, pc}

08103a64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8103a64:	b580      	push	{r7, lr}
 8103a66:	b082      	sub	sp, #8
 8103a68:	af00      	add	r7, sp, #0
 8103a6a:	6078      	str	r0, [r7, #4]
 8103a6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a72:	2b00      	cmp	r3, #0
 8103a74:	d018      	beq.n	8103aa8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8103a76:	687b      	ldr	r3, [r7, #4]
 8103a78:	68da      	ldr	r2, [r3, #12]
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a7e:	441a      	add	r2, r3
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	68da      	ldr	r2, [r3, #12]
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	689b      	ldr	r3, [r3, #8]
 8103a8c:	429a      	cmp	r2, r3
 8103a8e:	d303      	bcc.n	8103a98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8103a90:	687b      	ldr	r3, [r7, #4]
 8103a92:	681a      	ldr	r2, [r3, #0]
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8103a98:	687b      	ldr	r3, [r7, #4]
 8103a9a:	68d9      	ldr	r1, [r3, #12]
 8103a9c:	687b      	ldr	r3, [r7, #4]
 8103a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103aa0:	461a      	mov	r2, r3
 8103aa2:	6838      	ldr	r0, [r7, #0]
 8103aa4:	f001 ffae 	bl	8105a04 <memcpy>
	}
}
 8103aa8:	bf00      	nop
 8103aaa:	3708      	adds	r7, #8
 8103aac:	46bd      	mov	sp, r7
 8103aae:	bd80      	pop	{r7, pc}

08103ab0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8103ab0:	b580      	push	{r7, lr}
 8103ab2:	b084      	sub	sp, #16
 8103ab4:	af00      	add	r7, sp, #0
 8103ab6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8103ab8:	f7ff f93c 	bl	8102d34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8103abc:	687b      	ldr	r3, [r7, #4]
 8103abe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8103ac2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8103ac4:	e011      	b.n	8103aea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8103ac6:	687b      	ldr	r3, [r7, #4]
 8103ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103aca:	2b00      	cmp	r3, #0
 8103acc:	d012      	beq.n	8103af4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8103ace:	687b      	ldr	r3, [r7, #4]
 8103ad0:	3324      	adds	r3, #36	; 0x24
 8103ad2:	4618      	mov	r0, r3
 8103ad4:	f000 ff08 	bl	81048e8 <xTaskRemoveFromEventList>
 8103ad8:	4603      	mov	r3, r0
 8103ada:	2b00      	cmp	r3, #0
 8103adc:	d001      	beq.n	8103ae2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8103ade:	f001 f805 	bl	8104aec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8103ae2:	7bfb      	ldrb	r3, [r7, #15]
 8103ae4:	3b01      	subs	r3, #1
 8103ae6:	b2db      	uxtb	r3, r3
 8103ae8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8103aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8103aee:	2b00      	cmp	r3, #0
 8103af0:	dce9      	bgt.n	8103ac6 <prvUnlockQueue+0x16>
 8103af2:	e000      	b.n	8103af6 <prvUnlockQueue+0x46>
					break;
 8103af4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	22ff      	movs	r2, #255	; 0xff
 8103afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8103afe:	f7ff f949 	bl	8102d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8103b02:	f7ff f917 	bl	8102d34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8103b0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8103b0e:	e011      	b.n	8103b34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	691b      	ldr	r3, [r3, #16]
 8103b14:	2b00      	cmp	r3, #0
 8103b16:	d012      	beq.n	8103b3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	3310      	adds	r3, #16
 8103b1c:	4618      	mov	r0, r3
 8103b1e:	f000 fee3 	bl	81048e8 <xTaskRemoveFromEventList>
 8103b22:	4603      	mov	r3, r0
 8103b24:	2b00      	cmp	r3, #0
 8103b26:	d001      	beq.n	8103b2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8103b28:	f000 ffe0 	bl	8104aec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8103b2c:	7bbb      	ldrb	r3, [r7, #14]
 8103b2e:	3b01      	subs	r3, #1
 8103b30:	b2db      	uxtb	r3, r3
 8103b32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8103b34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8103b38:	2b00      	cmp	r3, #0
 8103b3a:	dce9      	bgt.n	8103b10 <prvUnlockQueue+0x60>
 8103b3c:	e000      	b.n	8103b40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8103b3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	22ff      	movs	r2, #255	; 0xff
 8103b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8103b48:	f7ff f924 	bl	8102d94 <vPortExitCritical>
}
 8103b4c:	bf00      	nop
 8103b4e:	3710      	adds	r7, #16
 8103b50:	46bd      	mov	sp, r7
 8103b52:	bd80      	pop	{r7, pc}

08103b54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8103b54:	b580      	push	{r7, lr}
 8103b56:	b084      	sub	sp, #16
 8103b58:	af00      	add	r7, sp, #0
 8103b5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8103b5c:	f7ff f8ea 	bl	8102d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8103b60:	687b      	ldr	r3, [r7, #4]
 8103b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103b64:	2b00      	cmp	r3, #0
 8103b66:	d102      	bne.n	8103b6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8103b68:	2301      	movs	r3, #1
 8103b6a:	60fb      	str	r3, [r7, #12]
 8103b6c:	e001      	b.n	8103b72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8103b6e:	2300      	movs	r3, #0
 8103b70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8103b72:	f7ff f90f 	bl	8102d94 <vPortExitCritical>

	return xReturn;
 8103b76:	68fb      	ldr	r3, [r7, #12]
}
 8103b78:	4618      	mov	r0, r3
 8103b7a:	3710      	adds	r7, #16
 8103b7c:	46bd      	mov	sp, r7
 8103b7e:	bd80      	pop	{r7, pc}

08103b80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8103b80:	b580      	push	{r7, lr}
 8103b82:	b084      	sub	sp, #16
 8103b84:	af00      	add	r7, sp, #0
 8103b86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8103b88:	f7ff f8d4 	bl	8102d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8103b8c:	687b      	ldr	r3, [r7, #4]
 8103b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8103b90:	687b      	ldr	r3, [r7, #4]
 8103b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103b94:	429a      	cmp	r2, r3
 8103b96:	d102      	bne.n	8103b9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8103b98:	2301      	movs	r3, #1
 8103b9a:	60fb      	str	r3, [r7, #12]
 8103b9c:	e001      	b.n	8103ba2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8103b9e:	2300      	movs	r3, #0
 8103ba0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8103ba2:	f7ff f8f7 	bl	8102d94 <vPortExitCritical>

	return xReturn;
 8103ba6:	68fb      	ldr	r3, [r7, #12]
}
 8103ba8:	4618      	mov	r0, r3
 8103baa:	3710      	adds	r7, #16
 8103bac:	46bd      	mov	sp, r7
 8103bae:	bd80      	pop	{r7, pc}

08103bb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8103bb0:	b480      	push	{r7}
 8103bb2:	b085      	sub	sp, #20
 8103bb4:	af00      	add	r7, sp, #0
 8103bb6:	6078      	str	r0, [r7, #4]
 8103bb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8103bba:	2300      	movs	r3, #0
 8103bbc:	60fb      	str	r3, [r7, #12]
 8103bbe:	e014      	b.n	8103bea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8103bc0:	4a0f      	ldr	r2, [pc, #60]	; (8103c00 <vQueueAddToRegistry+0x50>)
 8103bc2:	68fb      	ldr	r3, [r7, #12]
 8103bc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8103bc8:	2b00      	cmp	r3, #0
 8103bca:	d10b      	bne.n	8103be4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8103bcc:	490c      	ldr	r1, [pc, #48]	; (8103c00 <vQueueAddToRegistry+0x50>)
 8103bce:	68fb      	ldr	r3, [r7, #12]
 8103bd0:	683a      	ldr	r2, [r7, #0]
 8103bd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8103bd6:	4a0a      	ldr	r2, [pc, #40]	; (8103c00 <vQueueAddToRegistry+0x50>)
 8103bd8:	68fb      	ldr	r3, [r7, #12]
 8103bda:	00db      	lsls	r3, r3, #3
 8103bdc:	4413      	add	r3, r2
 8103bde:	687a      	ldr	r2, [r7, #4]
 8103be0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8103be2:	e006      	b.n	8103bf2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8103be4:	68fb      	ldr	r3, [r7, #12]
 8103be6:	3301      	adds	r3, #1
 8103be8:	60fb      	str	r3, [r7, #12]
 8103bea:	68fb      	ldr	r3, [r7, #12]
 8103bec:	2b07      	cmp	r3, #7
 8103bee:	d9e7      	bls.n	8103bc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8103bf0:	bf00      	nop
 8103bf2:	bf00      	nop
 8103bf4:	3714      	adds	r7, #20
 8103bf6:	46bd      	mov	sp, r7
 8103bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bfc:	4770      	bx	lr
 8103bfe:	bf00      	nop
 8103c00:	100044d8 	.word	0x100044d8

08103c04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8103c04:	b580      	push	{r7, lr}
 8103c06:	b086      	sub	sp, #24
 8103c08:	af00      	add	r7, sp, #0
 8103c0a:	60f8      	str	r0, [r7, #12]
 8103c0c:	60b9      	str	r1, [r7, #8]
 8103c0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8103c10:	68fb      	ldr	r3, [r7, #12]
 8103c12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8103c14:	f7ff f88e 	bl	8102d34 <vPortEnterCritical>
 8103c18:	697b      	ldr	r3, [r7, #20]
 8103c1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8103c1e:	b25b      	sxtb	r3, r3
 8103c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103c24:	d103      	bne.n	8103c2e <vQueueWaitForMessageRestricted+0x2a>
 8103c26:	697b      	ldr	r3, [r7, #20]
 8103c28:	2200      	movs	r2, #0
 8103c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103c2e:	697b      	ldr	r3, [r7, #20]
 8103c30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8103c34:	b25b      	sxtb	r3, r3
 8103c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103c3a:	d103      	bne.n	8103c44 <vQueueWaitForMessageRestricted+0x40>
 8103c3c:	697b      	ldr	r3, [r7, #20]
 8103c3e:	2200      	movs	r2, #0
 8103c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103c44:	f7ff f8a6 	bl	8102d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8103c48:	697b      	ldr	r3, [r7, #20]
 8103c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103c4c:	2b00      	cmp	r3, #0
 8103c4e:	d106      	bne.n	8103c5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8103c50:	697b      	ldr	r3, [r7, #20]
 8103c52:	3324      	adds	r3, #36	; 0x24
 8103c54:	687a      	ldr	r2, [r7, #4]
 8103c56:	68b9      	ldr	r1, [r7, #8]
 8103c58:	4618      	mov	r0, r3
 8103c5a:	f000 fe19 	bl	8104890 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8103c5e:	6978      	ldr	r0, [r7, #20]
 8103c60:	f7ff ff26 	bl	8103ab0 <prvUnlockQueue>
	}
 8103c64:	bf00      	nop
 8103c66:	3718      	adds	r7, #24
 8103c68:	46bd      	mov	sp, r7
 8103c6a:	bd80      	pop	{r7, pc}

08103c6c <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8103c6c:	b480      	push	{r7}
 8103c6e:	b087      	sub	sp, #28
 8103c70:	af00      	add	r7, sp, #0
 8103c72:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8103c74:	687b      	ldr	r3, [r7, #4]
 8103c76:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8103c78:	693b      	ldr	r3, [r7, #16]
 8103c7a:	2b00      	cmp	r3, #0
 8103c7c:	d10a      	bne.n	8103c94 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8103c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103c82:	f383 8811 	msr	BASEPRI, r3
 8103c86:	f3bf 8f6f 	isb	sy
 8103c8a:	f3bf 8f4f 	dsb	sy
 8103c8e:	60fb      	str	r3, [r7, #12]
}
 8103c90:	bf00      	nop
 8103c92:	e7fe      	b.n	8103c92 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8103c94:	693b      	ldr	r3, [r7, #16]
 8103c96:	689a      	ldr	r2, [r3, #8]
 8103c98:	693b      	ldr	r3, [r7, #16]
 8103c9a:	681b      	ldr	r3, [r3, #0]
 8103c9c:	4413      	add	r3, r2
 8103c9e:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8103ca0:	693b      	ldr	r3, [r7, #16]
 8103ca2:	685b      	ldr	r3, [r3, #4]
 8103ca4:	697a      	ldr	r2, [r7, #20]
 8103ca6:	1ad3      	subs	r3, r2, r3
 8103ca8:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8103caa:	697b      	ldr	r3, [r7, #20]
 8103cac:	3b01      	subs	r3, #1
 8103cae:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8103cb0:	693b      	ldr	r3, [r7, #16]
 8103cb2:	689b      	ldr	r3, [r3, #8]
 8103cb4:	697a      	ldr	r2, [r7, #20]
 8103cb6:	429a      	cmp	r2, r3
 8103cb8:	d304      	bcc.n	8103cc4 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8103cba:	693b      	ldr	r3, [r7, #16]
 8103cbc:	689b      	ldr	r3, [r3, #8]
 8103cbe:	697a      	ldr	r2, [r7, #20]
 8103cc0:	1ad3      	subs	r3, r2, r3
 8103cc2:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8103cc4:	697b      	ldr	r3, [r7, #20]
}
 8103cc6:	4618      	mov	r0, r3
 8103cc8:	371c      	adds	r7, #28
 8103cca:	46bd      	mov	sp, r7
 8103ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cd0:	4770      	bx	lr

08103cd2 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8103cd2:	b580      	push	{r7, lr}
 8103cd4:	b090      	sub	sp, #64	; 0x40
 8103cd6:	af02      	add	r7, sp, #8
 8103cd8:	60f8      	str	r0, [r7, #12]
 8103cda:	60b9      	str	r1, [r7, #8]
 8103cdc:	607a      	str	r2, [r7, #4]
 8103cde:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8103ce0:	68fb      	ldr	r3, [r7, #12]
 8103ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8103ce4:	2300      	movs	r3, #0
 8103ce6:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8103cec:	68bb      	ldr	r3, [r7, #8]
 8103cee:	2b00      	cmp	r3, #0
 8103cf0:	d10a      	bne.n	8103d08 <xStreamBufferSend+0x36>
	__asm volatile
 8103cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103cf6:	f383 8811 	msr	BASEPRI, r3
 8103cfa:	f3bf 8f6f 	isb	sy
 8103cfe:	f3bf 8f4f 	dsb	sy
 8103d02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8103d04:	bf00      	nop
 8103d06:	e7fe      	b.n	8103d06 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8103d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103d0a:	2b00      	cmp	r3, #0
 8103d0c:	d10a      	bne.n	8103d24 <xStreamBufferSend+0x52>
	__asm volatile
 8103d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103d12:	f383 8811 	msr	BASEPRI, r3
 8103d16:	f3bf 8f6f 	isb	sy
 8103d1a:	f3bf 8f4f 	dsb	sy
 8103d1e:	623b      	str	r3, [r7, #32]
}
 8103d20:	bf00      	nop
 8103d22:	e7fe      	b.n	8103d22 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8103d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103d26:	7f1b      	ldrb	r3, [r3, #28]
 8103d28:	f003 0301 	and.w	r3, r3, #1
 8103d2c:	2b00      	cmp	r3, #0
 8103d2e:	d011      	beq.n	8103d54 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8103d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103d32:	3304      	adds	r3, #4
 8103d34:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8103d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	429a      	cmp	r2, r3
 8103d3c:	d80a      	bhi.n	8103d54 <xStreamBufferSend+0x82>
	__asm volatile
 8103d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103d42:	f383 8811 	msr	BASEPRI, r3
 8103d46:	f3bf 8f6f 	isb	sy
 8103d4a:	f3bf 8f4f 	dsb	sy
 8103d4e:	61fb      	str	r3, [r7, #28]
}
 8103d50:	bf00      	nop
 8103d52:	e7fe      	b.n	8103d52 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8103d54:	683b      	ldr	r3, [r7, #0]
 8103d56:	2b00      	cmp	r3, #0
 8103d58:	d03e      	beq.n	8103dd8 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8103d5a:	f107 0310 	add.w	r3, r7, #16
 8103d5e:	4618      	mov	r0, r3
 8103d60:	f000 fe26 	bl	81049b0 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8103d64:	f7fe ffe6 	bl	8102d34 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8103d68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8103d6a:	f7ff ff7f 	bl	8103c6c <xStreamBufferSpacesAvailable>
 8103d6e:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8103d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103d74:	429a      	cmp	r2, r3
 8103d76:	d217      	bcs.n	8103da8 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8103d78:	2000      	movs	r0, #0
 8103d7a:	f001 fa55 	bl	8105228 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8103d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103d80:	695b      	ldr	r3, [r3, #20]
 8103d82:	2b00      	cmp	r3, #0
 8103d84:	d00a      	beq.n	8103d9c <xStreamBufferSend+0xca>
	__asm volatile
 8103d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103d8a:	f383 8811 	msr	BASEPRI, r3
 8103d8e:	f3bf 8f6f 	isb	sy
 8103d92:	f3bf 8f4f 	dsb	sy
 8103d96:	61bb      	str	r3, [r7, #24]
}
 8103d98:	bf00      	nop
 8103d9a:	e7fe      	b.n	8103d9a <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8103d9c:	f000 ff8c 	bl	8104cb8 <xTaskGetCurrentTaskHandle>
 8103da0:	4602      	mov	r2, r0
 8103da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103da4:	615a      	str	r2, [r3, #20]
 8103da6:	e002      	b.n	8103dae <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8103da8:	f7fe fff4 	bl	8102d94 <vPortExitCritical>
					break;
 8103dac:	e014      	b.n	8103dd8 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8103dae:	f7fe fff1 	bl	8102d94 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8103db2:	683b      	ldr	r3, [r7, #0]
 8103db4:	2200      	movs	r2, #0
 8103db6:	2100      	movs	r1, #0
 8103db8:	2000      	movs	r0, #0
 8103dba:	f001 f917 	bl	8104fec <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8103dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103dc0:	2200      	movs	r2, #0
 8103dc2:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8103dc4:	463a      	mov	r2, r7
 8103dc6:	f107 0310 	add.w	r3, r7, #16
 8103dca:	4611      	mov	r1, r2
 8103dcc:	4618      	mov	r0, r3
 8103dce:	f000 fe2b 	bl	8104a28 <xTaskCheckForTimeOut>
 8103dd2:	4603      	mov	r3, r0
 8103dd4:	2b00      	cmp	r3, #0
 8103dd6:	d0c5      	beq.n	8103d64 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8103dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103dda:	2b00      	cmp	r3, #0
 8103ddc:	d103      	bne.n	8103de6 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8103dde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8103de0:	f7ff ff44 	bl	8103c6c <xStreamBufferSpacesAvailable>
 8103de4:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8103de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103de8:	9300      	str	r3, [sp, #0]
 8103dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103dec:	687a      	ldr	r2, [r7, #4]
 8103dee:	68b9      	ldr	r1, [r7, #8]
 8103df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8103df2:	f000 f823 	bl	8103e3c <prvWriteMessageToBuffer>
 8103df6:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8103df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103dfa:	2b00      	cmp	r3, #0
 8103dfc:	d019      	beq.n	8103e32 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8103dfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8103e00:	f000 f8cb 	bl	8103f9a <prvBytesInBuffer>
 8103e04:	4602      	mov	r2, r0
 8103e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103e08:	68db      	ldr	r3, [r3, #12]
 8103e0a:	429a      	cmp	r2, r3
 8103e0c:	d311      	bcc.n	8103e32 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8103e0e:	f000 fb41 	bl	8104494 <vTaskSuspendAll>
 8103e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103e14:	691b      	ldr	r3, [r3, #16]
 8103e16:	2b00      	cmp	r3, #0
 8103e18:	d009      	beq.n	8103e2e <xStreamBufferSend+0x15c>
 8103e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103e1c:	6918      	ldr	r0, [r3, #16]
 8103e1e:	2300      	movs	r3, #0
 8103e20:	2200      	movs	r2, #0
 8103e22:	2100      	movs	r1, #0
 8103e24:	f001 f942 	bl	81050ac <xTaskGenericNotify>
 8103e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103e2a:	2200      	movs	r2, #0
 8103e2c:	611a      	str	r2, [r3, #16]
 8103e2e:	f000 fb3f 	bl	81044b0 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8103e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8103e34:	4618      	mov	r0, r3
 8103e36:	3738      	adds	r7, #56	; 0x38
 8103e38:	46bd      	mov	sp, r7
 8103e3a:	bd80      	pop	{r7, pc}

08103e3c <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8103e3c:	b580      	push	{r7, lr}
 8103e3e:	b086      	sub	sp, #24
 8103e40:	af00      	add	r7, sp, #0
 8103e42:	60f8      	str	r0, [r7, #12]
 8103e44:	60b9      	str	r1, [r7, #8]
 8103e46:	607a      	str	r2, [r7, #4]
 8103e48:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8103e4a:	683b      	ldr	r3, [r7, #0]
 8103e4c:	2b00      	cmp	r3, #0
 8103e4e:	d102      	bne.n	8103e56 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8103e50:	2300      	movs	r3, #0
 8103e52:	617b      	str	r3, [r7, #20]
 8103e54:	e01d      	b.n	8103e92 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8103e56:	68fb      	ldr	r3, [r7, #12]
 8103e58:	7f1b      	ldrb	r3, [r3, #28]
 8103e5a:	f003 0301 	and.w	r3, r3, #1
 8103e5e:	2b00      	cmp	r3, #0
 8103e60:	d108      	bne.n	8103e74 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8103e62:	2301      	movs	r3, #1
 8103e64:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8103e66:	687a      	ldr	r2, [r7, #4]
 8103e68:	683b      	ldr	r3, [r7, #0]
 8103e6a:	4293      	cmp	r3, r2
 8103e6c:	bf28      	it	cs
 8103e6e:	4613      	movcs	r3, r2
 8103e70:	607b      	str	r3, [r7, #4]
 8103e72:	e00e      	b.n	8103e92 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8103e74:	683a      	ldr	r2, [r7, #0]
 8103e76:	6a3b      	ldr	r3, [r7, #32]
 8103e78:	429a      	cmp	r2, r3
 8103e7a:	d308      	bcc.n	8103e8e <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8103e7c:	2301      	movs	r3, #1
 8103e7e:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8103e80:	1d3b      	adds	r3, r7, #4
 8103e82:	2204      	movs	r2, #4
 8103e84:	4619      	mov	r1, r3
 8103e86:	68f8      	ldr	r0, [r7, #12]
 8103e88:	f000 f815 	bl	8103eb6 <prvWriteBytesToBuffer>
 8103e8c:	e001      	b.n	8103e92 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8103e8e:	2300      	movs	r3, #0
 8103e90:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8103e92:	697b      	ldr	r3, [r7, #20]
 8103e94:	2b00      	cmp	r3, #0
 8103e96:	d007      	beq.n	8103ea8 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8103e98:	687b      	ldr	r3, [r7, #4]
 8103e9a:	461a      	mov	r2, r3
 8103e9c:	68b9      	ldr	r1, [r7, #8]
 8103e9e:	68f8      	ldr	r0, [r7, #12]
 8103ea0:	f000 f809 	bl	8103eb6 <prvWriteBytesToBuffer>
 8103ea4:	6138      	str	r0, [r7, #16]
 8103ea6:	e001      	b.n	8103eac <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8103ea8:	2300      	movs	r3, #0
 8103eaa:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8103eac:	693b      	ldr	r3, [r7, #16]
}
 8103eae:	4618      	mov	r0, r3
 8103eb0:	3718      	adds	r7, #24
 8103eb2:	46bd      	mov	sp, r7
 8103eb4:	bd80      	pop	{r7, pc}

08103eb6 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8103eb6:	b580      	push	{r7, lr}
 8103eb8:	b08a      	sub	sp, #40	; 0x28
 8103eba:	af00      	add	r7, sp, #0
 8103ebc:	60f8      	str	r0, [r7, #12]
 8103ebe:	60b9      	str	r1, [r7, #8]
 8103ec0:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8103ec2:	687b      	ldr	r3, [r7, #4]
 8103ec4:	2b00      	cmp	r3, #0
 8103ec6:	d10a      	bne.n	8103ede <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8103ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103ecc:	f383 8811 	msr	BASEPRI, r3
 8103ed0:	f3bf 8f6f 	isb	sy
 8103ed4:	f3bf 8f4f 	dsb	sy
 8103ed8:	61fb      	str	r3, [r7, #28]
}
 8103eda:	bf00      	nop
 8103edc:	e7fe      	b.n	8103edc <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8103ede:	68fb      	ldr	r3, [r7, #12]
 8103ee0:	685b      	ldr	r3, [r3, #4]
 8103ee2:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8103ee4:	68fb      	ldr	r3, [r7, #12]
 8103ee6:	689a      	ldr	r2, [r3, #8]
 8103ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103eea:	1ad3      	subs	r3, r2, r3
 8103eec:	687a      	ldr	r2, [r7, #4]
 8103eee:	4293      	cmp	r3, r2
 8103ef0:	bf28      	it	cs
 8103ef2:	4613      	movcs	r3, r2
 8103ef4:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8103ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103ef8:	6a3b      	ldr	r3, [r7, #32]
 8103efa:	441a      	add	r2, r3
 8103efc:	68fb      	ldr	r3, [r7, #12]
 8103efe:	689b      	ldr	r3, [r3, #8]
 8103f00:	429a      	cmp	r2, r3
 8103f02:	d90a      	bls.n	8103f1a <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8103f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103f08:	f383 8811 	msr	BASEPRI, r3
 8103f0c:	f3bf 8f6f 	isb	sy
 8103f10:	f3bf 8f4f 	dsb	sy
 8103f14:	61bb      	str	r3, [r7, #24]
}
 8103f16:	bf00      	nop
 8103f18:	e7fe      	b.n	8103f18 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8103f1a:	68fb      	ldr	r3, [r7, #12]
 8103f1c:	699a      	ldr	r2, [r3, #24]
 8103f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103f20:	4413      	add	r3, r2
 8103f22:	6a3a      	ldr	r2, [r7, #32]
 8103f24:	68b9      	ldr	r1, [r7, #8]
 8103f26:	4618      	mov	r0, r3
 8103f28:	f001 fd6c 	bl	8105a04 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8103f2c:	687a      	ldr	r2, [r7, #4]
 8103f2e:	6a3b      	ldr	r3, [r7, #32]
 8103f30:	429a      	cmp	r2, r3
 8103f32:	d91c      	bls.n	8103f6e <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8103f34:	687a      	ldr	r2, [r7, #4]
 8103f36:	6a3b      	ldr	r3, [r7, #32]
 8103f38:	1ad2      	subs	r2, r2, r3
 8103f3a:	68fb      	ldr	r3, [r7, #12]
 8103f3c:	689b      	ldr	r3, [r3, #8]
 8103f3e:	429a      	cmp	r2, r3
 8103f40:	d90a      	bls.n	8103f58 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8103f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103f46:	f383 8811 	msr	BASEPRI, r3
 8103f4a:	f3bf 8f6f 	isb	sy
 8103f4e:	f3bf 8f4f 	dsb	sy
 8103f52:	617b      	str	r3, [r7, #20]
}
 8103f54:	bf00      	nop
 8103f56:	e7fe      	b.n	8103f56 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8103f58:	68fb      	ldr	r3, [r7, #12]
 8103f5a:	6998      	ldr	r0, [r3, #24]
 8103f5c:	68ba      	ldr	r2, [r7, #8]
 8103f5e:	6a3b      	ldr	r3, [r7, #32]
 8103f60:	18d1      	adds	r1, r2, r3
 8103f62:	687a      	ldr	r2, [r7, #4]
 8103f64:	6a3b      	ldr	r3, [r7, #32]
 8103f66:	1ad3      	subs	r3, r2, r3
 8103f68:	461a      	mov	r2, r3
 8103f6a:	f001 fd4b 	bl	8105a04 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8103f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	4413      	add	r3, r2
 8103f74:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8103f76:	68fb      	ldr	r3, [r7, #12]
 8103f78:	689b      	ldr	r3, [r3, #8]
 8103f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103f7c:	429a      	cmp	r2, r3
 8103f7e:	d304      	bcc.n	8103f8a <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8103f80:	68fb      	ldr	r3, [r7, #12]
 8103f82:	689b      	ldr	r3, [r3, #8]
 8103f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103f86:	1ad3      	subs	r3, r2, r3
 8103f88:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8103f8a:	68fb      	ldr	r3, [r7, #12]
 8103f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103f8e:	605a      	str	r2, [r3, #4]

	return xCount;
 8103f90:	687b      	ldr	r3, [r7, #4]
}
 8103f92:	4618      	mov	r0, r3
 8103f94:	3728      	adds	r7, #40	; 0x28
 8103f96:	46bd      	mov	sp, r7
 8103f98:	bd80      	pop	{r7, pc}

08103f9a <prvBytesInBuffer>:
	return xCount;
}
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8103f9a:	b480      	push	{r7}
 8103f9c:	b085      	sub	sp, #20
 8103f9e:	af00      	add	r7, sp, #0
 8103fa0:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8103fa2:	687b      	ldr	r3, [r7, #4]
 8103fa4:	689a      	ldr	r2, [r3, #8]
 8103fa6:	687b      	ldr	r3, [r7, #4]
 8103fa8:	685b      	ldr	r3, [r3, #4]
 8103faa:	4413      	add	r3, r2
 8103fac:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8103fae:	687b      	ldr	r3, [r7, #4]
 8103fb0:	681b      	ldr	r3, [r3, #0]
 8103fb2:	68fa      	ldr	r2, [r7, #12]
 8103fb4:	1ad3      	subs	r3, r2, r3
 8103fb6:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	689b      	ldr	r3, [r3, #8]
 8103fbc:	68fa      	ldr	r2, [r7, #12]
 8103fbe:	429a      	cmp	r2, r3
 8103fc0:	d304      	bcc.n	8103fcc <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8103fc2:	687b      	ldr	r3, [r7, #4]
 8103fc4:	689b      	ldr	r3, [r3, #8]
 8103fc6:	68fa      	ldr	r2, [r7, #12]
 8103fc8:	1ad3      	subs	r3, r2, r3
 8103fca:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8103fcc:	68fb      	ldr	r3, [r7, #12]
}
 8103fce:	4618      	mov	r0, r3
 8103fd0:	3714      	adds	r7, #20
 8103fd2:	46bd      	mov	sp, r7
 8103fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fd8:	4770      	bx	lr

08103fda <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8103fda:	b580      	push	{r7, lr}
 8103fdc:	b08e      	sub	sp, #56	; 0x38
 8103fde:	af04      	add	r7, sp, #16
 8103fe0:	60f8      	str	r0, [r7, #12]
 8103fe2:	60b9      	str	r1, [r7, #8]
 8103fe4:	607a      	str	r2, [r7, #4]
 8103fe6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8103fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103fea:	2b00      	cmp	r3, #0
 8103fec:	d10a      	bne.n	8104004 <xTaskCreateStatic+0x2a>
	__asm volatile
 8103fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103ff2:	f383 8811 	msr	BASEPRI, r3
 8103ff6:	f3bf 8f6f 	isb	sy
 8103ffa:	f3bf 8f4f 	dsb	sy
 8103ffe:	623b      	str	r3, [r7, #32]
}
 8104000:	bf00      	nop
 8104002:	e7fe      	b.n	8104002 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8104004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104006:	2b00      	cmp	r3, #0
 8104008:	d10a      	bne.n	8104020 <xTaskCreateStatic+0x46>
	__asm volatile
 810400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810400e:	f383 8811 	msr	BASEPRI, r3
 8104012:	f3bf 8f6f 	isb	sy
 8104016:	f3bf 8f4f 	dsb	sy
 810401a:	61fb      	str	r3, [r7, #28]
}
 810401c:	bf00      	nop
 810401e:	e7fe      	b.n	810401e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8104020:	23bc      	movs	r3, #188	; 0xbc
 8104022:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8104024:	693b      	ldr	r3, [r7, #16]
 8104026:	2bbc      	cmp	r3, #188	; 0xbc
 8104028:	d00a      	beq.n	8104040 <xTaskCreateStatic+0x66>
	__asm volatile
 810402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810402e:	f383 8811 	msr	BASEPRI, r3
 8104032:	f3bf 8f6f 	isb	sy
 8104036:	f3bf 8f4f 	dsb	sy
 810403a:	61bb      	str	r3, [r7, #24]
}
 810403c:	bf00      	nop
 810403e:	e7fe      	b.n	810403e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8104040:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8104042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104044:	2b00      	cmp	r3, #0
 8104046:	d01e      	beq.n	8104086 <xTaskCreateStatic+0xac>
 8104048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810404a:	2b00      	cmp	r3, #0
 810404c:	d01b      	beq.n	8104086 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104050:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8104052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8104056:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8104058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810405a:	2202      	movs	r2, #2
 810405c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8104060:	2300      	movs	r3, #0
 8104062:	9303      	str	r3, [sp, #12]
 8104064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104066:	9302      	str	r3, [sp, #8]
 8104068:	f107 0314 	add.w	r3, r7, #20
 810406c:	9301      	str	r3, [sp, #4]
 810406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104070:	9300      	str	r3, [sp, #0]
 8104072:	683b      	ldr	r3, [r7, #0]
 8104074:	687a      	ldr	r2, [r7, #4]
 8104076:	68b9      	ldr	r1, [r7, #8]
 8104078:	68f8      	ldr	r0, [r7, #12]
 810407a:	f000 f851 	bl	8104120 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810407e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8104080:	f000 f8f4 	bl	810426c <prvAddNewTaskToReadyList>
 8104084:	e001      	b.n	810408a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8104086:	2300      	movs	r3, #0
 8104088:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810408a:	697b      	ldr	r3, [r7, #20]
	}
 810408c:	4618      	mov	r0, r3
 810408e:	3728      	adds	r7, #40	; 0x28
 8104090:	46bd      	mov	sp, r7
 8104092:	bd80      	pop	{r7, pc}

08104094 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8104094:	b580      	push	{r7, lr}
 8104096:	b08c      	sub	sp, #48	; 0x30
 8104098:	af04      	add	r7, sp, #16
 810409a:	60f8      	str	r0, [r7, #12]
 810409c:	60b9      	str	r1, [r7, #8]
 810409e:	603b      	str	r3, [r7, #0]
 81040a0:	4613      	mov	r3, r2
 81040a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 81040a4:	88fb      	ldrh	r3, [r7, #6]
 81040a6:	009b      	lsls	r3, r3, #2
 81040a8:	4618      	mov	r0, r3
 81040aa:	f7fe fa7b 	bl	81025a4 <pvPortMalloc>
 81040ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 81040b0:	697b      	ldr	r3, [r7, #20]
 81040b2:	2b00      	cmp	r3, #0
 81040b4:	d00e      	beq.n	81040d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 81040b6:	20bc      	movs	r0, #188	; 0xbc
 81040b8:	f7fe fa74 	bl	81025a4 <pvPortMalloc>
 81040bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 81040be:	69fb      	ldr	r3, [r7, #28]
 81040c0:	2b00      	cmp	r3, #0
 81040c2:	d003      	beq.n	81040cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 81040c4:	69fb      	ldr	r3, [r7, #28]
 81040c6:	697a      	ldr	r2, [r7, #20]
 81040c8:	631a      	str	r2, [r3, #48]	; 0x30
 81040ca:	e005      	b.n	81040d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 81040cc:	6978      	ldr	r0, [r7, #20]
 81040ce:	f7fe fb35 	bl	810273c <vPortFree>
 81040d2:	e001      	b.n	81040d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 81040d4:	2300      	movs	r3, #0
 81040d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 81040d8:	69fb      	ldr	r3, [r7, #28]
 81040da:	2b00      	cmp	r3, #0
 81040dc:	d017      	beq.n	810410e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 81040de:	69fb      	ldr	r3, [r7, #28]
 81040e0:	2200      	movs	r2, #0
 81040e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 81040e6:	88fa      	ldrh	r2, [r7, #6]
 81040e8:	2300      	movs	r3, #0
 81040ea:	9303      	str	r3, [sp, #12]
 81040ec:	69fb      	ldr	r3, [r7, #28]
 81040ee:	9302      	str	r3, [sp, #8]
 81040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81040f2:	9301      	str	r3, [sp, #4]
 81040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81040f6:	9300      	str	r3, [sp, #0]
 81040f8:	683b      	ldr	r3, [r7, #0]
 81040fa:	68b9      	ldr	r1, [r7, #8]
 81040fc:	68f8      	ldr	r0, [r7, #12]
 81040fe:	f000 f80f 	bl	8104120 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8104102:	69f8      	ldr	r0, [r7, #28]
 8104104:	f000 f8b2 	bl	810426c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8104108:	2301      	movs	r3, #1
 810410a:	61bb      	str	r3, [r7, #24]
 810410c:	e002      	b.n	8104114 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810410e:	f04f 33ff 	mov.w	r3, #4294967295
 8104112:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8104114:	69bb      	ldr	r3, [r7, #24]
	}
 8104116:	4618      	mov	r0, r3
 8104118:	3720      	adds	r7, #32
 810411a:	46bd      	mov	sp, r7
 810411c:	bd80      	pop	{r7, pc}
	...

08104120 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8104120:	b580      	push	{r7, lr}
 8104122:	b088      	sub	sp, #32
 8104124:	af00      	add	r7, sp, #0
 8104126:	60f8      	str	r0, [r7, #12]
 8104128:	60b9      	str	r1, [r7, #8]
 810412a:	607a      	str	r2, [r7, #4]
 810412c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104130:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	009b      	lsls	r3, r3, #2
 8104136:	461a      	mov	r2, r3
 8104138:	21a5      	movs	r1, #165	; 0xa5
 810413a:	f001 fc71 	bl	8105a20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8104142:	687b      	ldr	r3, [r7, #4]
 8104144:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8104148:	3b01      	subs	r3, #1
 810414a:	009b      	lsls	r3, r3, #2
 810414c:	4413      	add	r3, r2
 810414e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8104150:	69bb      	ldr	r3, [r7, #24]
 8104152:	f023 0307 	bic.w	r3, r3, #7
 8104156:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8104158:	69bb      	ldr	r3, [r7, #24]
 810415a:	f003 0307 	and.w	r3, r3, #7
 810415e:	2b00      	cmp	r3, #0
 8104160:	d00a      	beq.n	8104178 <prvInitialiseNewTask+0x58>
	__asm volatile
 8104162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104166:	f383 8811 	msr	BASEPRI, r3
 810416a:	f3bf 8f6f 	isb	sy
 810416e:	f3bf 8f4f 	dsb	sy
 8104172:	617b      	str	r3, [r7, #20]
}
 8104174:	bf00      	nop
 8104176:	e7fe      	b.n	8104176 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8104178:	68bb      	ldr	r3, [r7, #8]
 810417a:	2b00      	cmp	r3, #0
 810417c:	d01f      	beq.n	81041be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810417e:	2300      	movs	r3, #0
 8104180:	61fb      	str	r3, [r7, #28]
 8104182:	e012      	b.n	81041aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8104184:	68ba      	ldr	r2, [r7, #8]
 8104186:	69fb      	ldr	r3, [r7, #28]
 8104188:	4413      	add	r3, r2
 810418a:	7819      	ldrb	r1, [r3, #0]
 810418c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810418e:	69fb      	ldr	r3, [r7, #28]
 8104190:	4413      	add	r3, r2
 8104192:	3334      	adds	r3, #52	; 0x34
 8104194:	460a      	mov	r2, r1
 8104196:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8104198:	68ba      	ldr	r2, [r7, #8]
 810419a:	69fb      	ldr	r3, [r7, #28]
 810419c:	4413      	add	r3, r2
 810419e:	781b      	ldrb	r3, [r3, #0]
 81041a0:	2b00      	cmp	r3, #0
 81041a2:	d006      	beq.n	81041b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81041a4:	69fb      	ldr	r3, [r7, #28]
 81041a6:	3301      	adds	r3, #1
 81041a8:	61fb      	str	r3, [r7, #28]
 81041aa:	69fb      	ldr	r3, [r7, #28]
 81041ac:	2b0f      	cmp	r3, #15
 81041ae:	d9e9      	bls.n	8104184 <prvInitialiseNewTask+0x64>
 81041b0:	e000      	b.n	81041b4 <prvInitialiseNewTask+0x94>
			{
				break;
 81041b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 81041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81041b6:	2200      	movs	r2, #0
 81041b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 81041bc:	e003      	b.n	81041c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 81041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81041c0:	2200      	movs	r2, #0
 81041c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 81041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81041c8:	2b37      	cmp	r3, #55	; 0x37
 81041ca:	d901      	bls.n	81041d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 81041cc:	2337      	movs	r3, #55	; 0x37
 81041ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 81041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81041d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81041d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 81041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81041d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81041da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 81041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81041de:	2200      	movs	r2, #0
 81041e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 81041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81041e4:	3304      	adds	r3, #4
 81041e6:	4618      	mov	r0, r3
 81041e8:	f7fe fbe6 	bl	81029b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 81041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81041ee:	3318      	adds	r3, #24
 81041f0:	4618      	mov	r0, r3
 81041f2:	f7fe fbe1 	bl	81029b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 81041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81041f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81041fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81041fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8104202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104204:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8104206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810420a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810420e:	2200      	movs	r2, #0
 8104210:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8104214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104216:	2200      	movs	r2, #0
 8104218:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 810421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810421e:	3354      	adds	r3, #84	; 0x54
 8104220:	2260      	movs	r2, #96	; 0x60
 8104222:	2100      	movs	r1, #0
 8104224:	4618      	mov	r0, r3
 8104226:	f001 fbfb 	bl	8105a20 <memset>
 810422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810422c:	4a0c      	ldr	r2, [pc, #48]	; (8104260 <prvInitialiseNewTask+0x140>)
 810422e:	659a      	str	r2, [r3, #88]	; 0x58
 8104230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104232:	4a0c      	ldr	r2, [pc, #48]	; (8104264 <prvInitialiseNewTask+0x144>)
 8104234:	65da      	str	r2, [r3, #92]	; 0x5c
 8104236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104238:	4a0b      	ldr	r2, [pc, #44]	; (8104268 <prvInitialiseNewTask+0x148>)
 810423a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810423c:	683a      	ldr	r2, [r7, #0]
 810423e:	68f9      	ldr	r1, [r7, #12]
 8104240:	69b8      	ldr	r0, [r7, #24]
 8104242:	f7fe fc4d 	bl	8102ae0 <pxPortInitialiseStack>
 8104246:	4602      	mov	r2, r0
 8104248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810424a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810424e:	2b00      	cmp	r3, #0
 8104250:	d002      	beq.n	8104258 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8104252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8104256:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8104258:	bf00      	nop
 810425a:	3720      	adds	r7, #32
 810425c:	46bd      	mov	sp, r7
 810425e:	bd80      	pop	{r7, pc}
 8104260:	08105c44 	.word	0x08105c44
 8104264:	08105c64 	.word	0x08105c64
 8104268:	08105c24 	.word	0x08105c24

0810426c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810426c:	b580      	push	{r7, lr}
 810426e:	b082      	sub	sp, #8
 8104270:	af00      	add	r7, sp, #0
 8104272:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8104274:	f7fe fd5e 	bl	8102d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8104278:	4b2d      	ldr	r3, [pc, #180]	; (8104330 <prvAddNewTaskToReadyList+0xc4>)
 810427a:	681b      	ldr	r3, [r3, #0]
 810427c:	3301      	adds	r3, #1
 810427e:	4a2c      	ldr	r2, [pc, #176]	; (8104330 <prvAddNewTaskToReadyList+0xc4>)
 8104280:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8104282:	4b2c      	ldr	r3, [pc, #176]	; (8104334 <prvAddNewTaskToReadyList+0xc8>)
 8104284:	681b      	ldr	r3, [r3, #0]
 8104286:	2b00      	cmp	r3, #0
 8104288:	d109      	bne.n	810429e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810428a:	4a2a      	ldr	r2, [pc, #168]	; (8104334 <prvAddNewTaskToReadyList+0xc8>)
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8104290:	4b27      	ldr	r3, [pc, #156]	; (8104330 <prvAddNewTaskToReadyList+0xc4>)
 8104292:	681b      	ldr	r3, [r3, #0]
 8104294:	2b01      	cmp	r3, #1
 8104296:	d110      	bne.n	81042ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8104298:	f000 fc4c 	bl	8104b34 <prvInitialiseTaskLists>
 810429c:	e00d      	b.n	81042ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810429e:	4b26      	ldr	r3, [pc, #152]	; (8104338 <prvAddNewTaskToReadyList+0xcc>)
 81042a0:	681b      	ldr	r3, [r3, #0]
 81042a2:	2b00      	cmp	r3, #0
 81042a4:	d109      	bne.n	81042ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 81042a6:	4b23      	ldr	r3, [pc, #140]	; (8104334 <prvAddNewTaskToReadyList+0xc8>)
 81042a8:	681b      	ldr	r3, [r3, #0]
 81042aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81042ac:	687b      	ldr	r3, [r7, #4]
 81042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042b0:	429a      	cmp	r2, r3
 81042b2:	d802      	bhi.n	81042ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 81042b4:	4a1f      	ldr	r2, [pc, #124]	; (8104334 <prvAddNewTaskToReadyList+0xc8>)
 81042b6:	687b      	ldr	r3, [r7, #4]
 81042b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 81042ba:	4b20      	ldr	r3, [pc, #128]	; (810433c <prvAddNewTaskToReadyList+0xd0>)
 81042bc:	681b      	ldr	r3, [r3, #0]
 81042be:	3301      	adds	r3, #1
 81042c0:	4a1e      	ldr	r2, [pc, #120]	; (810433c <prvAddNewTaskToReadyList+0xd0>)
 81042c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 81042c4:	4b1d      	ldr	r3, [pc, #116]	; (810433c <prvAddNewTaskToReadyList+0xd0>)
 81042c6:	681a      	ldr	r2, [r3, #0]
 81042c8:	687b      	ldr	r3, [r7, #4]
 81042ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 81042cc:	687b      	ldr	r3, [r7, #4]
 81042ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81042d0:	4b1b      	ldr	r3, [pc, #108]	; (8104340 <prvAddNewTaskToReadyList+0xd4>)
 81042d2:	681b      	ldr	r3, [r3, #0]
 81042d4:	429a      	cmp	r2, r3
 81042d6:	d903      	bls.n	81042e0 <prvAddNewTaskToReadyList+0x74>
 81042d8:	687b      	ldr	r3, [r7, #4]
 81042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042dc:	4a18      	ldr	r2, [pc, #96]	; (8104340 <prvAddNewTaskToReadyList+0xd4>)
 81042de:	6013      	str	r3, [r2, #0]
 81042e0:	687b      	ldr	r3, [r7, #4]
 81042e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81042e4:	4613      	mov	r3, r2
 81042e6:	009b      	lsls	r3, r3, #2
 81042e8:	4413      	add	r3, r2
 81042ea:	009b      	lsls	r3, r3, #2
 81042ec:	4a15      	ldr	r2, [pc, #84]	; (8104344 <prvAddNewTaskToReadyList+0xd8>)
 81042ee:	441a      	add	r2, r3
 81042f0:	687b      	ldr	r3, [r7, #4]
 81042f2:	3304      	adds	r3, #4
 81042f4:	4619      	mov	r1, r3
 81042f6:	4610      	mov	r0, r2
 81042f8:	f7fe fb6b 	bl	81029d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 81042fc:	f7fe fd4a 	bl	8102d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8104300:	4b0d      	ldr	r3, [pc, #52]	; (8104338 <prvAddNewTaskToReadyList+0xcc>)
 8104302:	681b      	ldr	r3, [r3, #0]
 8104304:	2b00      	cmp	r3, #0
 8104306:	d00e      	beq.n	8104326 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8104308:	4b0a      	ldr	r3, [pc, #40]	; (8104334 <prvAddNewTaskToReadyList+0xc8>)
 810430a:	681b      	ldr	r3, [r3, #0]
 810430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104312:	429a      	cmp	r2, r3
 8104314:	d207      	bcs.n	8104326 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8104316:	4b0c      	ldr	r3, [pc, #48]	; (8104348 <prvAddNewTaskToReadyList+0xdc>)
 8104318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810431c:	601a      	str	r2, [r3, #0]
 810431e:	f3bf 8f4f 	dsb	sy
 8104322:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8104326:	bf00      	nop
 8104328:	3708      	adds	r7, #8
 810432a:	46bd      	mov	sp, r7
 810432c:	bd80      	pop	{r7, pc}
 810432e:	bf00      	nop
 8104330:	100049ec 	.word	0x100049ec
 8104334:	10004518 	.word	0x10004518
 8104338:	100049f8 	.word	0x100049f8
 810433c:	10004a08 	.word	0x10004a08
 8104340:	100049f4 	.word	0x100049f4
 8104344:	1000451c 	.word	0x1000451c
 8104348:	e000ed04 	.word	0xe000ed04

0810434c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810434c:	b580      	push	{r7, lr}
 810434e:	b084      	sub	sp, #16
 8104350:	af00      	add	r7, sp, #0
 8104352:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8104354:	2300      	movs	r3, #0
 8104356:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8104358:	687b      	ldr	r3, [r7, #4]
 810435a:	2b00      	cmp	r3, #0
 810435c:	d017      	beq.n	810438e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810435e:	4b13      	ldr	r3, [pc, #76]	; (81043ac <vTaskDelay+0x60>)
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	2b00      	cmp	r3, #0
 8104364:	d00a      	beq.n	810437c <vTaskDelay+0x30>
	__asm volatile
 8104366:	f04f 0350 	mov.w	r3, #80	; 0x50
 810436a:	f383 8811 	msr	BASEPRI, r3
 810436e:	f3bf 8f6f 	isb	sy
 8104372:	f3bf 8f4f 	dsb	sy
 8104376:	60bb      	str	r3, [r7, #8]
}
 8104378:	bf00      	nop
 810437a:	e7fe      	b.n	810437a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810437c:	f000 f88a 	bl	8104494 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8104380:	2100      	movs	r1, #0
 8104382:	6878      	ldr	r0, [r7, #4]
 8104384:	f000 ff76 	bl	8105274 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8104388:	f000 f892 	bl	81044b0 <xTaskResumeAll>
 810438c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810438e:	68fb      	ldr	r3, [r7, #12]
 8104390:	2b00      	cmp	r3, #0
 8104392:	d107      	bne.n	81043a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8104394:	4b06      	ldr	r3, [pc, #24]	; (81043b0 <vTaskDelay+0x64>)
 8104396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810439a:	601a      	str	r2, [r3, #0]
 810439c:	f3bf 8f4f 	dsb	sy
 81043a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81043a4:	bf00      	nop
 81043a6:	3710      	adds	r7, #16
 81043a8:	46bd      	mov	sp, r7
 81043aa:	bd80      	pop	{r7, pc}
 81043ac:	10004a14 	.word	0x10004a14
 81043b0:	e000ed04 	.word	0xe000ed04

081043b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 81043b4:	b580      	push	{r7, lr}
 81043b6:	b08a      	sub	sp, #40	; 0x28
 81043b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 81043ba:	2300      	movs	r3, #0
 81043bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 81043be:	2300      	movs	r3, #0
 81043c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 81043c2:	463a      	mov	r2, r7
 81043c4:	1d39      	adds	r1, r7, #4
 81043c6:	f107 0308 	add.w	r3, r7, #8
 81043ca:	4618      	mov	r0, r3
 81043cc:	f7fe f8b6 	bl	810253c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 81043d0:	6839      	ldr	r1, [r7, #0]
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	68ba      	ldr	r2, [r7, #8]
 81043d6:	9202      	str	r2, [sp, #8]
 81043d8:	9301      	str	r3, [sp, #4]
 81043da:	2300      	movs	r3, #0
 81043dc:	9300      	str	r3, [sp, #0]
 81043de:	2300      	movs	r3, #0
 81043e0:	460a      	mov	r2, r1
 81043e2:	4924      	ldr	r1, [pc, #144]	; (8104474 <vTaskStartScheduler+0xc0>)
 81043e4:	4824      	ldr	r0, [pc, #144]	; (8104478 <vTaskStartScheduler+0xc4>)
 81043e6:	f7ff fdf8 	bl	8103fda <xTaskCreateStatic>
 81043ea:	4603      	mov	r3, r0
 81043ec:	4a23      	ldr	r2, [pc, #140]	; (810447c <vTaskStartScheduler+0xc8>)
 81043ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 81043f0:	4b22      	ldr	r3, [pc, #136]	; (810447c <vTaskStartScheduler+0xc8>)
 81043f2:	681b      	ldr	r3, [r3, #0]
 81043f4:	2b00      	cmp	r3, #0
 81043f6:	d002      	beq.n	81043fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 81043f8:	2301      	movs	r3, #1
 81043fa:	617b      	str	r3, [r7, #20]
 81043fc:	e001      	b.n	8104402 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 81043fe:	2300      	movs	r3, #0
 8104400:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8104402:	697b      	ldr	r3, [r7, #20]
 8104404:	2b01      	cmp	r3, #1
 8104406:	d102      	bne.n	810440e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8104408:	f000 ff88 	bl	810531c <xTimerCreateTimerTask>
 810440c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810440e:	697b      	ldr	r3, [r7, #20]
 8104410:	2b01      	cmp	r3, #1
 8104412:	d11b      	bne.n	810444c <vTaskStartScheduler+0x98>
	__asm volatile
 8104414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104418:	f383 8811 	msr	BASEPRI, r3
 810441c:	f3bf 8f6f 	isb	sy
 8104420:	f3bf 8f4f 	dsb	sy
 8104424:	613b      	str	r3, [r7, #16]
}
 8104426:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8104428:	4b15      	ldr	r3, [pc, #84]	; (8104480 <vTaskStartScheduler+0xcc>)
 810442a:	681b      	ldr	r3, [r3, #0]
 810442c:	3354      	adds	r3, #84	; 0x54
 810442e:	4a15      	ldr	r2, [pc, #84]	; (8104484 <vTaskStartScheduler+0xd0>)
 8104430:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8104432:	4b15      	ldr	r3, [pc, #84]	; (8104488 <vTaskStartScheduler+0xd4>)
 8104434:	f04f 32ff 	mov.w	r2, #4294967295
 8104438:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810443a:	4b14      	ldr	r3, [pc, #80]	; (810448c <vTaskStartScheduler+0xd8>)
 810443c:	2201      	movs	r2, #1
 810443e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8104440:	4b13      	ldr	r3, [pc, #76]	; (8104490 <vTaskStartScheduler+0xdc>)
 8104442:	2200      	movs	r2, #0
 8104444:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8104446:	f7fe fbd3 	bl	8102bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810444a:	e00e      	b.n	810446a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810444c:	697b      	ldr	r3, [r7, #20]
 810444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104452:	d10a      	bne.n	810446a <vTaskStartScheduler+0xb6>
	__asm volatile
 8104454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104458:	f383 8811 	msr	BASEPRI, r3
 810445c:	f3bf 8f6f 	isb	sy
 8104460:	f3bf 8f4f 	dsb	sy
 8104464:	60fb      	str	r3, [r7, #12]
}
 8104466:	bf00      	nop
 8104468:	e7fe      	b.n	8104468 <vTaskStartScheduler+0xb4>
}
 810446a:	bf00      	nop
 810446c:	3718      	adds	r7, #24
 810446e:	46bd      	mov	sp, r7
 8104470:	bd80      	pop	{r7, pc}
 8104472:	bf00      	nop
 8104474:	08105bd8 	.word	0x08105bd8
 8104478:	08104b05 	.word	0x08104b05
 810447c:	10004a10 	.word	0x10004a10
 8104480:	10004518 	.word	0x10004518
 8104484:	10000014 	.word	0x10000014
 8104488:	10004a0c 	.word	0x10004a0c
 810448c:	100049f8 	.word	0x100049f8
 8104490:	100049f0 	.word	0x100049f0

08104494 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8104494:	b480      	push	{r7}
 8104496:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8104498:	4b04      	ldr	r3, [pc, #16]	; (81044ac <vTaskSuspendAll+0x18>)
 810449a:	681b      	ldr	r3, [r3, #0]
 810449c:	3301      	adds	r3, #1
 810449e:	4a03      	ldr	r2, [pc, #12]	; (81044ac <vTaskSuspendAll+0x18>)
 81044a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 81044a2:	bf00      	nop
 81044a4:	46bd      	mov	sp, r7
 81044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044aa:	4770      	bx	lr
 81044ac:	10004a14 	.word	0x10004a14

081044b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 81044b0:	b580      	push	{r7, lr}
 81044b2:	b084      	sub	sp, #16
 81044b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 81044b6:	2300      	movs	r3, #0
 81044b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 81044ba:	2300      	movs	r3, #0
 81044bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 81044be:	4b42      	ldr	r3, [pc, #264]	; (81045c8 <xTaskResumeAll+0x118>)
 81044c0:	681b      	ldr	r3, [r3, #0]
 81044c2:	2b00      	cmp	r3, #0
 81044c4:	d10a      	bne.n	81044dc <xTaskResumeAll+0x2c>
	__asm volatile
 81044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81044ca:	f383 8811 	msr	BASEPRI, r3
 81044ce:	f3bf 8f6f 	isb	sy
 81044d2:	f3bf 8f4f 	dsb	sy
 81044d6:	603b      	str	r3, [r7, #0]
}
 81044d8:	bf00      	nop
 81044da:	e7fe      	b.n	81044da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 81044dc:	f7fe fc2a 	bl	8102d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 81044e0:	4b39      	ldr	r3, [pc, #228]	; (81045c8 <xTaskResumeAll+0x118>)
 81044e2:	681b      	ldr	r3, [r3, #0]
 81044e4:	3b01      	subs	r3, #1
 81044e6:	4a38      	ldr	r2, [pc, #224]	; (81045c8 <xTaskResumeAll+0x118>)
 81044e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81044ea:	4b37      	ldr	r3, [pc, #220]	; (81045c8 <xTaskResumeAll+0x118>)
 81044ec:	681b      	ldr	r3, [r3, #0]
 81044ee:	2b00      	cmp	r3, #0
 81044f0:	d162      	bne.n	81045b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 81044f2:	4b36      	ldr	r3, [pc, #216]	; (81045cc <xTaskResumeAll+0x11c>)
 81044f4:	681b      	ldr	r3, [r3, #0]
 81044f6:	2b00      	cmp	r3, #0
 81044f8:	d05e      	beq.n	81045b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81044fa:	e02f      	b.n	810455c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81044fc:	4b34      	ldr	r3, [pc, #208]	; (81045d0 <xTaskResumeAll+0x120>)
 81044fe:	68db      	ldr	r3, [r3, #12]
 8104500:	68db      	ldr	r3, [r3, #12]
 8104502:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8104504:	68fb      	ldr	r3, [r7, #12]
 8104506:	3318      	adds	r3, #24
 8104508:	4618      	mov	r0, r3
 810450a:	f7fe fabf 	bl	8102a8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810450e:	68fb      	ldr	r3, [r7, #12]
 8104510:	3304      	adds	r3, #4
 8104512:	4618      	mov	r0, r3
 8104514:	f7fe faba 	bl	8102a8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8104518:	68fb      	ldr	r3, [r7, #12]
 810451a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810451c:	4b2d      	ldr	r3, [pc, #180]	; (81045d4 <xTaskResumeAll+0x124>)
 810451e:	681b      	ldr	r3, [r3, #0]
 8104520:	429a      	cmp	r2, r3
 8104522:	d903      	bls.n	810452c <xTaskResumeAll+0x7c>
 8104524:	68fb      	ldr	r3, [r7, #12]
 8104526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104528:	4a2a      	ldr	r2, [pc, #168]	; (81045d4 <xTaskResumeAll+0x124>)
 810452a:	6013      	str	r3, [r2, #0]
 810452c:	68fb      	ldr	r3, [r7, #12]
 810452e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104530:	4613      	mov	r3, r2
 8104532:	009b      	lsls	r3, r3, #2
 8104534:	4413      	add	r3, r2
 8104536:	009b      	lsls	r3, r3, #2
 8104538:	4a27      	ldr	r2, [pc, #156]	; (81045d8 <xTaskResumeAll+0x128>)
 810453a:	441a      	add	r2, r3
 810453c:	68fb      	ldr	r3, [r7, #12]
 810453e:	3304      	adds	r3, #4
 8104540:	4619      	mov	r1, r3
 8104542:	4610      	mov	r0, r2
 8104544:	f7fe fa45 	bl	81029d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8104548:	68fb      	ldr	r3, [r7, #12]
 810454a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810454c:	4b23      	ldr	r3, [pc, #140]	; (81045dc <xTaskResumeAll+0x12c>)
 810454e:	681b      	ldr	r3, [r3, #0]
 8104550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104552:	429a      	cmp	r2, r3
 8104554:	d302      	bcc.n	810455c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8104556:	4b22      	ldr	r3, [pc, #136]	; (81045e0 <xTaskResumeAll+0x130>)
 8104558:	2201      	movs	r2, #1
 810455a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810455c:	4b1c      	ldr	r3, [pc, #112]	; (81045d0 <xTaskResumeAll+0x120>)
 810455e:	681b      	ldr	r3, [r3, #0]
 8104560:	2b00      	cmp	r3, #0
 8104562:	d1cb      	bne.n	81044fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8104564:	68fb      	ldr	r3, [r7, #12]
 8104566:	2b00      	cmp	r3, #0
 8104568:	d001      	beq.n	810456e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810456a:	f000 fb85 	bl	8104c78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810456e:	4b1d      	ldr	r3, [pc, #116]	; (81045e4 <xTaskResumeAll+0x134>)
 8104570:	681b      	ldr	r3, [r3, #0]
 8104572:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	2b00      	cmp	r3, #0
 8104578:	d010      	beq.n	810459c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810457a:	f000 f847 	bl	810460c <xTaskIncrementTick>
 810457e:	4603      	mov	r3, r0
 8104580:	2b00      	cmp	r3, #0
 8104582:	d002      	beq.n	810458a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8104584:	4b16      	ldr	r3, [pc, #88]	; (81045e0 <xTaskResumeAll+0x130>)
 8104586:	2201      	movs	r2, #1
 8104588:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810458a:	687b      	ldr	r3, [r7, #4]
 810458c:	3b01      	subs	r3, #1
 810458e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8104590:	687b      	ldr	r3, [r7, #4]
 8104592:	2b00      	cmp	r3, #0
 8104594:	d1f1      	bne.n	810457a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8104596:	4b13      	ldr	r3, [pc, #76]	; (81045e4 <xTaskResumeAll+0x134>)
 8104598:	2200      	movs	r2, #0
 810459a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810459c:	4b10      	ldr	r3, [pc, #64]	; (81045e0 <xTaskResumeAll+0x130>)
 810459e:	681b      	ldr	r3, [r3, #0]
 81045a0:	2b00      	cmp	r3, #0
 81045a2:	d009      	beq.n	81045b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 81045a4:	2301      	movs	r3, #1
 81045a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 81045a8:	4b0f      	ldr	r3, [pc, #60]	; (81045e8 <xTaskResumeAll+0x138>)
 81045aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81045ae:	601a      	str	r2, [r3, #0]
 81045b0:	f3bf 8f4f 	dsb	sy
 81045b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81045b8:	f7fe fbec 	bl	8102d94 <vPortExitCritical>

	return xAlreadyYielded;
 81045bc:	68bb      	ldr	r3, [r7, #8]
}
 81045be:	4618      	mov	r0, r3
 81045c0:	3710      	adds	r7, #16
 81045c2:	46bd      	mov	sp, r7
 81045c4:	bd80      	pop	{r7, pc}
 81045c6:	bf00      	nop
 81045c8:	10004a14 	.word	0x10004a14
 81045cc:	100049ec 	.word	0x100049ec
 81045d0:	100049ac 	.word	0x100049ac
 81045d4:	100049f4 	.word	0x100049f4
 81045d8:	1000451c 	.word	0x1000451c
 81045dc:	10004518 	.word	0x10004518
 81045e0:	10004a00 	.word	0x10004a00
 81045e4:	100049fc 	.word	0x100049fc
 81045e8:	e000ed04 	.word	0xe000ed04

081045ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 81045ec:	b480      	push	{r7}
 81045ee:	b083      	sub	sp, #12
 81045f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 81045f2:	4b05      	ldr	r3, [pc, #20]	; (8104608 <xTaskGetTickCount+0x1c>)
 81045f4:	681b      	ldr	r3, [r3, #0]
 81045f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 81045f8:	687b      	ldr	r3, [r7, #4]
}
 81045fa:	4618      	mov	r0, r3
 81045fc:	370c      	adds	r7, #12
 81045fe:	46bd      	mov	sp, r7
 8104600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104604:	4770      	bx	lr
 8104606:	bf00      	nop
 8104608:	100049f0 	.word	0x100049f0

0810460c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810460c:	b580      	push	{r7, lr}
 810460e:	b086      	sub	sp, #24
 8104610:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8104612:	2300      	movs	r3, #0
 8104614:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8104616:	4b4f      	ldr	r3, [pc, #316]	; (8104754 <xTaskIncrementTick+0x148>)
 8104618:	681b      	ldr	r3, [r3, #0]
 810461a:	2b00      	cmp	r3, #0
 810461c:	f040 808f 	bne.w	810473e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8104620:	4b4d      	ldr	r3, [pc, #308]	; (8104758 <xTaskIncrementTick+0x14c>)
 8104622:	681b      	ldr	r3, [r3, #0]
 8104624:	3301      	adds	r3, #1
 8104626:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8104628:	4a4b      	ldr	r2, [pc, #300]	; (8104758 <xTaskIncrementTick+0x14c>)
 810462a:	693b      	ldr	r3, [r7, #16]
 810462c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810462e:	693b      	ldr	r3, [r7, #16]
 8104630:	2b00      	cmp	r3, #0
 8104632:	d120      	bne.n	8104676 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8104634:	4b49      	ldr	r3, [pc, #292]	; (810475c <xTaskIncrementTick+0x150>)
 8104636:	681b      	ldr	r3, [r3, #0]
 8104638:	681b      	ldr	r3, [r3, #0]
 810463a:	2b00      	cmp	r3, #0
 810463c:	d00a      	beq.n	8104654 <xTaskIncrementTick+0x48>
	__asm volatile
 810463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104642:	f383 8811 	msr	BASEPRI, r3
 8104646:	f3bf 8f6f 	isb	sy
 810464a:	f3bf 8f4f 	dsb	sy
 810464e:	603b      	str	r3, [r7, #0]
}
 8104650:	bf00      	nop
 8104652:	e7fe      	b.n	8104652 <xTaskIncrementTick+0x46>
 8104654:	4b41      	ldr	r3, [pc, #260]	; (810475c <xTaskIncrementTick+0x150>)
 8104656:	681b      	ldr	r3, [r3, #0]
 8104658:	60fb      	str	r3, [r7, #12]
 810465a:	4b41      	ldr	r3, [pc, #260]	; (8104760 <xTaskIncrementTick+0x154>)
 810465c:	681b      	ldr	r3, [r3, #0]
 810465e:	4a3f      	ldr	r2, [pc, #252]	; (810475c <xTaskIncrementTick+0x150>)
 8104660:	6013      	str	r3, [r2, #0]
 8104662:	4a3f      	ldr	r2, [pc, #252]	; (8104760 <xTaskIncrementTick+0x154>)
 8104664:	68fb      	ldr	r3, [r7, #12]
 8104666:	6013      	str	r3, [r2, #0]
 8104668:	4b3e      	ldr	r3, [pc, #248]	; (8104764 <xTaskIncrementTick+0x158>)
 810466a:	681b      	ldr	r3, [r3, #0]
 810466c:	3301      	adds	r3, #1
 810466e:	4a3d      	ldr	r2, [pc, #244]	; (8104764 <xTaskIncrementTick+0x158>)
 8104670:	6013      	str	r3, [r2, #0]
 8104672:	f000 fb01 	bl	8104c78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8104676:	4b3c      	ldr	r3, [pc, #240]	; (8104768 <xTaskIncrementTick+0x15c>)
 8104678:	681b      	ldr	r3, [r3, #0]
 810467a:	693a      	ldr	r2, [r7, #16]
 810467c:	429a      	cmp	r2, r3
 810467e:	d349      	bcc.n	8104714 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8104680:	4b36      	ldr	r3, [pc, #216]	; (810475c <xTaskIncrementTick+0x150>)
 8104682:	681b      	ldr	r3, [r3, #0]
 8104684:	681b      	ldr	r3, [r3, #0]
 8104686:	2b00      	cmp	r3, #0
 8104688:	d104      	bne.n	8104694 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810468a:	4b37      	ldr	r3, [pc, #220]	; (8104768 <xTaskIncrementTick+0x15c>)
 810468c:	f04f 32ff 	mov.w	r2, #4294967295
 8104690:	601a      	str	r2, [r3, #0]
					break;
 8104692:	e03f      	b.n	8104714 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104694:	4b31      	ldr	r3, [pc, #196]	; (810475c <xTaskIncrementTick+0x150>)
 8104696:	681b      	ldr	r3, [r3, #0]
 8104698:	68db      	ldr	r3, [r3, #12]
 810469a:	68db      	ldr	r3, [r3, #12]
 810469c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810469e:	68bb      	ldr	r3, [r7, #8]
 81046a0:	685b      	ldr	r3, [r3, #4]
 81046a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 81046a4:	693a      	ldr	r2, [r7, #16]
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	429a      	cmp	r2, r3
 81046aa:	d203      	bcs.n	81046b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 81046ac:	4a2e      	ldr	r2, [pc, #184]	; (8104768 <xTaskIncrementTick+0x15c>)
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 81046b2:	e02f      	b.n	8104714 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81046b4:	68bb      	ldr	r3, [r7, #8]
 81046b6:	3304      	adds	r3, #4
 81046b8:	4618      	mov	r0, r3
 81046ba:	f7fe f9e7 	bl	8102a8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 81046be:	68bb      	ldr	r3, [r7, #8]
 81046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81046c2:	2b00      	cmp	r3, #0
 81046c4:	d004      	beq.n	81046d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81046c6:	68bb      	ldr	r3, [r7, #8]
 81046c8:	3318      	adds	r3, #24
 81046ca:	4618      	mov	r0, r3
 81046cc:	f7fe f9de 	bl	8102a8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 81046d0:	68bb      	ldr	r3, [r7, #8]
 81046d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81046d4:	4b25      	ldr	r3, [pc, #148]	; (810476c <xTaskIncrementTick+0x160>)
 81046d6:	681b      	ldr	r3, [r3, #0]
 81046d8:	429a      	cmp	r2, r3
 81046da:	d903      	bls.n	81046e4 <xTaskIncrementTick+0xd8>
 81046dc:	68bb      	ldr	r3, [r7, #8]
 81046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81046e0:	4a22      	ldr	r2, [pc, #136]	; (810476c <xTaskIncrementTick+0x160>)
 81046e2:	6013      	str	r3, [r2, #0]
 81046e4:	68bb      	ldr	r3, [r7, #8]
 81046e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81046e8:	4613      	mov	r3, r2
 81046ea:	009b      	lsls	r3, r3, #2
 81046ec:	4413      	add	r3, r2
 81046ee:	009b      	lsls	r3, r3, #2
 81046f0:	4a1f      	ldr	r2, [pc, #124]	; (8104770 <xTaskIncrementTick+0x164>)
 81046f2:	441a      	add	r2, r3
 81046f4:	68bb      	ldr	r3, [r7, #8]
 81046f6:	3304      	adds	r3, #4
 81046f8:	4619      	mov	r1, r3
 81046fa:	4610      	mov	r0, r2
 81046fc:	f7fe f969 	bl	81029d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8104700:	68bb      	ldr	r3, [r7, #8]
 8104702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104704:	4b1b      	ldr	r3, [pc, #108]	; (8104774 <xTaskIncrementTick+0x168>)
 8104706:	681b      	ldr	r3, [r3, #0]
 8104708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810470a:	429a      	cmp	r2, r3
 810470c:	d3b8      	bcc.n	8104680 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 810470e:	2301      	movs	r3, #1
 8104710:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8104712:	e7b5      	b.n	8104680 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8104714:	4b17      	ldr	r3, [pc, #92]	; (8104774 <xTaskIncrementTick+0x168>)
 8104716:	681b      	ldr	r3, [r3, #0]
 8104718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810471a:	4915      	ldr	r1, [pc, #84]	; (8104770 <xTaskIncrementTick+0x164>)
 810471c:	4613      	mov	r3, r2
 810471e:	009b      	lsls	r3, r3, #2
 8104720:	4413      	add	r3, r2
 8104722:	009b      	lsls	r3, r3, #2
 8104724:	440b      	add	r3, r1
 8104726:	681b      	ldr	r3, [r3, #0]
 8104728:	2b01      	cmp	r3, #1
 810472a:	d901      	bls.n	8104730 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 810472c:	2301      	movs	r3, #1
 810472e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8104730:	4b11      	ldr	r3, [pc, #68]	; (8104778 <xTaskIncrementTick+0x16c>)
 8104732:	681b      	ldr	r3, [r3, #0]
 8104734:	2b00      	cmp	r3, #0
 8104736:	d007      	beq.n	8104748 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8104738:	2301      	movs	r3, #1
 810473a:	617b      	str	r3, [r7, #20]
 810473c:	e004      	b.n	8104748 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810473e:	4b0f      	ldr	r3, [pc, #60]	; (810477c <xTaskIncrementTick+0x170>)
 8104740:	681b      	ldr	r3, [r3, #0]
 8104742:	3301      	adds	r3, #1
 8104744:	4a0d      	ldr	r2, [pc, #52]	; (810477c <xTaskIncrementTick+0x170>)
 8104746:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8104748:	697b      	ldr	r3, [r7, #20]
}
 810474a:	4618      	mov	r0, r3
 810474c:	3718      	adds	r7, #24
 810474e:	46bd      	mov	sp, r7
 8104750:	bd80      	pop	{r7, pc}
 8104752:	bf00      	nop
 8104754:	10004a14 	.word	0x10004a14
 8104758:	100049f0 	.word	0x100049f0
 810475c:	100049a4 	.word	0x100049a4
 8104760:	100049a8 	.word	0x100049a8
 8104764:	10004a04 	.word	0x10004a04
 8104768:	10004a0c 	.word	0x10004a0c
 810476c:	100049f4 	.word	0x100049f4
 8104770:	1000451c 	.word	0x1000451c
 8104774:	10004518 	.word	0x10004518
 8104778:	10004a00 	.word	0x10004a00
 810477c:	100049fc 	.word	0x100049fc

08104780 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8104780:	b480      	push	{r7}
 8104782:	b085      	sub	sp, #20
 8104784:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8104786:	4b2a      	ldr	r3, [pc, #168]	; (8104830 <vTaskSwitchContext+0xb0>)
 8104788:	681b      	ldr	r3, [r3, #0]
 810478a:	2b00      	cmp	r3, #0
 810478c:	d003      	beq.n	8104796 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810478e:	4b29      	ldr	r3, [pc, #164]	; (8104834 <vTaskSwitchContext+0xb4>)
 8104790:	2201      	movs	r2, #1
 8104792:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8104794:	e046      	b.n	8104824 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8104796:	4b27      	ldr	r3, [pc, #156]	; (8104834 <vTaskSwitchContext+0xb4>)
 8104798:	2200      	movs	r2, #0
 810479a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810479c:	4b26      	ldr	r3, [pc, #152]	; (8104838 <vTaskSwitchContext+0xb8>)
 810479e:	681b      	ldr	r3, [r3, #0]
 81047a0:	60fb      	str	r3, [r7, #12]
 81047a2:	e010      	b.n	81047c6 <vTaskSwitchContext+0x46>
 81047a4:	68fb      	ldr	r3, [r7, #12]
 81047a6:	2b00      	cmp	r3, #0
 81047a8:	d10a      	bne.n	81047c0 <vTaskSwitchContext+0x40>
	__asm volatile
 81047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81047ae:	f383 8811 	msr	BASEPRI, r3
 81047b2:	f3bf 8f6f 	isb	sy
 81047b6:	f3bf 8f4f 	dsb	sy
 81047ba:	607b      	str	r3, [r7, #4]
}
 81047bc:	bf00      	nop
 81047be:	e7fe      	b.n	81047be <vTaskSwitchContext+0x3e>
 81047c0:	68fb      	ldr	r3, [r7, #12]
 81047c2:	3b01      	subs	r3, #1
 81047c4:	60fb      	str	r3, [r7, #12]
 81047c6:	491d      	ldr	r1, [pc, #116]	; (810483c <vTaskSwitchContext+0xbc>)
 81047c8:	68fa      	ldr	r2, [r7, #12]
 81047ca:	4613      	mov	r3, r2
 81047cc:	009b      	lsls	r3, r3, #2
 81047ce:	4413      	add	r3, r2
 81047d0:	009b      	lsls	r3, r3, #2
 81047d2:	440b      	add	r3, r1
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	2b00      	cmp	r3, #0
 81047d8:	d0e4      	beq.n	81047a4 <vTaskSwitchContext+0x24>
 81047da:	68fa      	ldr	r2, [r7, #12]
 81047dc:	4613      	mov	r3, r2
 81047de:	009b      	lsls	r3, r3, #2
 81047e0:	4413      	add	r3, r2
 81047e2:	009b      	lsls	r3, r3, #2
 81047e4:	4a15      	ldr	r2, [pc, #84]	; (810483c <vTaskSwitchContext+0xbc>)
 81047e6:	4413      	add	r3, r2
 81047e8:	60bb      	str	r3, [r7, #8]
 81047ea:	68bb      	ldr	r3, [r7, #8]
 81047ec:	685b      	ldr	r3, [r3, #4]
 81047ee:	685a      	ldr	r2, [r3, #4]
 81047f0:	68bb      	ldr	r3, [r7, #8]
 81047f2:	605a      	str	r2, [r3, #4]
 81047f4:	68bb      	ldr	r3, [r7, #8]
 81047f6:	685a      	ldr	r2, [r3, #4]
 81047f8:	68bb      	ldr	r3, [r7, #8]
 81047fa:	3308      	adds	r3, #8
 81047fc:	429a      	cmp	r2, r3
 81047fe:	d104      	bne.n	810480a <vTaskSwitchContext+0x8a>
 8104800:	68bb      	ldr	r3, [r7, #8]
 8104802:	685b      	ldr	r3, [r3, #4]
 8104804:	685a      	ldr	r2, [r3, #4]
 8104806:	68bb      	ldr	r3, [r7, #8]
 8104808:	605a      	str	r2, [r3, #4]
 810480a:	68bb      	ldr	r3, [r7, #8]
 810480c:	685b      	ldr	r3, [r3, #4]
 810480e:	68db      	ldr	r3, [r3, #12]
 8104810:	4a0b      	ldr	r2, [pc, #44]	; (8104840 <vTaskSwitchContext+0xc0>)
 8104812:	6013      	str	r3, [r2, #0]
 8104814:	4a08      	ldr	r2, [pc, #32]	; (8104838 <vTaskSwitchContext+0xb8>)
 8104816:	68fb      	ldr	r3, [r7, #12]
 8104818:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810481a:	4b09      	ldr	r3, [pc, #36]	; (8104840 <vTaskSwitchContext+0xc0>)
 810481c:	681b      	ldr	r3, [r3, #0]
 810481e:	3354      	adds	r3, #84	; 0x54
 8104820:	4a08      	ldr	r2, [pc, #32]	; (8104844 <vTaskSwitchContext+0xc4>)
 8104822:	6013      	str	r3, [r2, #0]
}
 8104824:	bf00      	nop
 8104826:	3714      	adds	r7, #20
 8104828:	46bd      	mov	sp, r7
 810482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810482e:	4770      	bx	lr
 8104830:	10004a14 	.word	0x10004a14
 8104834:	10004a00 	.word	0x10004a00
 8104838:	100049f4 	.word	0x100049f4
 810483c:	1000451c 	.word	0x1000451c
 8104840:	10004518 	.word	0x10004518
 8104844:	10000014 	.word	0x10000014

08104848 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8104848:	b580      	push	{r7, lr}
 810484a:	b084      	sub	sp, #16
 810484c:	af00      	add	r7, sp, #0
 810484e:	6078      	str	r0, [r7, #4]
 8104850:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8104852:	687b      	ldr	r3, [r7, #4]
 8104854:	2b00      	cmp	r3, #0
 8104856:	d10a      	bne.n	810486e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8104858:	f04f 0350 	mov.w	r3, #80	; 0x50
 810485c:	f383 8811 	msr	BASEPRI, r3
 8104860:	f3bf 8f6f 	isb	sy
 8104864:	f3bf 8f4f 	dsb	sy
 8104868:	60fb      	str	r3, [r7, #12]
}
 810486a:	bf00      	nop
 810486c:	e7fe      	b.n	810486c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810486e:	4b07      	ldr	r3, [pc, #28]	; (810488c <vTaskPlaceOnEventList+0x44>)
 8104870:	681b      	ldr	r3, [r3, #0]
 8104872:	3318      	adds	r3, #24
 8104874:	4619      	mov	r1, r3
 8104876:	6878      	ldr	r0, [r7, #4]
 8104878:	f7fe f8cf 	bl	8102a1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810487c:	2101      	movs	r1, #1
 810487e:	6838      	ldr	r0, [r7, #0]
 8104880:	f000 fcf8 	bl	8105274 <prvAddCurrentTaskToDelayedList>
}
 8104884:	bf00      	nop
 8104886:	3710      	adds	r7, #16
 8104888:	46bd      	mov	sp, r7
 810488a:	bd80      	pop	{r7, pc}
 810488c:	10004518 	.word	0x10004518

08104890 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8104890:	b580      	push	{r7, lr}
 8104892:	b086      	sub	sp, #24
 8104894:	af00      	add	r7, sp, #0
 8104896:	60f8      	str	r0, [r7, #12]
 8104898:	60b9      	str	r1, [r7, #8]
 810489a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810489c:	68fb      	ldr	r3, [r7, #12]
 810489e:	2b00      	cmp	r3, #0
 81048a0:	d10a      	bne.n	81048b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 81048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81048a6:	f383 8811 	msr	BASEPRI, r3
 81048aa:	f3bf 8f6f 	isb	sy
 81048ae:	f3bf 8f4f 	dsb	sy
 81048b2:	617b      	str	r3, [r7, #20]
}
 81048b4:	bf00      	nop
 81048b6:	e7fe      	b.n	81048b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 81048b8:	4b0a      	ldr	r3, [pc, #40]	; (81048e4 <vTaskPlaceOnEventListRestricted+0x54>)
 81048ba:	681b      	ldr	r3, [r3, #0]
 81048bc:	3318      	adds	r3, #24
 81048be:	4619      	mov	r1, r3
 81048c0:	68f8      	ldr	r0, [r7, #12]
 81048c2:	f7fe f886 	bl	81029d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 81048c6:	687b      	ldr	r3, [r7, #4]
 81048c8:	2b00      	cmp	r3, #0
 81048ca:	d002      	beq.n	81048d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 81048cc:	f04f 33ff 	mov.w	r3, #4294967295
 81048d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 81048d2:	6879      	ldr	r1, [r7, #4]
 81048d4:	68b8      	ldr	r0, [r7, #8]
 81048d6:	f000 fccd 	bl	8105274 <prvAddCurrentTaskToDelayedList>
	}
 81048da:	bf00      	nop
 81048dc:	3718      	adds	r7, #24
 81048de:	46bd      	mov	sp, r7
 81048e0:	bd80      	pop	{r7, pc}
 81048e2:	bf00      	nop
 81048e4:	10004518 	.word	0x10004518

081048e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 81048e8:	b580      	push	{r7, lr}
 81048ea:	b086      	sub	sp, #24
 81048ec:	af00      	add	r7, sp, #0
 81048ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81048f0:	687b      	ldr	r3, [r7, #4]
 81048f2:	68db      	ldr	r3, [r3, #12]
 81048f4:	68db      	ldr	r3, [r3, #12]
 81048f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 81048f8:	693b      	ldr	r3, [r7, #16]
 81048fa:	2b00      	cmp	r3, #0
 81048fc:	d10a      	bne.n	8104914 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 81048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104902:	f383 8811 	msr	BASEPRI, r3
 8104906:	f3bf 8f6f 	isb	sy
 810490a:	f3bf 8f4f 	dsb	sy
 810490e:	60fb      	str	r3, [r7, #12]
}
 8104910:	bf00      	nop
 8104912:	e7fe      	b.n	8104912 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8104914:	693b      	ldr	r3, [r7, #16]
 8104916:	3318      	adds	r3, #24
 8104918:	4618      	mov	r0, r3
 810491a:	f7fe f8b7 	bl	8102a8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810491e:	4b1e      	ldr	r3, [pc, #120]	; (8104998 <xTaskRemoveFromEventList+0xb0>)
 8104920:	681b      	ldr	r3, [r3, #0]
 8104922:	2b00      	cmp	r3, #0
 8104924:	d11d      	bne.n	8104962 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8104926:	693b      	ldr	r3, [r7, #16]
 8104928:	3304      	adds	r3, #4
 810492a:	4618      	mov	r0, r3
 810492c:	f7fe f8ae 	bl	8102a8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8104930:	693b      	ldr	r3, [r7, #16]
 8104932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104934:	4b19      	ldr	r3, [pc, #100]	; (810499c <xTaskRemoveFromEventList+0xb4>)
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	429a      	cmp	r2, r3
 810493a:	d903      	bls.n	8104944 <xTaskRemoveFromEventList+0x5c>
 810493c:	693b      	ldr	r3, [r7, #16]
 810493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104940:	4a16      	ldr	r2, [pc, #88]	; (810499c <xTaskRemoveFromEventList+0xb4>)
 8104942:	6013      	str	r3, [r2, #0]
 8104944:	693b      	ldr	r3, [r7, #16]
 8104946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104948:	4613      	mov	r3, r2
 810494a:	009b      	lsls	r3, r3, #2
 810494c:	4413      	add	r3, r2
 810494e:	009b      	lsls	r3, r3, #2
 8104950:	4a13      	ldr	r2, [pc, #76]	; (81049a0 <xTaskRemoveFromEventList+0xb8>)
 8104952:	441a      	add	r2, r3
 8104954:	693b      	ldr	r3, [r7, #16]
 8104956:	3304      	adds	r3, #4
 8104958:	4619      	mov	r1, r3
 810495a:	4610      	mov	r0, r2
 810495c:	f7fe f839 	bl	81029d2 <vListInsertEnd>
 8104960:	e005      	b.n	810496e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8104962:	693b      	ldr	r3, [r7, #16]
 8104964:	3318      	adds	r3, #24
 8104966:	4619      	mov	r1, r3
 8104968:	480e      	ldr	r0, [pc, #56]	; (81049a4 <xTaskRemoveFromEventList+0xbc>)
 810496a:	f7fe f832 	bl	81029d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810496e:	693b      	ldr	r3, [r7, #16]
 8104970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104972:	4b0d      	ldr	r3, [pc, #52]	; (81049a8 <xTaskRemoveFromEventList+0xc0>)
 8104974:	681b      	ldr	r3, [r3, #0]
 8104976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104978:	429a      	cmp	r2, r3
 810497a:	d905      	bls.n	8104988 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810497c:	2301      	movs	r3, #1
 810497e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8104980:	4b0a      	ldr	r3, [pc, #40]	; (81049ac <xTaskRemoveFromEventList+0xc4>)
 8104982:	2201      	movs	r2, #1
 8104984:	601a      	str	r2, [r3, #0]
 8104986:	e001      	b.n	810498c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8104988:	2300      	movs	r3, #0
 810498a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810498c:	697b      	ldr	r3, [r7, #20]
}
 810498e:	4618      	mov	r0, r3
 8104990:	3718      	adds	r7, #24
 8104992:	46bd      	mov	sp, r7
 8104994:	bd80      	pop	{r7, pc}
 8104996:	bf00      	nop
 8104998:	10004a14 	.word	0x10004a14
 810499c:	100049f4 	.word	0x100049f4
 81049a0:	1000451c 	.word	0x1000451c
 81049a4:	100049ac 	.word	0x100049ac
 81049a8:	10004518 	.word	0x10004518
 81049ac:	10004a00 	.word	0x10004a00

081049b0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 81049b0:	b580      	push	{r7, lr}
 81049b2:	b084      	sub	sp, #16
 81049b4:	af00      	add	r7, sp, #0
 81049b6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 81049b8:	687b      	ldr	r3, [r7, #4]
 81049ba:	2b00      	cmp	r3, #0
 81049bc:	d10a      	bne.n	81049d4 <vTaskSetTimeOutState+0x24>
	__asm volatile
 81049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 81049c2:	f383 8811 	msr	BASEPRI, r3
 81049c6:	f3bf 8f6f 	isb	sy
 81049ca:	f3bf 8f4f 	dsb	sy
 81049ce:	60fb      	str	r3, [r7, #12]
}
 81049d0:	bf00      	nop
 81049d2:	e7fe      	b.n	81049d2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 81049d4:	f7fe f9ae 	bl	8102d34 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 81049d8:	4b06      	ldr	r3, [pc, #24]	; (81049f4 <vTaskSetTimeOutState+0x44>)
 81049da:	681a      	ldr	r2, [r3, #0]
 81049dc:	687b      	ldr	r3, [r7, #4]
 81049de:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 81049e0:	4b05      	ldr	r3, [pc, #20]	; (81049f8 <vTaskSetTimeOutState+0x48>)
 81049e2:	681a      	ldr	r2, [r3, #0]
 81049e4:	687b      	ldr	r3, [r7, #4]
 81049e6:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 81049e8:	f7fe f9d4 	bl	8102d94 <vPortExitCritical>
}
 81049ec:	bf00      	nop
 81049ee:	3710      	adds	r7, #16
 81049f0:	46bd      	mov	sp, r7
 81049f2:	bd80      	pop	{r7, pc}
 81049f4:	10004a04 	.word	0x10004a04
 81049f8:	100049f0 	.word	0x100049f0

081049fc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 81049fc:	b480      	push	{r7}
 81049fe:	b083      	sub	sp, #12
 8104a00:	af00      	add	r7, sp, #0
 8104a02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8104a04:	4b06      	ldr	r3, [pc, #24]	; (8104a20 <vTaskInternalSetTimeOutState+0x24>)
 8104a06:	681a      	ldr	r2, [r3, #0]
 8104a08:	687b      	ldr	r3, [r7, #4]
 8104a0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8104a0c:	4b05      	ldr	r3, [pc, #20]	; (8104a24 <vTaskInternalSetTimeOutState+0x28>)
 8104a0e:	681a      	ldr	r2, [r3, #0]
 8104a10:	687b      	ldr	r3, [r7, #4]
 8104a12:	605a      	str	r2, [r3, #4]
}
 8104a14:	bf00      	nop
 8104a16:	370c      	adds	r7, #12
 8104a18:	46bd      	mov	sp, r7
 8104a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a1e:	4770      	bx	lr
 8104a20:	10004a04 	.word	0x10004a04
 8104a24:	100049f0 	.word	0x100049f0

08104a28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8104a28:	b580      	push	{r7, lr}
 8104a2a:	b088      	sub	sp, #32
 8104a2c:	af00      	add	r7, sp, #0
 8104a2e:	6078      	str	r0, [r7, #4]
 8104a30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8104a32:	687b      	ldr	r3, [r7, #4]
 8104a34:	2b00      	cmp	r3, #0
 8104a36:	d10a      	bne.n	8104a4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8104a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104a3c:	f383 8811 	msr	BASEPRI, r3
 8104a40:	f3bf 8f6f 	isb	sy
 8104a44:	f3bf 8f4f 	dsb	sy
 8104a48:	613b      	str	r3, [r7, #16]
}
 8104a4a:	bf00      	nop
 8104a4c:	e7fe      	b.n	8104a4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8104a4e:	683b      	ldr	r3, [r7, #0]
 8104a50:	2b00      	cmp	r3, #0
 8104a52:	d10a      	bne.n	8104a6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8104a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104a58:	f383 8811 	msr	BASEPRI, r3
 8104a5c:	f3bf 8f6f 	isb	sy
 8104a60:	f3bf 8f4f 	dsb	sy
 8104a64:	60fb      	str	r3, [r7, #12]
}
 8104a66:	bf00      	nop
 8104a68:	e7fe      	b.n	8104a68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8104a6a:	f7fe f963 	bl	8102d34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8104a6e:	4b1d      	ldr	r3, [pc, #116]	; (8104ae4 <xTaskCheckForTimeOut+0xbc>)
 8104a70:	681b      	ldr	r3, [r3, #0]
 8104a72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8104a74:	687b      	ldr	r3, [r7, #4]
 8104a76:	685b      	ldr	r3, [r3, #4]
 8104a78:	69ba      	ldr	r2, [r7, #24]
 8104a7a:	1ad3      	subs	r3, r2, r3
 8104a7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8104a7e:	683b      	ldr	r3, [r7, #0]
 8104a80:	681b      	ldr	r3, [r3, #0]
 8104a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104a86:	d102      	bne.n	8104a8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8104a88:	2300      	movs	r3, #0
 8104a8a:	61fb      	str	r3, [r7, #28]
 8104a8c:	e023      	b.n	8104ad6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8104a8e:	687b      	ldr	r3, [r7, #4]
 8104a90:	681a      	ldr	r2, [r3, #0]
 8104a92:	4b15      	ldr	r3, [pc, #84]	; (8104ae8 <xTaskCheckForTimeOut+0xc0>)
 8104a94:	681b      	ldr	r3, [r3, #0]
 8104a96:	429a      	cmp	r2, r3
 8104a98:	d007      	beq.n	8104aaa <xTaskCheckForTimeOut+0x82>
 8104a9a:	687b      	ldr	r3, [r7, #4]
 8104a9c:	685b      	ldr	r3, [r3, #4]
 8104a9e:	69ba      	ldr	r2, [r7, #24]
 8104aa0:	429a      	cmp	r2, r3
 8104aa2:	d302      	bcc.n	8104aaa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8104aa4:	2301      	movs	r3, #1
 8104aa6:	61fb      	str	r3, [r7, #28]
 8104aa8:	e015      	b.n	8104ad6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8104aaa:	683b      	ldr	r3, [r7, #0]
 8104aac:	681b      	ldr	r3, [r3, #0]
 8104aae:	697a      	ldr	r2, [r7, #20]
 8104ab0:	429a      	cmp	r2, r3
 8104ab2:	d20b      	bcs.n	8104acc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8104ab4:	683b      	ldr	r3, [r7, #0]
 8104ab6:	681a      	ldr	r2, [r3, #0]
 8104ab8:	697b      	ldr	r3, [r7, #20]
 8104aba:	1ad2      	subs	r2, r2, r3
 8104abc:	683b      	ldr	r3, [r7, #0]
 8104abe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8104ac0:	6878      	ldr	r0, [r7, #4]
 8104ac2:	f7ff ff9b 	bl	81049fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8104ac6:	2300      	movs	r3, #0
 8104ac8:	61fb      	str	r3, [r7, #28]
 8104aca:	e004      	b.n	8104ad6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8104acc:	683b      	ldr	r3, [r7, #0]
 8104ace:	2200      	movs	r2, #0
 8104ad0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8104ad2:	2301      	movs	r3, #1
 8104ad4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8104ad6:	f7fe f95d 	bl	8102d94 <vPortExitCritical>

	return xReturn;
 8104ada:	69fb      	ldr	r3, [r7, #28]
}
 8104adc:	4618      	mov	r0, r3
 8104ade:	3720      	adds	r7, #32
 8104ae0:	46bd      	mov	sp, r7
 8104ae2:	bd80      	pop	{r7, pc}
 8104ae4:	100049f0 	.word	0x100049f0
 8104ae8:	10004a04 	.word	0x10004a04

08104aec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8104aec:	b480      	push	{r7}
 8104aee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8104af0:	4b03      	ldr	r3, [pc, #12]	; (8104b00 <vTaskMissedYield+0x14>)
 8104af2:	2201      	movs	r2, #1
 8104af4:	601a      	str	r2, [r3, #0]
}
 8104af6:	bf00      	nop
 8104af8:	46bd      	mov	sp, r7
 8104afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104afe:	4770      	bx	lr
 8104b00:	10004a00 	.word	0x10004a00

08104b04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8104b04:	b580      	push	{r7, lr}
 8104b06:	b082      	sub	sp, #8
 8104b08:	af00      	add	r7, sp, #0
 8104b0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8104b0c:	f000 f852 	bl	8104bb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8104b10:	4b06      	ldr	r3, [pc, #24]	; (8104b2c <prvIdleTask+0x28>)
 8104b12:	681b      	ldr	r3, [r3, #0]
 8104b14:	2b01      	cmp	r3, #1
 8104b16:	d9f9      	bls.n	8104b0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8104b18:	4b05      	ldr	r3, [pc, #20]	; (8104b30 <prvIdleTask+0x2c>)
 8104b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8104b1e:	601a      	str	r2, [r3, #0]
 8104b20:	f3bf 8f4f 	dsb	sy
 8104b24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8104b28:	e7f0      	b.n	8104b0c <prvIdleTask+0x8>
 8104b2a:	bf00      	nop
 8104b2c:	1000451c 	.word	0x1000451c
 8104b30:	e000ed04 	.word	0xe000ed04

08104b34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8104b34:	b580      	push	{r7, lr}
 8104b36:	b082      	sub	sp, #8
 8104b38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8104b3a:	2300      	movs	r3, #0
 8104b3c:	607b      	str	r3, [r7, #4]
 8104b3e:	e00c      	b.n	8104b5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8104b40:	687a      	ldr	r2, [r7, #4]
 8104b42:	4613      	mov	r3, r2
 8104b44:	009b      	lsls	r3, r3, #2
 8104b46:	4413      	add	r3, r2
 8104b48:	009b      	lsls	r3, r3, #2
 8104b4a:	4a12      	ldr	r2, [pc, #72]	; (8104b94 <prvInitialiseTaskLists+0x60>)
 8104b4c:	4413      	add	r3, r2
 8104b4e:	4618      	mov	r0, r3
 8104b50:	f7fd ff12 	bl	8102978 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8104b54:	687b      	ldr	r3, [r7, #4]
 8104b56:	3301      	adds	r3, #1
 8104b58:	607b      	str	r3, [r7, #4]
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	2b37      	cmp	r3, #55	; 0x37
 8104b5e:	d9ef      	bls.n	8104b40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8104b60:	480d      	ldr	r0, [pc, #52]	; (8104b98 <prvInitialiseTaskLists+0x64>)
 8104b62:	f7fd ff09 	bl	8102978 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8104b66:	480d      	ldr	r0, [pc, #52]	; (8104b9c <prvInitialiseTaskLists+0x68>)
 8104b68:	f7fd ff06 	bl	8102978 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8104b6c:	480c      	ldr	r0, [pc, #48]	; (8104ba0 <prvInitialiseTaskLists+0x6c>)
 8104b6e:	f7fd ff03 	bl	8102978 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8104b72:	480c      	ldr	r0, [pc, #48]	; (8104ba4 <prvInitialiseTaskLists+0x70>)
 8104b74:	f7fd ff00 	bl	8102978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8104b78:	480b      	ldr	r0, [pc, #44]	; (8104ba8 <prvInitialiseTaskLists+0x74>)
 8104b7a:	f7fd fefd 	bl	8102978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8104b7e:	4b0b      	ldr	r3, [pc, #44]	; (8104bac <prvInitialiseTaskLists+0x78>)
 8104b80:	4a05      	ldr	r2, [pc, #20]	; (8104b98 <prvInitialiseTaskLists+0x64>)
 8104b82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8104b84:	4b0a      	ldr	r3, [pc, #40]	; (8104bb0 <prvInitialiseTaskLists+0x7c>)
 8104b86:	4a05      	ldr	r2, [pc, #20]	; (8104b9c <prvInitialiseTaskLists+0x68>)
 8104b88:	601a      	str	r2, [r3, #0]
}
 8104b8a:	bf00      	nop
 8104b8c:	3708      	adds	r7, #8
 8104b8e:	46bd      	mov	sp, r7
 8104b90:	bd80      	pop	{r7, pc}
 8104b92:	bf00      	nop
 8104b94:	1000451c 	.word	0x1000451c
 8104b98:	1000497c 	.word	0x1000497c
 8104b9c:	10004990 	.word	0x10004990
 8104ba0:	100049ac 	.word	0x100049ac
 8104ba4:	100049c0 	.word	0x100049c0
 8104ba8:	100049d8 	.word	0x100049d8
 8104bac:	100049a4 	.word	0x100049a4
 8104bb0:	100049a8 	.word	0x100049a8

08104bb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8104bb4:	b580      	push	{r7, lr}
 8104bb6:	b082      	sub	sp, #8
 8104bb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8104bba:	e019      	b.n	8104bf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8104bbc:	f7fe f8ba 	bl	8102d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104bc0:	4b10      	ldr	r3, [pc, #64]	; (8104c04 <prvCheckTasksWaitingTermination+0x50>)
 8104bc2:	68db      	ldr	r3, [r3, #12]
 8104bc4:	68db      	ldr	r3, [r3, #12]
 8104bc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8104bc8:	687b      	ldr	r3, [r7, #4]
 8104bca:	3304      	adds	r3, #4
 8104bcc:	4618      	mov	r0, r3
 8104bce:	f7fd ff5d 	bl	8102a8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8104bd2:	4b0d      	ldr	r3, [pc, #52]	; (8104c08 <prvCheckTasksWaitingTermination+0x54>)
 8104bd4:	681b      	ldr	r3, [r3, #0]
 8104bd6:	3b01      	subs	r3, #1
 8104bd8:	4a0b      	ldr	r2, [pc, #44]	; (8104c08 <prvCheckTasksWaitingTermination+0x54>)
 8104bda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8104bdc:	4b0b      	ldr	r3, [pc, #44]	; (8104c0c <prvCheckTasksWaitingTermination+0x58>)
 8104bde:	681b      	ldr	r3, [r3, #0]
 8104be0:	3b01      	subs	r3, #1
 8104be2:	4a0a      	ldr	r2, [pc, #40]	; (8104c0c <prvCheckTasksWaitingTermination+0x58>)
 8104be4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8104be6:	f7fe f8d5 	bl	8102d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8104bea:	6878      	ldr	r0, [r7, #4]
 8104bec:	f000 f810 	bl	8104c10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8104bf0:	4b06      	ldr	r3, [pc, #24]	; (8104c0c <prvCheckTasksWaitingTermination+0x58>)
 8104bf2:	681b      	ldr	r3, [r3, #0]
 8104bf4:	2b00      	cmp	r3, #0
 8104bf6:	d1e1      	bne.n	8104bbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8104bf8:	bf00      	nop
 8104bfa:	bf00      	nop
 8104bfc:	3708      	adds	r7, #8
 8104bfe:	46bd      	mov	sp, r7
 8104c00:	bd80      	pop	{r7, pc}
 8104c02:	bf00      	nop
 8104c04:	100049c0 	.word	0x100049c0
 8104c08:	100049ec 	.word	0x100049ec
 8104c0c:	100049d4 	.word	0x100049d4

08104c10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8104c10:	b580      	push	{r7, lr}
 8104c12:	b084      	sub	sp, #16
 8104c14:	af00      	add	r7, sp, #0
 8104c16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8104c18:	687b      	ldr	r3, [r7, #4]
 8104c1a:	3354      	adds	r3, #84	; 0x54
 8104c1c:	4618      	mov	r0, r3
 8104c1e:	f000 ff15 	bl	8105a4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8104c22:	687b      	ldr	r3, [r7, #4]
 8104c24:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8104c28:	2b00      	cmp	r3, #0
 8104c2a:	d108      	bne.n	8104c3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8104c2c:	687b      	ldr	r3, [r7, #4]
 8104c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104c30:	4618      	mov	r0, r3
 8104c32:	f7fd fd83 	bl	810273c <vPortFree>
				vPortFree( pxTCB );
 8104c36:	6878      	ldr	r0, [r7, #4]
 8104c38:	f7fd fd80 	bl	810273c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8104c3c:	e018      	b.n	8104c70 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8104c3e:	687b      	ldr	r3, [r7, #4]
 8104c40:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8104c44:	2b01      	cmp	r3, #1
 8104c46:	d103      	bne.n	8104c50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8104c48:	6878      	ldr	r0, [r7, #4]
 8104c4a:	f7fd fd77 	bl	810273c <vPortFree>
	}
 8104c4e:	e00f      	b.n	8104c70 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8104c50:	687b      	ldr	r3, [r7, #4]
 8104c52:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8104c56:	2b02      	cmp	r3, #2
 8104c58:	d00a      	beq.n	8104c70 <prvDeleteTCB+0x60>
	__asm volatile
 8104c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104c5e:	f383 8811 	msr	BASEPRI, r3
 8104c62:	f3bf 8f6f 	isb	sy
 8104c66:	f3bf 8f4f 	dsb	sy
 8104c6a:	60fb      	str	r3, [r7, #12]
}
 8104c6c:	bf00      	nop
 8104c6e:	e7fe      	b.n	8104c6e <prvDeleteTCB+0x5e>
	}
 8104c70:	bf00      	nop
 8104c72:	3710      	adds	r7, #16
 8104c74:	46bd      	mov	sp, r7
 8104c76:	bd80      	pop	{r7, pc}

08104c78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8104c78:	b480      	push	{r7}
 8104c7a:	b083      	sub	sp, #12
 8104c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8104c7e:	4b0c      	ldr	r3, [pc, #48]	; (8104cb0 <prvResetNextTaskUnblockTime+0x38>)
 8104c80:	681b      	ldr	r3, [r3, #0]
 8104c82:	681b      	ldr	r3, [r3, #0]
 8104c84:	2b00      	cmp	r3, #0
 8104c86:	d104      	bne.n	8104c92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8104c88:	4b0a      	ldr	r3, [pc, #40]	; (8104cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8104c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8104c8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8104c90:	e008      	b.n	8104ca4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104c92:	4b07      	ldr	r3, [pc, #28]	; (8104cb0 <prvResetNextTaskUnblockTime+0x38>)
 8104c94:	681b      	ldr	r3, [r3, #0]
 8104c96:	68db      	ldr	r3, [r3, #12]
 8104c98:	68db      	ldr	r3, [r3, #12]
 8104c9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8104c9c:	687b      	ldr	r3, [r7, #4]
 8104c9e:	685b      	ldr	r3, [r3, #4]
 8104ca0:	4a04      	ldr	r2, [pc, #16]	; (8104cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8104ca2:	6013      	str	r3, [r2, #0]
}
 8104ca4:	bf00      	nop
 8104ca6:	370c      	adds	r7, #12
 8104ca8:	46bd      	mov	sp, r7
 8104caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cae:	4770      	bx	lr
 8104cb0:	100049a4 	.word	0x100049a4
 8104cb4:	10004a0c 	.word	0x10004a0c

08104cb8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8104cb8:	b480      	push	{r7}
 8104cba:	b083      	sub	sp, #12
 8104cbc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8104cbe:	4b05      	ldr	r3, [pc, #20]	; (8104cd4 <xTaskGetCurrentTaskHandle+0x1c>)
 8104cc0:	681b      	ldr	r3, [r3, #0]
 8104cc2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8104cc4:	687b      	ldr	r3, [r7, #4]
	}
 8104cc6:	4618      	mov	r0, r3
 8104cc8:	370c      	adds	r7, #12
 8104cca:	46bd      	mov	sp, r7
 8104ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cd0:	4770      	bx	lr
 8104cd2:	bf00      	nop
 8104cd4:	10004518 	.word	0x10004518

08104cd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8104cd8:	b480      	push	{r7}
 8104cda:	b083      	sub	sp, #12
 8104cdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8104cde:	4b0b      	ldr	r3, [pc, #44]	; (8104d0c <xTaskGetSchedulerState+0x34>)
 8104ce0:	681b      	ldr	r3, [r3, #0]
 8104ce2:	2b00      	cmp	r3, #0
 8104ce4:	d102      	bne.n	8104cec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8104ce6:	2301      	movs	r3, #1
 8104ce8:	607b      	str	r3, [r7, #4]
 8104cea:	e008      	b.n	8104cfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8104cec:	4b08      	ldr	r3, [pc, #32]	; (8104d10 <xTaskGetSchedulerState+0x38>)
 8104cee:	681b      	ldr	r3, [r3, #0]
 8104cf0:	2b00      	cmp	r3, #0
 8104cf2:	d102      	bne.n	8104cfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8104cf4:	2302      	movs	r3, #2
 8104cf6:	607b      	str	r3, [r7, #4]
 8104cf8:	e001      	b.n	8104cfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8104cfa:	2300      	movs	r3, #0
 8104cfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8104cfe:	687b      	ldr	r3, [r7, #4]
	}
 8104d00:	4618      	mov	r0, r3
 8104d02:	370c      	adds	r7, #12
 8104d04:	46bd      	mov	sp, r7
 8104d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d0a:	4770      	bx	lr
 8104d0c:	100049f8 	.word	0x100049f8
 8104d10:	10004a14 	.word	0x10004a14

08104d14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8104d14:	b580      	push	{r7, lr}
 8104d16:	b084      	sub	sp, #16
 8104d18:	af00      	add	r7, sp, #0
 8104d1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8104d1c:	687b      	ldr	r3, [r7, #4]
 8104d1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8104d20:	2300      	movs	r3, #0
 8104d22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8104d24:	687b      	ldr	r3, [r7, #4]
 8104d26:	2b00      	cmp	r3, #0
 8104d28:	d051      	beq.n	8104dce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8104d2a:	68bb      	ldr	r3, [r7, #8]
 8104d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104d2e:	4b2a      	ldr	r3, [pc, #168]	; (8104dd8 <xTaskPriorityInherit+0xc4>)
 8104d30:	681b      	ldr	r3, [r3, #0]
 8104d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d34:	429a      	cmp	r2, r3
 8104d36:	d241      	bcs.n	8104dbc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8104d38:	68bb      	ldr	r3, [r7, #8]
 8104d3a:	699b      	ldr	r3, [r3, #24]
 8104d3c:	2b00      	cmp	r3, #0
 8104d3e:	db06      	blt.n	8104d4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8104d40:	4b25      	ldr	r3, [pc, #148]	; (8104dd8 <xTaskPriorityInherit+0xc4>)
 8104d42:	681b      	ldr	r3, [r3, #0]
 8104d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8104d4a:	68bb      	ldr	r3, [r7, #8]
 8104d4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8104d4e:	68bb      	ldr	r3, [r7, #8]
 8104d50:	6959      	ldr	r1, [r3, #20]
 8104d52:	68bb      	ldr	r3, [r7, #8]
 8104d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104d56:	4613      	mov	r3, r2
 8104d58:	009b      	lsls	r3, r3, #2
 8104d5a:	4413      	add	r3, r2
 8104d5c:	009b      	lsls	r3, r3, #2
 8104d5e:	4a1f      	ldr	r2, [pc, #124]	; (8104ddc <xTaskPriorityInherit+0xc8>)
 8104d60:	4413      	add	r3, r2
 8104d62:	4299      	cmp	r1, r3
 8104d64:	d122      	bne.n	8104dac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8104d66:	68bb      	ldr	r3, [r7, #8]
 8104d68:	3304      	adds	r3, #4
 8104d6a:	4618      	mov	r0, r3
 8104d6c:	f7fd fe8e 	bl	8102a8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8104d70:	4b19      	ldr	r3, [pc, #100]	; (8104dd8 <xTaskPriorityInherit+0xc4>)
 8104d72:	681b      	ldr	r3, [r3, #0]
 8104d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104d76:	68bb      	ldr	r3, [r7, #8]
 8104d78:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8104d7a:	68bb      	ldr	r3, [r7, #8]
 8104d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104d7e:	4b18      	ldr	r3, [pc, #96]	; (8104de0 <xTaskPriorityInherit+0xcc>)
 8104d80:	681b      	ldr	r3, [r3, #0]
 8104d82:	429a      	cmp	r2, r3
 8104d84:	d903      	bls.n	8104d8e <xTaskPriorityInherit+0x7a>
 8104d86:	68bb      	ldr	r3, [r7, #8]
 8104d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d8a:	4a15      	ldr	r2, [pc, #84]	; (8104de0 <xTaskPriorityInherit+0xcc>)
 8104d8c:	6013      	str	r3, [r2, #0]
 8104d8e:	68bb      	ldr	r3, [r7, #8]
 8104d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104d92:	4613      	mov	r3, r2
 8104d94:	009b      	lsls	r3, r3, #2
 8104d96:	4413      	add	r3, r2
 8104d98:	009b      	lsls	r3, r3, #2
 8104d9a:	4a10      	ldr	r2, [pc, #64]	; (8104ddc <xTaskPriorityInherit+0xc8>)
 8104d9c:	441a      	add	r2, r3
 8104d9e:	68bb      	ldr	r3, [r7, #8]
 8104da0:	3304      	adds	r3, #4
 8104da2:	4619      	mov	r1, r3
 8104da4:	4610      	mov	r0, r2
 8104da6:	f7fd fe14 	bl	81029d2 <vListInsertEnd>
 8104daa:	e004      	b.n	8104db6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8104dac:	4b0a      	ldr	r3, [pc, #40]	; (8104dd8 <xTaskPriorityInherit+0xc4>)
 8104dae:	681b      	ldr	r3, [r3, #0]
 8104db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104db2:	68bb      	ldr	r3, [r7, #8]
 8104db4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8104db6:	2301      	movs	r3, #1
 8104db8:	60fb      	str	r3, [r7, #12]
 8104dba:	e008      	b.n	8104dce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8104dbc:	68bb      	ldr	r3, [r7, #8]
 8104dbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8104dc0:	4b05      	ldr	r3, [pc, #20]	; (8104dd8 <xTaskPriorityInherit+0xc4>)
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104dc6:	429a      	cmp	r2, r3
 8104dc8:	d201      	bcs.n	8104dce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8104dca:	2301      	movs	r3, #1
 8104dcc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8104dce:	68fb      	ldr	r3, [r7, #12]
	}
 8104dd0:	4618      	mov	r0, r3
 8104dd2:	3710      	adds	r7, #16
 8104dd4:	46bd      	mov	sp, r7
 8104dd6:	bd80      	pop	{r7, pc}
 8104dd8:	10004518 	.word	0x10004518
 8104ddc:	1000451c 	.word	0x1000451c
 8104de0:	100049f4 	.word	0x100049f4

08104de4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8104de4:	b580      	push	{r7, lr}
 8104de6:	b086      	sub	sp, #24
 8104de8:	af00      	add	r7, sp, #0
 8104dea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8104dec:	687b      	ldr	r3, [r7, #4]
 8104dee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8104df0:	2300      	movs	r3, #0
 8104df2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8104df4:	687b      	ldr	r3, [r7, #4]
 8104df6:	2b00      	cmp	r3, #0
 8104df8:	d056      	beq.n	8104ea8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8104dfa:	4b2e      	ldr	r3, [pc, #184]	; (8104eb4 <xTaskPriorityDisinherit+0xd0>)
 8104dfc:	681b      	ldr	r3, [r3, #0]
 8104dfe:	693a      	ldr	r2, [r7, #16]
 8104e00:	429a      	cmp	r2, r3
 8104e02:	d00a      	beq.n	8104e1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8104e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104e08:	f383 8811 	msr	BASEPRI, r3
 8104e0c:	f3bf 8f6f 	isb	sy
 8104e10:	f3bf 8f4f 	dsb	sy
 8104e14:	60fb      	str	r3, [r7, #12]
}
 8104e16:	bf00      	nop
 8104e18:	e7fe      	b.n	8104e18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8104e1a:	693b      	ldr	r3, [r7, #16]
 8104e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e1e:	2b00      	cmp	r3, #0
 8104e20:	d10a      	bne.n	8104e38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8104e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104e26:	f383 8811 	msr	BASEPRI, r3
 8104e2a:	f3bf 8f6f 	isb	sy
 8104e2e:	f3bf 8f4f 	dsb	sy
 8104e32:	60bb      	str	r3, [r7, #8]
}
 8104e34:	bf00      	nop
 8104e36:	e7fe      	b.n	8104e36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8104e38:	693b      	ldr	r3, [r7, #16]
 8104e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e3c:	1e5a      	subs	r2, r3, #1
 8104e3e:	693b      	ldr	r3, [r7, #16]
 8104e40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8104e42:	693b      	ldr	r3, [r7, #16]
 8104e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104e46:	693b      	ldr	r3, [r7, #16]
 8104e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104e4a:	429a      	cmp	r2, r3
 8104e4c:	d02c      	beq.n	8104ea8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8104e4e:	693b      	ldr	r3, [r7, #16]
 8104e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e52:	2b00      	cmp	r3, #0
 8104e54:	d128      	bne.n	8104ea8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8104e56:	693b      	ldr	r3, [r7, #16]
 8104e58:	3304      	adds	r3, #4
 8104e5a:	4618      	mov	r0, r3
 8104e5c:	f7fd fe16 	bl	8102a8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8104e60:	693b      	ldr	r3, [r7, #16]
 8104e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8104e64:	693b      	ldr	r3, [r7, #16]
 8104e66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8104e68:	693b      	ldr	r3, [r7, #16]
 8104e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8104e70:	693b      	ldr	r3, [r7, #16]
 8104e72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8104e74:	693b      	ldr	r3, [r7, #16]
 8104e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104e78:	4b0f      	ldr	r3, [pc, #60]	; (8104eb8 <xTaskPriorityDisinherit+0xd4>)
 8104e7a:	681b      	ldr	r3, [r3, #0]
 8104e7c:	429a      	cmp	r2, r3
 8104e7e:	d903      	bls.n	8104e88 <xTaskPriorityDisinherit+0xa4>
 8104e80:	693b      	ldr	r3, [r7, #16]
 8104e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e84:	4a0c      	ldr	r2, [pc, #48]	; (8104eb8 <xTaskPriorityDisinherit+0xd4>)
 8104e86:	6013      	str	r3, [r2, #0]
 8104e88:	693b      	ldr	r3, [r7, #16]
 8104e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104e8c:	4613      	mov	r3, r2
 8104e8e:	009b      	lsls	r3, r3, #2
 8104e90:	4413      	add	r3, r2
 8104e92:	009b      	lsls	r3, r3, #2
 8104e94:	4a09      	ldr	r2, [pc, #36]	; (8104ebc <xTaskPriorityDisinherit+0xd8>)
 8104e96:	441a      	add	r2, r3
 8104e98:	693b      	ldr	r3, [r7, #16]
 8104e9a:	3304      	adds	r3, #4
 8104e9c:	4619      	mov	r1, r3
 8104e9e:	4610      	mov	r0, r2
 8104ea0:	f7fd fd97 	bl	81029d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8104ea4:	2301      	movs	r3, #1
 8104ea6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8104ea8:	697b      	ldr	r3, [r7, #20]
	}
 8104eaa:	4618      	mov	r0, r3
 8104eac:	3718      	adds	r7, #24
 8104eae:	46bd      	mov	sp, r7
 8104eb0:	bd80      	pop	{r7, pc}
 8104eb2:	bf00      	nop
 8104eb4:	10004518 	.word	0x10004518
 8104eb8:	100049f4 	.word	0x100049f4
 8104ebc:	1000451c 	.word	0x1000451c

08104ec0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8104ec0:	b580      	push	{r7, lr}
 8104ec2:	b088      	sub	sp, #32
 8104ec4:	af00      	add	r7, sp, #0
 8104ec6:	6078      	str	r0, [r7, #4]
 8104ec8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8104eca:	687b      	ldr	r3, [r7, #4]
 8104ecc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8104ece:	2301      	movs	r3, #1
 8104ed0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8104ed2:	687b      	ldr	r3, [r7, #4]
 8104ed4:	2b00      	cmp	r3, #0
 8104ed6:	d06a      	beq.n	8104fae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8104ed8:	69bb      	ldr	r3, [r7, #24]
 8104eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104edc:	2b00      	cmp	r3, #0
 8104ede:	d10a      	bne.n	8104ef6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8104ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104ee4:	f383 8811 	msr	BASEPRI, r3
 8104ee8:	f3bf 8f6f 	isb	sy
 8104eec:	f3bf 8f4f 	dsb	sy
 8104ef0:	60fb      	str	r3, [r7, #12]
}
 8104ef2:	bf00      	nop
 8104ef4:	e7fe      	b.n	8104ef4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8104ef6:	69bb      	ldr	r3, [r7, #24]
 8104ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104efa:	683a      	ldr	r2, [r7, #0]
 8104efc:	429a      	cmp	r2, r3
 8104efe:	d902      	bls.n	8104f06 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8104f00:	683b      	ldr	r3, [r7, #0]
 8104f02:	61fb      	str	r3, [r7, #28]
 8104f04:	e002      	b.n	8104f0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8104f06:	69bb      	ldr	r3, [r7, #24]
 8104f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104f0a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8104f0c:	69bb      	ldr	r3, [r7, #24]
 8104f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f10:	69fa      	ldr	r2, [r7, #28]
 8104f12:	429a      	cmp	r2, r3
 8104f14:	d04b      	beq.n	8104fae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8104f16:	69bb      	ldr	r3, [r7, #24]
 8104f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f1a:	697a      	ldr	r2, [r7, #20]
 8104f1c:	429a      	cmp	r2, r3
 8104f1e:	d146      	bne.n	8104fae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8104f20:	4b25      	ldr	r3, [pc, #148]	; (8104fb8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8104f22:	681b      	ldr	r3, [r3, #0]
 8104f24:	69ba      	ldr	r2, [r7, #24]
 8104f26:	429a      	cmp	r2, r3
 8104f28:	d10a      	bne.n	8104f40 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8104f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104f2e:	f383 8811 	msr	BASEPRI, r3
 8104f32:	f3bf 8f6f 	isb	sy
 8104f36:	f3bf 8f4f 	dsb	sy
 8104f3a:	60bb      	str	r3, [r7, #8]
}
 8104f3c:	bf00      	nop
 8104f3e:	e7fe      	b.n	8104f3e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8104f40:	69bb      	ldr	r3, [r7, #24]
 8104f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f44:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8104f46:	69bb      	ldr	r3, [r7, #24]
 8104f48:	69fa      	ldr	r2, [r7, #28]
 8104f4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8104f4c:	69bb      	ldr	r3, [r7, #24]
 8104f4e:	699b      	ldr	r3, [r3, #24]
 8104f50:	2b00      	cmp	r3, #0
 8104f52:	db04      	blt.n	8104f5e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8104f54:	69fb      	ldr	r3, [r7, #28]
 8104f56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8104f5a:	69bb      	ldr	r3, [r7, #24]
 8104f5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8104f5e:	69bb      	ldr	r3, [r7, #24]
 8104f60:	6959      	ldr	r1, [r3, #20]
 8104f62:	693a      	ldr	r2, [r7, #16]
 8104f64:	4613      	mov	r3, r2
 8104f66:	009b      	lsls	r3, r3, #2
 8104f68:	4413      	add	r3, r2
 8104f6a:	009b      	lsls	r3, r3, #2
 8104f6c:	4a13      	ldr	r2, [pc, #76]	; (8104fbc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8104f6e:	4413      	add	r3, r2
 8104f70:	4299      	cmp	r1, r3
 8104f72:	d11c      	bne.n	8104fae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8104f74:	69bb      	ldr	r3, [r7, #24]
 8104f76:	3304      	adds	r3, #4
 8104f78:	4618      	mov	r0, r3
 8104f7a:	f7fd fd87 	bl	8102a8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8104f7e:	69bb      	ldr	r3, [r7, #24]
 8104f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104f82:	4b0f      	ldr	r3, [pc, #60]	; (8104fc0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8104f84:	681b      	ldr	r3, [r3, #0]
 8104f86:	429a      	cmp	r2, r3
 8104f88:	d903      	bls.n	8104f92 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8104f8a:	69bb      	ldr	r3, [r7, #24]
 8104f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f8e:	4a0c      	ldr	r2, [pc, #48]	; (8104fc0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8104f90:	6013      	str	r3, [r2, #0]
 8104f92:	69bb      	ldr	r3, [r7, #24]
 8104f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104f96:	4613      	mov	r3, r2
 8104f98:	009b      	lsls	r3, r3, #2
 8104f9a:	4413      	add	r3, r2
 8104f9c:	009b      	lsls	r3, r3, #2
 8104f9e:	4a07      	ldr	r2, [pc, #28]	; (8104fbc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8104fa0:	441a      	add	r2, r3
 8104fa2:	69bb      	ldr	r3, [r7, #24]
 8104fa4:	3304      	adds	r3, #4
 8104fa6:	4619      	mov	r1, r3
 8104fa8:	4610      	mov	r0, r2
 8104faa:	f7fd fd12 	bl	81029d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8104fae:	bf00      	nop
 8104fb0:	3720      	adds	r7, #32
 8104fb2:	46bd      	mov	sp, r7
 8104fb4:	bd80      	pop	{r7, pc}
 8104fb6:	bf00      	nop
 8104fb8:	10004518 	.word	0x10004518
 8104fbc:	1000451c 	.word	0x1000451c
 8104fc0:	100049f4 	.word	0x100049f4

08104fc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8104fc4:	b480      	push	{r7}
 8104fc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8104fc8:	4b07      	ldr	r3, [pc, #28]	; (8104fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8104fca:	681b      	ldr	r3, [r3, #0]
 8104fcc:	2b00      	cmp	r3, #0
 8104fce:	d004      	beq.n	8104fda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8104fd0:	4b05      	ldr	r3, [pc, #20]	; (8104fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8104fd2:	681b      	ldr	r3, [r3, #0]
 8104fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8104fd6:	3201      	adds	r2, #1
 8104fd8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8104fda:	4b03      	ldr	r3, [pc, #12]	; (8104fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8104fdc:	681b      	ldr	r3, [r3, #0]
	}
 8104fde:	4618      	mov	r0, r3
 8104fe0:	46bd      	mov	sp, r7
 8104fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fe6:	4770      	bx	lr
 8104fe8:	10004518 	.word	0x10004518

08104fec <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8104fec:	b580      	push	{r7, lr}
 8104fee:	b086      	sub	sp, #24
 8104ff0:	af00      	add	r7, sp, #0
 8104ff2:	60f8      	str	r0, [r7, #12]
 8104ff4:	60b9      	str	r1, [r7, #8]
 8104ff6:	607a      	str	r2, [r7, #4]
 8104ff8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8104ffa:	f7fd fe9b 	bl	8102d34 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8104ffe:	4b29      	ldr	r3, [pc, #164]	; (81050a4 <xTaskNotifyWait+0xb8>)
 8105000:	681b      	ldr	r3, [r3, #0]
 8105002:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8105006:	b2db      	uxtb	r3, r3
 8105008:	2b02      	cmp	r3, #2
 810500a:	d01c      	beq.n	8105046 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 810500c:	4b25      	ldr	r3, [pc, #148]	; (81050a4 <xTaskNotifyWait+0xb8>)
 810500e:	681b      	ldr	r3, [r3, #0]
 8105010:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8105014:	68fa      	ldr	r2, [r7, #12]
 8105016:	43d2      	mvns	r2, r2
 8105018:	400a      	ands	r2, r1
 810501a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 810501e:	4b21      	ldr	r3, [pc, #132]	; (81050a4 <xTaskNotifyWait+0xb8>)
 8105020:	681b      	ldr	r3, [r3, #0]
 8105022:	2201      	movs	r2, #1
 8105024:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8105028:	683b      	ldr	r3, [r7, #0]
 810502a:	2b00      	cmp	r3, #0
 810502c:	d00b      	beq.n	8105046 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810502e:	2101      	movs	r1, #1
 8105030:	6838      	ldr	r0, [r7, #0]
 8105032:	f000 f91f 	bl	8105274 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8105036:	4b1c      	ldr	r3, [pc, #112]	; (81050a8 <xTaskNotifyWait+0xbc>)
 8105038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810503c:	601a      	str	r2, [r3, #0]
 810503e:	f3bf 8f4f 	dsb	sy
 8105042:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8105046:	f7fd fea5 	bl	8102d94 <vPortExitCritical>

		taskENTER_CRITICAL();
 810504a:	f7fd fe73 	bl	8102d34 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 810504e:	687b      	ldr	r3, [r7, #4]
 8105050:	2b00      	cmp	r3, #0
 8105052:	d005      	beq.n	8105060 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8105054:	4b13      	ldr	r3, [pc, #76]	; (81050a4 <xTaskNotifyWait+0xb8>)
 8105056:	681b      	ldr	r3, [r3, #0]
 8105058:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 810505c:	687b      	ldr	r3, [r7, #4]
 810505e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8105060:	4b10      	ldr	r3, [pc, #64]	; (81050a4 <xTaskNotifyWait+0xb8>)
 8105062:	681b      	ldr	r3, [r3, #0]
 8105064:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8105068:	b2db      	uxtb	r3, r3
 810506a:	2b02      	cmp	r3, #2
 810506c:	d002      	beq.n	8105074 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 810506e:	2300      	movs	r3, #0
 8105070:	617b      	str	r3, [r7, #20]
 8105072:	e00a      	b.n	810508a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8105074:	4b0b      	ldr	r3, [pc, #44]	; (81050a4 <xTaskNotifyWait+0xb8>)
 8105076:	681b      	ldr	r3, [r3, #0]
 8105078:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 810507c:	68ba      	ldr	r2, [r7, #8]
 810507e:	43d2      	mvns	r2, r2
 8105080:	400a      	ands	r2, r1
 8105082:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8105086:	2301      	movs	r3, #1
 8105088:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810508a:	4b06      	ldr	r3, [pc, #24]	; (81050a4 <xTaskNotifyWait+0xb8>)
 810508c:	681b      	ldr	r3, [r3, #0]
 810508e:	2200      	movs	r2, #0
 8105090:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8105094:	f7fd fe7e 	bl	8102d94 <vPortExitCritical>

		return xReturn;
 8105098:	697b      	ldr	r3, [r7, #20]
	}
 810509a:	4618      	mov	r0, r3
 810509c:	3718      	adds	r7, #24
 810509e:	46bd      	mov	sp, r7
 81050a0:	bd80      	pop	{r7, pc}
 81050a2:	bf00      	nop
 81050a4:	10004518 	.word	0x10004518
 81050a8:	e000ed04 	.word	0xe000ed04

081050ac <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 81050ac:	b580      	push	{r7, lr}
 81050ae:	b08a      	sub	sp, #40	; 0x28
 81050b0:	af00      	add	r7, sp, #0
 81050b2:	60f8      	str	r0, [r7, #12]
 81050b4:	60b9      	str	r1, [r7, #8]
 81050b6:	603b      	str	r3, [r7, #0]
 81050b8:	4613      	mov	r3, r2
 81050ba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 81050bc:	2301      	movs	r3, #1
 81050be:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 81050c0:	68fb      	ldr	r3, [r7, #12]
 81050c2:	2b00      	cmp	r3, #0
 81050c4:	d10a      	bne.n	81050dc <xTaskGenericNotify+0x30>
	__asm volatile
 81050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81050ca:	f383 8811 	msr	BASEPRI, r3
 81050ce:	f3bf 8f6f 	isb	sy
 81050d2:	f3bf 8f4f 	dsb	sy
 81050d6:	61bb      	str	r3, [r7, #24]
}
 81050d8:	bf00      	nop
 81050da:	e7fe      	b.n	81050da <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 81050dc:	68fb      	ldr	r3, [r7, #12]
 81050de:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 81050e0:	f7fd fe28 	bl	8102d34 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 81050e4:	683b      	ldr	r3, [r7, #0]
 81050e6:	2b00      	cmp	r3, #0
 81050e8:	d004      	beq.n	81050f4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 81050ea:	6a3b      	ldr	r3, [r7, #32]
 81050ec:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 81050f0:	683b      	ldr	r3, [r7, #0]
 81050f2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 81050f4:	6a3b      	ldr	r3, [r7, #32]
 81050f6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 81050fa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 81050fc:	6a3b      	ldr	r3, [r7, #32]
 81050fe:	2202      	movs	r2, #2
 8105100:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8105104:	79fb      	ldrb	r3, [r7, #7]
 8105106:	2b04      	cmp	r3, #4
 8105108:	d82d      	bhi.n	8105166 <xTaskGenericNotify+0xba>
 810510a:	a201      	add	r2, pc, #4	; (adr r2, 8105110 <xTaskGenericNotify+0x64>)
 810510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105110:	08105189 	.word	0x08105189
 8105114:	08105125 	.word	0x08105125
 8105118:	08105137 	.word	0x08105137
 810511c:	08105147 	.word	0x08105147
 8105120:	08105151 	.word	0x08105151
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8105124:	6a3b      	ldr	r3, [r7, #32]
 8105126:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 810512a:	68bb      	ldr	r3, [r7, #8]
 810512c:	431a      	orrs	r2, r3
 810512e:	6a3b      	ldr	r3, [r7, #32]
 8105130:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8105134:	e02b      	b.n	810518e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8105136:	6a3b      	ldr	r3, [r7, #32]
 8105138:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810513c:	1c5a      	adds	r2, r3, #1
 810513e:	6a3b      	ldr	r3, [r7, #32]
 8105140:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8105144:	e023      	b.n	810518e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8105146:	6a3b      	ldr	r3, [r7, #32]
 8105148:	68ba      	ldr	r2, [r7, #8]
 810514a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 810514e:	e01e      	b.n	810518e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8105150:	7ffb      	ldrb	r3, [r7, #31]
 8105152:	2b02      	cmp	r3, #2
 8105154:	d004      	beq.n	8105160 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8105156:	6a3b      	ldr	r3, [r7, #32]
 8105158:	68ba      	ldr	r2, [r7, #8]
 810515a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 810515e:	e016      	b.n	810518e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8105160:	2300      	movs	r3, #0
 8105162:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8105164:	e013      	b.n	810518e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8105166:	6a3b      	ldr	r3, [r7, #32]
 8105168:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105170:	d00c      	beq.n	810518c <xTaskGenericNotify+0xe0>
	__asm volatile
 8105172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105176:	f383 8811 	msr	BASEPRI, r3
 810517a:	f3bf 8f6f 	isb	sy
 810517e:	f3bf 8f4f 	dsb	sy
 8105182:	617b      	str	r3, [r7, #20]
}
 8105184:	bf00      	nop
 8105186:	e7fe      	b.n	8105186 <xTaskGenericNotify+0xda>
					break;
 8105188:	bf00      	nop
 810518a:	e000      	b.n	810518e <xTaskGenericNotify+0xe2>

					break;
 810518c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 810518e:	7ffb      	ldrb	r3, [r7, #31]
 8105190:	2b01      	cmp	r3, #1
 8105192:	d13a      	bne.n	810520a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8105194:	6a3b      	ldr	r3, [r7, #32]
 8105196:	3304      	adds	r3, #4
 8105198:	4618      	mov	r0, r3
 810519a:	f7fd fc77 	bl	8102a8c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 810519e:	6a3b      	ldr	r3, [r7, #32]
 81051a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81051a2:	4b1d      	ldr	r3, [pc, #116]	; (8105218 <xTaskGenericNotify+0x16c>)
 81051a4:	681b      	ldr	r3, [r3, #0]
 81051a6:	429a      	cmp	r2, r3
 81051a8:	d903      	bls.n	81051b2 <xTaskGenericNotify+0x106>
 81051aa:	6a3b      	ldr	r3, [r7, #32]
 81051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051ae:	4a1a      	ldr	r2, [pc, #104]	; (8105218 <xTaskGenericNotify+0x16c>)
 81051b0:	6013      	str	r3, [r2, #0]
 81051b2:	6a3b      	ldr	r3, [r7, #32]
 81051b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81051b6:	4613      	mov	r3, r2
 81051b8:	009b      	lsls	r3, r3, #2
 81051ba:	4413      	add	r3, r2
 81051bc:	009b      	lsls	r3, r3, #2
 81051be:	4a17      	ldr	r2, [pc, #92]	; (810521c <xTaskGenericNotify+0x170>)
 81051c0:	441a      	add	r2, r3
 81051c2:	6a3b      	ldr	r3, [r7, #32]
 81051c4:	3304      	adds	r3, #4
 81051c6:	4619      	mov	r1, r3
 81051c8:	4610      	mov	r0, r2
 81051ca:	f7fd fc02 	bl	81029d2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 81051ce:	6a3b      	ldr	r3, [r7, #32]
 81051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051d2:	2b00      	cmp	r3, #0
 81051d4:	d00a      	beq.n	81051ec <xTaskGenericNotify+0x140>
	__asm volatile
 81051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81051da:	f383 8811 	msr	BASEPRI, r3
 81051de:	f3bf 8f6f 	isb	sy
 81051e2:	f3bf 8f4f 	dsb	sy
 81051e6:	613b      	str	r3, [r7, #16]
}
 81051e8:	bf00      	nop
 81051ea:	e7fe      	b.n	81051ea <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 81051ec:	6a3b      	ldr	r3, [r7, #32]
 81051ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81051f0:	4b0b      	ldr	r3, [pc, #44]	; (8105220 <xTaskGenericNotify+0x174>)
 81051f2:	681b      	ldr	r3, [r3, #0]
 81051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051f6:	429a      	cmp	r2, r3
 81051f8:	d907      	bls.n	810520a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 81051fa:	4b0a      	ldr	r3, [pc, #40]	; (8105224 <xTaskGenericNotify+0x178>)
 81051fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8105200:	601a      	str	r2, [r3, #0]
 8105202:	f3bf 8f4f 	dsb	sy
 8105206:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810520a:	f7fd fdc3 	bl	8102d94 <vPortExitCritical>

		return xReturn;
 810520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8105210:	4618      	mov	r0, r3
 8105212:	3728      	adds	r7, #40	; 0x28
 8105214:	46bd      	mov	sp, r7
 8105216:	bd80      	pop	{r7, pc}
 8105218:	100049f4 	.word	0x100049f4
 810521c:	1000451c 	.word	0x1000451c
 8105220:	10004518 	.word	0x10004518
 8105224:	e000ed04 	.word	0xe000ed04

08105228 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8105228:	b580      	push	{r7, lr}
 810522a:	b084      	sub	sp, #16
 810522c:	af00      	add	r7, sp, #0
 810522e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	2b00      	cmp	r3, #0
 8105234:	d102      	bne.n	810523c <xTaskNotifyStateClear+0x14>
 8105236:	4b0e      	ldr	r3, [pc, #56]	; (8105270 <xTaskNotifyStateClear+0x48>)
 8105238:	681b      	ldr	r3, [r3, #0]
 810523a:	e000      	b.n	810523e <xTaskNotifyStateClear+0x16>
 810523c:	687b      	ldr	r3, [r7, #4]
 810523e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8105240:	f7fd fd78 	bl	8102d34 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8105244:	68bb      	ldr	r3, [r7, #8]
 8105246:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 810524a:	b2db      	uxtb	r3, r3
 810524c:	2b02      	cmp	r3, #2
 810524e:	d106      	bne.n	810525e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8105250:	68bb      	ldr	r3, [r7, #8]
 8105252:	2200      	movs	r2, #0
 8105254:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 8105258:	2301      	movs	r3, #1
 810525a:	60fb      	str	r3, [r7, #12]
 810525c:	e001      	b.n	8105262 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 810525e:	2300      	movs	r3, #0
 8105260:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8105262:	f7fd fd97 	bl	8102d94 <vPortExitCritical>

		return xReturn;
 8105266:	68fb      	ldr	r3, [r7, #12]
	}
 8105268:	4618      	mov	r0, r3
 810526a:	3710      	adds	r7, #16
 810526c:	46bd      	mov	sp, r7
 810526e:	bd80      	pop	{r7, pc}
 8105270:	10004518 	.word	0x10004518

08105274 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8105274:	b580      	push	{r7, lr}
 8105276:	b084      	sub	sp, #16
 8105278:	af00      	add	r7, sp, #0
 810527a:	6078      	str	r0, [r7, #4]
 810527c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810527e:	4b21      	ldr	r3, [pc, #132]	; (8105304 <prvAddCurrentTaskToDelayedList+0x90>)
 8105280:	681b      	ldr	r3, [r3, #0]
 8105282:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8105284:	4b20      	ldr	r3, [pc, #128]	; (8105308 <prvAddCurrentTaskToDelayedList+0x94>)
 8105286:	681b      	ldr	r3, [r3, #0]
 8105288:	3304      	adds	r3, #4
 810528a:	4618      	mov	r0, r3
 810528c:	f7fd fbfe 	bl	8102a8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8105290:	687b      	ldr	r3, [r7, #4]
 8105292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105296:	d10a      	bne.n	81052ae <prvAddCurrentTaskToDelayedList+0x3a>
 8105298:	683b      	ldr	r3, [r7, #0]
 810529a:	2b00      	cmp	r3, #0
 810529c:	d007      	beq.n	81052ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810529e:	4b1a      	ldr	r3, [pc, #104]	; (8105308 <prvAddCurrentTaskToDelayedList+0x94>)
 81052a0:	681b      	ldr	r3, [r3, #0]
 81052a2:	3304      	adds	r3, #4
 81052a4:	4619      	mov	r1, r3
 81052a6:	4819      	ldr	r0, [pc, #100]	; (810530c <prvAddCurrentTaskToDelayedList+0x98>)
 81052a8:	f7fd fb93 	bl	81029d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81052ac:	e026      	b.n	81052fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81052ae:	68fa      	ldr	r2, [r7, #12]
 81052b0:	687b      	ldr	r3, [r7, #4]
 81052b2:	4413      	add	r3, r2
 81052b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81052b6:	4b14      	ldr	r3, [pc, #80]	; (8105308 <prvAddCurrentTaskToDelayedList+0x94>)
 81052b8:	681b      	ldr	r3, [r3, #0]
 81052ba:	68ba      	ldr	r2, [r7, #8]
 81052bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81052be:	68ba      	ldr	r2, [r7, #8]
 81052c0:	68fb      	ldr	r3, [r7, #12]
 81052c2:	429a      	cmp	r2, r3
 81052c4:	d209      	bcs.n	81052da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81052c6:	4b12      	ldr	r3, [pc, #72]	; (8105310 <prvAddCurrentTaskToDelayedList+0x9c>)
 81052c8:	681a      	ldr	r2, [r3, #0]
 81052ca:	4b0f      	ldr	r3, [pc, #60]	; (8105308 <prvAddCurrentTaskToDelayedList+0x94>)
 81052cc:	681b      	ldr	r3, [r3, #0]
 81052ce:	3304      	adds	r3, #4
 81052d0:	4619      	mov	r1, r3
 81052d2:	4610      	mov	r0, r2
 81052d4:	f7fd fba1 	bl	8102a1a <vListInsert>
}
 81052d8:	e010      	b.n	81052fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81052da:	4b0e      	ldr	r3, [pc, #56]	; (8105314 <prvAddCurrentTaskToDelayedList+0xa0>)
 81052dc:	681a      	ldr	r2, [r3, #0]
 81052de:	4b0a      	ldr	r3, [pc, #40]	; (8105308 <prvAddCurrentTaskToDelayedList+0x94>)
 81052e0:	681b      	ldr	r3, [r3, #0]
 81052e2:	3304      	adds	r3, #4
 81052e4:	4619      	mov	r1, r3
 81052e6:	4610      	mov	r0, r2
 81052e8:	f7fd fb97 	bl	8102a1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 81052ec:	4b0a      	ldr	r3, [pc, #40]	; (8105318 <prvAddCurrentTaskToDelayedList+0xa4>)
 81052ee:	681b      	ldr	r3, [r3, #0]
 81052f0:	68ba      	ldr	r2, [r7, #8]
 81052f2:	429a      	cmp	r2, r3
 81052f4:	d202      	bcs.n	81052fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 81052f6:	4a08      	ldr	r2, [pc, #32]	; (8105318 <prvAddCurrentTaskToDelayedList+0xa4>)
 81052f8:	68bb      	ldr	r3, [r7, #8]
 81052fa:	6013      	str	r3, [r2, #0]
}
 81052fc:	bf00      	nop
 81052fe:	3710      	adds	r7, #16
 8105300:	46bd      	mov	sp, r7
 8105302:	bd80      	pop	{r7, pc}
 8105304:	100049f0 	.word	0x100049f0
 8105308:	10004518 	.word	0x10004518
 810530c:	100049d8 	.word	0x100049d8
 8105310:	100049a8 	.word	0x100049a8
 8105314:	100049a4 	.word	0x100049a4
 8105318:	10004a0c 	.word	0x10004a0c

0810531c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810531c:	b580      	push	{r7, lr}
 810531e:	b08a      	sub	sp, #40	; 0x28
 8105320:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8105322:	2300      	movs	r3, #0
 8105324:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8105326:	f000 fb07 	bl	8105938 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810532a:	4b1c      	ldr	r3, [pc, #112]	; (810539c <xTimerCreateTimerTask+0x80>)
 810532c:	681b      	ldr	r3, [r3, #0]
 810532e:	2b00      	cmp	r3, #0
 8105330:	d021      	beq.n	8105376 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8105332:	2300      	movs	r3, #0
 8105334:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8105336:	2300      	movs	r3, #0
 8105338:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810533a:	1d3a      	adds	r2, r7, #4
 810533c:	f107 0108 	add.w	r1, r7, #8
 8105340:	f107 030c 	add.w	r3, r7, #12
 8105344:	4618      	mov	r0, r3
 8105346:	f7fd f913 	bl	8102570 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810534a:	6879      	ldr	r1, [r7, #4]
 810534c:	68bb      	ldr	r3, [r7, #8]
 810534e:	68fa      	ldr	r2, [r7, #12]
 8105350:	9202      	str	r2, [sp, #8]
 8105352:	9301      	str	r3, [sp, #4]
 8105354:	2302      	movs	r3, #2
 8105356:	9300      	str	r3, [sp, #0]
 8105358:	2300      	movs	r3, #0
 810535a:	460a      	mov	r2, r1
 810535c:	4910      	ldr	r1, [pc, #64]	; (81053a0 <xTimerCreateTimerTask+0x84>)
 810535e:	4811      	ldr	r0, [pc, #68]	; (81053a4 <xTimerCreateTimerTask+0x88>)
 8105360:	f7fe fe3b 	bl	8103fda <xTaskCreateStatic>
 8105364:	4603      	mov	r3, r0
 8105366:	4a10      	ldr	r2, [pc, #64]	; (81053a8 <xTimerCreateTimerTask+0x8c>)
 8105368:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810536a:	4b0f      	ldr	r3, [pc, #60]	; (81053a8 <xTimerCreateTimerTask+0x8c>)
 810536c:	681b      	ldr	r3, [r3, #0]
 810536e:	2b00      	cmp	r3, #0
 8105370:	d001      	beq.n	8105376 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8105372:	2301      	movs	r3, #1
 8105374:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8105376:	697b      	ldr	r3, [r7, #20]
 8105378:	2b00      	cmp	r3, #0
 810537a:	d10a      	bne.n	8105392 <xTimerCreateTimerTask+0x76>
	__asm volatile
 810537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105380:	f383 8811 	msr	BASEPRI, r3
 8105384:	f3bf 8f6f 	isb	sy
 8105388:	f3bf 8f4f 	dsb	sy
 810538c:	613b      	str	r3, [r7, #16]
}
 810538e:	bf00      	nop
 8105390:	e7fe      	b.n	8105390 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8105392:	697b      	ldr	r3, [r7, #20]
}
 8105394:	4618      	mov	r0, r3
 8105396:	3718      	adds	r7, #24
 8105398:	46bd      	mov	sp, r7
 810539a:	bd80      	pop	{r7, pc}
 810539c:	10004a48 	.word	0x10004a48
 81053a0:	08105be0 	.word	0x08105be0
 81053a4:	081054e1 	.word	0x081054e1
 81053a8:	10004a4c 	.word	0x10004a4c

081053ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81053ac:	b580      	push	{r7, lr}
 81053ae:	b08a      	sub	sp, #40	; 0x28
 81053b0:	af00      	add	r7, sp, #0
 81053b2:	60f8      	str	r0, [r7, #12]
 81053b4:	60b9      	str	r1, [r7, #8]
 81053b6:	607a      	str	r2, [r7, #4]
 81053b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 81053ba:	2300      	movs	r3, #0
 81053bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 81053be:	68fb      	ldr	r3, [r7, #12]
 81053c0:	2b00      	cmp	r3, #0
 81053c2:	d10a      	bne.n	81053da <xTimerGenericCommand+0x2e>
	__asm volatile
 81053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81053c8:	f383 8811 	msr	BASEPRI, r3
 81053cc:	f3bf 8f6f 	isb	sy
 81053d0:	f3bf 8f4f 	dsb	sy
 81053d4:	623b      	str	r3, [r7, #32]
}
 81053d6:	bf00      	nop
 81053d8:	e7fe      	b.n	81053d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 81053da:	4b1a      	ldr	r3, [pc, #104]	; (8105444 <xTimerGenericCommand+0x98>)
 81053dc:	681b      	ldr	r3, [r3, #0]
 81053de:	2b00      	cmp	r3, #0
 81053e0:	d02a      	beq.n	8105438 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 81053e2:	68bb      	ldr	r3, [r7, #8]
 81053e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 81053e6:	687b      	ldr	r3, [r7, #4]
 81053e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 81053ea:	68fb      	ldr	r3, [r7, #12]
 81053ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 81053ee:	68bb      	ldr	r3, [r7, #8]
 81053f0:	2b05      	cmp	r3, #5
 81053f2:	dc18      	bgt.n	8105426 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 81053f4:	f7ff fc70 	bl	8104cd8 <xTaskGetSchedulerState>
 81053f8:	4603      	mov	r3, r0
 81053fa:	2b02      	cmp	r3, #2
 81053fc:	d109      	bne.n	8105412 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 81053fe:	4b11      	ldr	r3, [pc, #68]	; (8105444 <xTimerGenericCommand+0x98>)
 8105400:	6818      	ldr	r0, [r3, #0]
 8105402:	f107 0110 	add.w	r1, r7, #16
 8105406:	2300      	movs	r3, #0
 8105408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810540a:	f7fd ff23 	bl	8103254 <xQueueGenericSend>
 810540e:	6278      	str	r0, [r7, #36]	; 0x24
 8105410:	e012      	b.n	8105438 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8105412:	4b0c      	ldr	r3, [pc, #48]	; (8105444 <xTimerGenericCommand+0x98>)
 8105414:	6818      	ldr	r0, [r3, #0]
 8105416:	f107 0110 	add.w	r1, r7, #16
 810541a:	2300      	movs	r3, #0
 810541c:	2200      	movs	r2, #0
 810541e:	f7fd ff19 	bl	8103254 <xQueueGenericSend>
 8105422:	6278      	str	r0, [r7, #36]	; 0x24
 8105424:	e008      	b.n	8105438 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8105426:	4b07      	ldr	r3, [pc, #28]	; (8105444 <xTimerGenericCommand+0x98>)
 8105428:	6818      	ldr	r0, [r3, #0]
 810542a:	f107 0110 	add.w	r1, r7, #16
 810542e:	2300      	movs	r3, #0
 8105430:	683a      	ldr	r2, [r7, #0]
 8105432:	f7fe f80d 	bl	8103450 <xQueueGenericSendFromISR>
 8105436:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8105438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810543a:	4618      	mov	r0, r3
 810543c:	3728      	adds	r7, #40	; 0x28
 810543e:	46bd      	mov	sp, r7
 8105440:	bd80      	pop	{r7, pc}
 8105442:	bf00      	nop
 8105444:	10004a48 	.word	0x10004a48

08105448 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8105448:	b580      	push	{r7, lr}
 810544a:	b088      	sub	sp, #32
 810544c:	af02      	add	r7, sp, #8
 810544e:	6078      	str	r0, [r7, #4]
 8105450:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8105452:	4b22      	ldr	r3, [pc, #136]	; (81054dc <prvProcessExpiredTimer+0x94>)
 8105454:	681b      	ldr	r3, [r3, #0]
 8105456:	68db      	ldr	r3, [r3, #12]
 8105458:	68db      	ldr	r3, [r3, #12]
 810545a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810545c:	697b      	ldr	r3, [r7, #20]
 810545e:	3304      	adds	r3, #4
 8105460:	4618      	mov	r0, r3
 8105462:	f7fd fb13 	bl	8102a8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8105466:	697b      	ldr	r3, [r7, #20]
 8105468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810546c:	f003 0304 	and.w	r3, r3, #4
 8105470:	2b00      	cmp	r3, #0
 8105472:	d022      	beq.n	81054ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8105474:	697b      	ldr	r3, [r7, #20]
 8105476:	699a      	ldr	r2, [r3, #24]
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	18d1      	adds	r1, r2, r3
 810547c:	687b      	ldr	r3, [r7, #4]
 810547e:	683a      	ldr	r2, [r7, #0]
 8105480:	6978      	ldr	r0, [r7, #20]
 8105482:	f000 f8d1 	bl	8105628 <prvInsertTimerInActiveList>
 8105486:	4603      	mov	r3, r0
 8105488:	2b00      	cmp	r3, #0
 810548a:	d01f      	beq.n	81054cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810548c:	2300      	movs	r3, #0
 810548e:	9300      	str	r3, [sp, #0]
 8105490:	2300      	movs	r3, #0
 8105492:	687a      	ldr	r2, [r7, #4]
 8105494:	2100      	movs	r1, #0
 8105496:	6978      	ldr	r0, [r7, #20]
 8105498:	f7ff ff88 	bl	81053ac <xTimerGenericCommand>
 810549c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810549e:	693b      	ldr	r3, [r7, #16]
 81054a0:	2b00      	cmp	r3, #0
 81054a2:	d113      	bne.n	81054cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 81054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81054a8:	f383 8811 	msr	BASEPRI, r3
 81054ac:	f3bf 8f6f 	isb	sy
 81054b0:	f3bf 8f4f 	dsb	sy
 81054b4:	60fb      	str	r3, [r7, #12]
}
 81054b6:	bf00      	nop
 81054b8:	e7fe      	b.n	81054b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81054ba:	697b      	ldr	r3, [r7, #20]
 81054bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81054c0:	f023 0301 	bic.w	r3, r3, #1
 81054c4:	b2da      	uxtb	r2, r3
 81054c6:	697b      	ldr	r3, [r7, #20]
 81054c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81054cc:	697b      	ldr	r3, [r7, #20]
 81054ce:	6a1b      	ldr	r3, [r3, #32]
 81054d0:	6978      	ldr	r0, [r7, #20]
 81054d2:	4798      	blx	r3
}
 81054d4:	bf00      	nop
 81054d6:	3718      	adds	r7, #24
 81054d8:	46bd      	mov	sp, r7
 81054da:	bd80      	pop	{r7, pc}
 81054dc:	10004a40 	.word	0x10004a40

081054e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 81054e0:	b580      	push	{r7, lr}
 81054e2:	b084      	sub	sp, #16
 81054e4:	af00      	add	r7, sp, #0
 81054e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81054e8:	f107 0308 	add.w	r3, r7, #8
 81054ec:	4618      	mov	r0, r3
 81054ee:	f000 f857 	bl	81055a0 <prvGetNextExpireTime>
 81054f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 81054f4:	68bb      	ldr	r3, [r7, #8]
 81054f6:	4619      	mov	r1, r3
 81054f8:	68f8      	ldr	r0, [r7, #12]
 81054fa:	f000 f803 	bl	8105504 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 81054fe:	f000 f8d5 	bl	81056ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8105502:	e7f1      	b.n	81054e8 <prvTimerTask+0x8>

08105504 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8105504:	b580      	push	{r7, lr}
 8105506:	b084      	sub	sp, #16
 8105508:	af00      	add	r7, sp, #0
 810550a:	6078      	str	r0, [r7, #4]
 810550c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810550e:	f7fe ffc1 	bl	8104494 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8105512:	f107 0308 	add.w	r3, r7, #8
 8105516:	4618      	mov	r0, r3
 8105518:	f000 f866 	bl	81055e8 <prvSampleTimeNow>
 810551c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810551e:	68bb      	ldr	r3, [r7, #8]
 8105520:	2b00      	cmp	r3, #0
 8105522:	d130      	bne.n	8105586 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8105524:	683b      	ldr	r3, [r7, #0]
 8105526:	2b00      	cmp	r3, #0
 8105528:	d10a      	bne.n	8105540 <prvProcessTimerOrBlockTask+0x3c>
 810552a:	687a      	ldr	r2, [r7, #4]
 810552c:	68fb      	ldr	r3, [r7, #12]
 810552e:	429a      	cmp	r2, r3
 8105530:	d806      	bhi.n	8105540 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8105532:	f7fe ffbd 	bl	81044b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8105536:	68f9      	ldr	r1, [r7, #12]
 8105538:	6878      	ldr	r0, [r7, #4]
 810553a:	f7ff ff85 	bl	8105448 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810553e:	e024      	b.n	810558a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8105540:	683b      	ldr	r3, [r7, #0]
 8105542:	2b00      	cmp	r3, #0
 8105544:	d008      	beq.n	8105558 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8105546:	4b13      	ldr	r3, [pc, #76]	; (8105594 <prvProcessTimerOrBlockTask+0x90>)
 8105548:	681b      	ldr	r3, [r3, #0]
 810554a:	681b      	ldr	r3, [r3, #0]
 810554c:	2b00      	cmp	r3, #0
 810554e:	d101      	bne.n	8105554 <prvProcessTimerOrBlockTask+0x50>
 8105550:	2301      	movs	r3, #1
 8105552:	e000      	b.n	8105556 <prvProcessTimerOrBlockTask+0x52>
 8105554:	2300      	movs	r3, #0
 8105556:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8105558:	4b0f      	ldr	r3, [pc, #60]	; (8105598 <prvProcessTimerOrBlockTask+0x94>)
 810555a:	6818      	ldr	r0, [r3, #0]
 810555c:	687a      	ldr	r2, [r7, #4]
 810555e:	68fb      	ldr	r3, [r7, #12]
 8105560:	1ad3      	subs	r3, r2, r3
 8105562:	683a      	ldr	r2, [r7, #0]
 8105564:	4619      	mov	r1, r3
 8105566:	f7fe fb4d 	bl	8103c04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810556a:	f7fe ffa1 	bl	81044b0 <xTaskResumeAll>
 810556e:	4603      	mov	r3, r0
 8105570:	2b00      	cmp	r3, #0
 8105572:	d10a      	bne.n	810558a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8105574:	4b09      	ldr	r3, [pc, #36]	; (810559c <prvProcessTimerOrBlockTask+0x98>)
 8105576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810557a:	601a      	str	r2, [r3, #0]
 810557c:	f3bf 8f4f 	dsb	sy
 8105580:	f3bf 8f6f 	isb	sy
}
 8105584:	e001      	b.n	810558a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8105586:	f7fe ff93 	bl	81044b0 <xTaskResumeAll>
}
 810558a:	bf00      	nop
 810558c:	3710      	adds	r7, #16
 810558e:	46bd      	mov	sp, r7
 8105590:	bd80      	pop	{r7, pc}
 8105592:	bf00      	nop
 8105594:	10004a44 	.word	0x10004a44
 8105598:	10004a48 	.word	0x10004a48
 810559c:	e000ed04 	.word	0xe000ed04

081055a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81055a0:	b480      	push	{r7}
 81055a2:	b085      	sub	sp, #20
 81055a4:	af00      	add	r7, sp, #0
 81055a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81055a8:	4b0e      	ldr	r3, [pc, #56]	; (81055e4 <prvGetNextExpireTime+0x44>)
 81055aa:	681b      	ldr	r3, [r3, #0]
 81055ac:	681b      	ldr	r3, [r3, #0]
 81055ae:	2b00      	cmp	r3, #0
 81055b0:	d101      	bne.n	81055b6 <prvGetNextExpireTime+0x16>
 81055b2:	2201      	movs	r2, #1
 81055b4:	e000      	b.n	81055b8 <prvGetNextExpireTime+0x18>
 81055b6:	2200      	movs	r2, #0
 81055b8:	687b      	ldr	r3, [r7, #4]
 81055ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 81055bc:	687b      	ldr	r3, [r7, #4]
 81055be:	681b      	ldr	r3, [r3, #0]
 81055c0:	2b00      	cmp	r3, #0
 81055c2:	d105      	bne.n	81055d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81055c4:	4b07      	ldr	r3, [pc, #28]	; (81055e4 <prvGetNextExpireTime+0x44>)
 81055c6:	681b      	ldr	r3, [r3, #0]
 81055c8:	68db      	ldr	r3, [r3, #12]
 81055ca:	681b      	ldr	r3, [r3, #0]
 81055cc:	60fb      	str	r3, [r7, #12]
 81055ce:	e001      	b.n	81055d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 81055d0:	2300      	movs	r3, #0
 81055d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 81055d4:	68fb      	ldr	r3, [r7, #12]
}
 81055d6:	4618      	mov	r0, r3
 81055d8:	3714      	adds	r7, #20
 81055da:	46bd      	mov	sp, r7
 81055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055e0:	4770      	bx	lr
 81055e2:	bf00      	nop
 81055e4:	10004a40 	.word	0x10004a40

081055e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 81055e8:	b580      	push	{r7, lr}
 81055ea:	b084      	sub	sp, #16
 81055ec:	af00      	add	r7, sp, #0
 81055ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 81055f0:	f7fe fffc 	bl	81045ec <xTaskGetTickCount>
 81055f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 81055f6:	4b0b      	ldr	r3, [pc, #44]	; (8105624 <prvSampleTimeNow+0x3c>)
 81055f8:	681b      	ldr	r3, [r3, #0]
 81055fa:	68fa      	ldr	r2, [r7, #12]
 81055fc:	429a      	cmp	r2, r3
 81055fe:	d205      	bcs.n	810560c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8105600:	f000 f936 	bl	8105870 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8105604:	687b      	ldr	r3, [r7, #4]
 8105606:	2201      	movs	r2, #1
 8105608:	601a      	str	r2, [r3, #0]
 810560a:	e002      	b.n	8105612 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810560c:	687b      	ldr	r3, [r7, #4]
 810560e:	2200      	movs	r2, #0
 8105610:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8105612:	4a04      	ldr	r2, [pc, #16]	; (8105624 <prvSampleTimeNow+0x3c>)
 8105614:	68fb      	ldr	r3, [r7, #12]
 8105616:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8105618:	68fb      	ldr	r3, [r7, #12]
}
 810561a:	4618      	mov	r0, r3
 810561c:	3710      	adds	r7, #16
 810561e:	46bd      	mov	sp, r7
 8105620:	bd80      	pop	{r7, pc}
 8105622:	bf00      	nop
 8105624:	10004a50 	.word	0x10004a50

08105628 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8105628:	b580      	push	{r7, lr}
 810562a:	b086      	sub	sp, #24
 810562c:	af00      	add	r7, sp, #0
 810562e:	60f8      	str	r0, [r7, #12]
 8105630:	60b9      	str	r1, [r7, #8]
 8105632:	607a      	str	r2, [r7, #4]
 8105634:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8105636:	2300      	movs	r3, #0
 8105638:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810563a:	68fb      	ldr	r3, [r7, #12]
 810563c:	68ba      	ldr	r2, [r7, #8]
 810563e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8105640:	68fb      	ldr	r3, [r7, #12]
 8105642:	68fa      	ldr	r2, [r7, #12]
 8105644:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8105646:	68ba      	ldr	r2, [r7, #8]
 8105648:	687b      	ldr	r3, [r7, #4]
 810564a:	429a      	cmp	r2, r3
 810564c:	d812      	bhi.n	8105674 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810564e:	687a      	ldr	r2, [r7, #4]
 8105650:	683b      	ldr	r3, [r7, #0]
 8105652:	1ad2      	subs	r2, r2, r3
 8105654:	68fb      	ldr	r3, [r7, #12]
 8105656:	699b      	ldr	r3, [r3, #24]
 8105658:	429a      	cmp	r2, r3
 810565a:	d302      	bcc.n	8105662 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810565c:	2301      	movs	r3, #1
 810565e:	617b      	str	r3, [r7, #20]
 8105660:	e01b      	b.n	810569a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8105662:	4b10      	ldr	r3, [pc, #64]	; (81056a4 <prvInsertTimerInActiveList+0x7c>)
 8105664:	681a      	ldr	r2, [r3, #0]
 8105666:	68fb      	ldr	r3, [r7, #12]
 8105668:	3304      	adds	r3, #4
 810566a:	4619      	mov	r1, r3
 810566c:	4610      	mov	r0, r2
 810566e:	f7fd f9d4 	bl	8102a1a <vListInsert>
 8105672:	e012      	b.n	810569a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8105674:	687a      	ldr	r2, [r7, #4]
 8105676:	683b      	ldr	r3, [r7, #0]
 8105678:	429a      	cmp	r2, r3
 810567a:	d206      	bcs.n	810568a <prvInsertTimerInActiveList+0x62>
 810567c:	68ba      	ldr	r2, [r7, #8]
 810567e:	683b      	ldr	r3, [r7, #0]
 8105680:	429a      	cmp	r2, r3
 8105682:	d302      	bcc.n	810568a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8105684:	2301      	movs	r3, #1
 8105686:	617b      	str	r3, [r7, #20]
 8105688:	e007      	b.n	810569a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810568a:	4b07      	ldr	r3, [pc, #28]	; (81056a8 <prvInsertTimerInActiveList+0x80>)
 810568c:	681a      	ldr	r2, [r3, #0]
 810568e:	68fb      	ldr	r3, [r7, #12]
 8105690:	3304      	adds	r3, #4
 8105692:	4619      	mov	r1, r3
 8105694:	4610      	mov	r0, r2
 8105696:	f7fd f9c0 	bl	8102a1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 810569a:	697b      	ldr	r3, [r7, #20]
}
 810569c:	4618      	mov	r0, r3
 810569e:	3718      	adds	r7, #24
 81056a0:	46bd      	mov	sp, r7
 81056a2:	bd80      	pop	{r7, pc}
 81056a4:	10004a44 	.word	0x10004a44
 81056a8:	10004a40 	.word	0x10004a40

081056ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81056ac:	b580      	push	{r7, lr}
 81056ae:	b08e      	sub	sp, #56	; 0x38
 81056b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81056b2:	e0ca      	b.n	810584a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 81056b4:	687b      	ldr	r3, [r7, #4]
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	da18      	bge.n	81056ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 81056ba:	1d3b      	adds	r3, r7, #4
 81056bc:	3304      	adds	r3, #4
 81056be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81056c2:	2b00      	cmp	r3, #0
 81056c4:	d10a      	bne.n	81056dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 81056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81056ca:	f383 8811 	msr	BASEPRI, r3
 81056ce:	f3bf 8f6f 	isb	sy
 81056d2:	f3bf 8f4f 	dsb	sy
 81056d6:	61fb      	str	r3, [r7, #28]
}
 81056d8:	bf00      	nop
 81056da:	e7fe      	b.n	81056da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 81056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81056de:	681b      	ldr	r3, [r3, #0]
 81056e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81056e2:	6850      	ldr	r0, [r2, #4]
 81056e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81056e6:	6892      	ldr	r2, [r2, #8]
 81056e8:	4611      	mov	r1, r2
 81056ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 81056ec:	687b      	ldr	r3, [r7, #4]
 81056ee:	2b00      	cmp	r3, #0
 81056f0:	f2c0 80aa 	blt.w	8105848 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 81056f4:	68fb      	ldr	r3, [r7, #12]
 81056f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 81056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81056fa:	695b      	ldr	r3, [r3, #20]
 81056fc:	2b00      	cmp	r3, #0
 81056fe:	d004      	beq.n	810570a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8105700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105702:	3304      	adds	r3, #4
 8105704:	4618      	mov	r0, r3
 8105706:	f7fd f9c1 	bl	8102a8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810570a:	463b      	mov	r3, r7
 810570c:	4618      	mov	r0, r3
 810570e:	f7ff ff6b 	bl	81055e8 <prvSampleTimeNow>
 8105712:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8105714:	687b      	ldr	r3, [r7, #4]
 8105716:	2b09      	cmp	r3, #9
 8105718:	f200 8097 	bhi.w	810584a <prvProcessReceivedCommands+0x19e>
 810571c:	a201      	add	r2, pc, #4	; (adr r2, 8105724 <prvProcessReceivedCommands+0x78>)
 810571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105722:	bf00      	nop
 8105724:	0810574d 	.word	0x0810574d
 8105728:	0810574d 	.word	0x0810574d
 810572c:	0810574d 	.word	0x0810574d
 8105730:	081057c1 	.word	0x081057c1
 8105734:	081057d5 	.word	0x081057d5
 8105738:	0810581f 	.word	0x0810581f
 810573c:	0810574d 	.word	0x0810574d
 8105740:	0810574d 	.word	0x0810574d
 8105744:	081057c1 	.word	0x081057c1
 8105748:	081057d5 	.word	0x081057d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810574e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8105752:	f043 0301 	orr.w	r3, r3, #1
 8105756:	b2da      	uxtb	r2, r3
 8105758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810575a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810575e:	68ba      	ldr	r2, [r7, #8]
 8105760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105762:	699b      	ldr	r3, [r3, #24]
 8105764:	18d1      	adds	r1, r2, r3
 8105766:	68bb      	ldr	r3, [r7, #8]
 8105768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810576a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810576c:	f7ff ff5c 	bl	8105628 <prvInsertTimerInActiveList>
 8105770:	4603      	mov	r3, r0
 8105772:	2b00      	cmp	r3, #0
 8105774:	d069      	beq.n	810584a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8105776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105778:	6a1b      	ldr	r3, [r3, #32]
 810577a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810577c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8105784:	f003 0304 	and.w	r3, r3, #4
 8105788:	2b00      	cmp	r3, #0
 810578a:	d05e      	beq.n	810584a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810578c:	68ba      	ldr	r2, [r7, #8]
 810578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105790:	699b      	ldr	r3, [r3, #24]
 8105792:	441a      	add	r2, r3
 8105794:	2300      	movs	r3, #0
 8105796:	9300      	str	r3, [sp, #0]
 8105798:	2300      	movs	r3, #0
 810579a:	2100      	movs	r1, #0
 810579c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810579e:	f7ff fe05 	bl	81053ac <xTimerGenericCommand>
 81057a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81057a4:	6a3b      	ldr	r3, [r7, #32]
 81057a6:	2b00      	cmp	r3, #0
 81057a8:	d14f      	bne.n	810584a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 81057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81057ae:	f383 8811 	msr	BASEPRI, r3
 81057b2:	f3bf 8f6f 	isb	sy
 81057b6:	f3bf 8f4f 	dsb	sy
 81057ba:	61bb      	str	r3, [r7, #24]
}
 81057bc:	bf00      	nop
 81057be:	e7fe      	b.n	81057be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81057c6:	f023 0301 	bic.w	r3, r3, #1
 81057ca:	b2da      	uxtb	r2, r3
 81057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 81057d2:	e03a      	b.n	810584a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81057da:	f043 0301 	orr.w	r3, r3, #1
 81057de:	b2da      	uxtb	r2, r3
 81057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 81057e6:	68ba      	ldr	r2, [r7, #8]
 81057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 81057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057ee:	699b      	ldr	r3, [r3, #24]
 81057f0:	2b00      	cmp	r3, #0
 81057f2:	d10a      	bne.n	810580a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 81057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81057f8:	f383 8811 	msr	BASEPRI, r3
 81057fc:	f3bf 8f6f 	isb	sy
 8105800:	f3bf 8f4f 	dsb	sy
 8105804:	617b      	str	r3, [r7, #20]
}
 8105806:	bf00      	nop
 8105808:	e7fe      	b.n	8105808 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810580c:	699a      	ldr	r2, [r3, #24]
 810580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105810:	18d1      	adds	r1, r2, r3
 8105812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8105816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8105818:	f7ff ff06 	bl	8105628 <prvInsertTimerInActiveList>
					break;
 810581c:	e015      	b.n	810584a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8105824:	f003 0302 	and.w	r3, r3, #2
 8105828:	2b00      	cmp	r3, #0
 810582a:	d103      	bne.n	8105834 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 810582c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810582e:	f7fc ff85 	bl	810273c <vPortFree>
 8105832:	e00a      	b.n	810584a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8105834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810583a:	f023 0301 	bic.w	r3, r3, #1
 810583e:	b2da      	uxtb	r2, r3
 8105840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8105846:	e000      	b.n	810584a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8105848:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810584a:	4b08      	ldr	r3, [pc, #32]	; (810586c <prvProcessReceivedCommands+0x1c0>)
 810584c:	681b      	ldr	r3, [r3, #0]
 810584e:	1d39      	adds	r1, r7, #4
 8105850:	2200      	movs	r2, #0
 8105852:	4618      	mov	r0, r3
 8105854:	f7fd fe98 	bl	8103588 <xQueueReceive>
 8105858:	4603      	mov	r3, r0
 810585a:	2b00      	cmp	r3, #0
 810585c:	f47f af2a 	bne.w	81056b4 <prvProcessReceivedCommands+0x8>
	}
}
 8105860:	bf00      	nop
 8105862:	bf00      	nop
 8105864:	3730      	adds	r7, #48	; 0x30
 8105866:	46bd      	mov	sp, r7
 8105868:	bd80      	pop	{r7, pc}
 810586a:	bf00      	nop
 810586c:	10004a48 	.word	0x10004a48

08105870 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8105870:	b580      	push	{r7, lr}
 8105872:	b088      	sub	sp, #32
 8105874:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8105876:	e048      	b.n	810590a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8105878:	4b2d      	ldr	r3, [pc, #180]	; (8105930 <prvSwitchTimerLists+0xc0>)
 810587a:	681b      	ldr	r3, [r3, #0]
 810587c:	68db      	ldr	r3, [r3, #12]
 810587e:	681b      	ldr	r3, [r3, #0]
 8105880:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8105882:	4b2b      	ldr	r3, [pc, #172]	; (8105930 <prvSwitchTimerLists+0xc0>)
 8105884:	681b      	ldr	r3, [r3, #0]
 8105886:	68db      	ldr	r3, [r3, #12]
 8105888:	68db      	ldr	r3, [r3, #12]
 810588a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810588c:	68fb      	ldr	r3, [r7, #12]
 810588e:	3304      	adds	r3, #4
 8105890:	4618      	mov	r0, r3
 8105892:	f7fd f8fb 	bl	8102a8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8105896:	68fb      	ldr	r3, [r7, #12]
 8105898:	6a1b      	ldr	r3, [r3, #32]
 810589a:	68f8      	ldr	r0, [r7, #12]
 810589c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810589e:	68fb      	ldr	r3, [r7, #12]
 81058a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81058a4:	f003 0304 	and.w	r3, r3, #4
 81058a8:	2b00      	cmp	r3, #0
 81058aa:	d02e      	beq.n	810590a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 81058ac:	68fb      	ldr	r3, [r7, #12]
 81058ae:	699b      	ldr	r3, [r3, #24]
 81058b0:	693a      	ldr	r2, [r7, #16]
 81058b2:	4413      	add	r3, r2
 81058b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 81058b6:	68ba      	ldr	r2, [r7, #8]
 81058b8:	693b      	ldr	r3, [r7, #16]
 81058ba:	429a      	cmp	r2, r3
 81058bc:	d90e      	bls.n	81058dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 81058be:	68fb      	ldr	r3, [r7, #12]
 81058c0:	68ba      	ldr	r2, [r7, #8]
 81058c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81058c4:	68fb      	ldr	r3, [r7, #12]
 81058c6:	68fa      	ldr	r2, [r7, #12]
 81058c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81058ca:	4b19      	ldr	r3, [pc, #100]	; (8105930 <prvSwitchTimerLists+0xc0>)
 81058cc:	681a      	ldr	r2, [r3, #0]
 81058ce:	68fb      	ldr	r3, [r7, #12]
 81058d0:	3304      	adds	r3, #4
 81058d2:	4619      	mov	r1, r3
 81058d4:	4610      	mov	r0, r2
 81058d6:	f7fd f8a0 	bl	8102a1a <vListInsert>
 81058da:	e016      	b.n	810590a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81058dc:	2300      	movs	r3, #0
 81058de:	9300      	str	r3, [sp, #0]
 81058e0:	2300      	movs	r3, #0
 81058e2:	693a      	ldr	r2, [r7, #16]
 81058e4:	2100      	movs	r1, #0
 81058e6:	68f8      	ldr	r0, [r7, #12]
 81058e8:	f7ff fd60 	bl	81053ac <xTimerGenericCommand>
 81058ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	2b00      	cmp	r3, #0
 81058f2:	d10a      	bne.n	810590a <prvSwitchTimerLists+0x9a>
	__asm volatile
 81058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81058f8:	f383 8811 	msr	BASEPRI, r3
 81058fc:	f3bf 8f6f 	isb	sy
 8105900:	f3bf 8f4f 	dsb	sy
 8105904:	603b      	str	r3, [r7, #0]
}
 8105906:	bf00      	nop
 8105908:	e7fe      	b.n	8105908 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810590a:	4b09      	ldr	r3, [pc, #36]	; (8105930 <prvSwitchTimerLists+0xc0>)
 810590c:	681b      	ldr	r3, [r3, #0]
 810590e:	681b      	ldr	r3, [r3, #0]
 8105910:	2b00      	cmp	r3, #0
 8105912:	d1b1      	bne.n	8105878 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8105914:	4b06      	ldr	r3, [pc, #24]	; (8105930 <prvSwitchTimerLists+0xc0>)
 8105916:	681b      	ldr	r3, [r3, #0]
 8105918:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810591a:	4b06      	ldr	r3, [pc, #24]	; (8105934 <prvSwitchTimerLists+0xc4>)
 810591c:	681b      	ldr	r3, [r3, #0]
 810591e:	4a04      	ldr	r2, [pc, #16]	; (8105930 <prvSwitchTimerLists+0xc0>)
 8105920:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8105922:	4a04      	ldr	r2, [pc, #16]	; (8105934 <prvSwitchTimerLists+0xc4>)
 8105924:	697b      	ldr	r3, [r7, #20]
 8105926:	6013      	str	r3, [r2, #0]
}
 8105928:	bf00      	nop
 810592a:	3718      	adds	r7, #24
 810592c:	46bd      	mov	sp, r7
 810592e:	bd80      	pop	{r7, pc}
 8105930:	10004a40 	.word	0x10004a40
 8105934:	10004a44 	.word	0x10004a44

08105938 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8105938:	b580      	push	{r7, lr}
 810593a:	b082      	sub	sp, #8
 810593c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810593e:	f7fd f9f9 	bl	8102d34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8105942:	4b15      	ldr	r3, [pc, #84]	; (8105998 <prvCheckForValidListAndQueue+0x60>)
 8105944:	681b      	ldr	r3, [r3, #0]
 8105946:	2b00      	cmp	r3, #0
 8105948:	d120      	bne.n	810598c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810594a:	4814      	ldr	r0, [pc, #80]	; (810599c <prvCheckForValidListAndQueue+0x64>)
 810594c:	f7fd f814 	bl	8102978 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8105950:	4813      	ldr	r0, [pc, #76]	; (81059a0 <prvCheckForValidListAndQueue+0x68>)
 8105952:	f7fd f811 	bl	8102978 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8105956:	4b13      	ldr	r3, [pc, #76]	; (81059a4 <prvCheckForValidListAndQueue+0x6c>)
 8105958:	4a10      	ldr	r2, [pc, #64]	; (810599c <prvCheckForValidListAndQueue+0x64>)
 810595a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810595c:	4b12      	ldr	r3, [pc, #72]	; (81059a8 <prvCheckForValidListAndQueue+0x70>)
 810595e:	4a10      	ldr	r2, [pc, #64]	; (81059a0 <prvCheckForValidListAndQueue+0x68>)
 8105960:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8105962:	2300      	movs	r3, #0
 8105964:	9300      	str	r3, [sp, #0]
 8105966:	4b11      	ldr	r3, [pc, #68]	; (81059ac <prvCheckForValidListAndQueue+0x74>)
 8105968:	4a11      	ldr	r2, [pc, #68]	; (81059b0 <prvCheckForValidListAndQueue+0x78>)
 810596a:	2110      	movs	r1, #16
 810596c:	200a      	movs	r0, #10
 810596e:	f7fd fb6b 	bl	8103048 <xQueueGenericCreateStatic>
 8105972:	4603      	mov	r3, r0
 8105974:	4a08      	ldr	r2, [pc, #32]	; (8105998 <prvCheckForValidListAndQueue+0x60>)
 8105976:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8105978:	4b07      	ldr	r3, [pc, #28]	; (8105998 <prvCheckForValidListAndQueue+0x60>)
 810597a:	681b      	ldr	r3, [r3, #0]
 810597c:	2b00      	cmp	r3, #0
 810597e:	d005      	beq.n	810598c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8105980:	4b05      	ldr	r3, [pc, #20]	; (8105998 <prvCheckForValidListAndQueue+0x60>)
 8105982:	681b      	ldr	r3, [r3, #0]
 8105984:	490b      	ldr	r1, [pc, #44]	; (81059b4 <prvCheckForValidListAndQueue+0x7c>)
 8105986:	4618      	mov	r0, r3
 8105988:	f7fe f912 	bl	8103bb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810598c:	f7fd fa02 	bl	8102d94 <vPortExitCritical>
}
 8105990:	bf00      	nop
 8105992:	46bd      	mov	sp, r7
 8105994:	bd80      	pop	{r7, pc}
 8105996:	bf00      	nop
 8105998:	10004a48 	.word	0x10004a48
 810599c:	10004a18 	.word	0x10004a18
 81059a0:	10004a2c 	.word	0x10004a2c
 81059a4:	10004a40 	.word	0x10004a40
 81059a8:	10004a44 	.word	0x10004a44
 81059ac:	10004af4 	.word	0x10004af4
 81059b0:	10004a54 	.word	0x10004a54
 81059b4:	08105be8 	.word	0x08105be8

081059b8 <__libc_init_array>:
 81059b8:	b570      	push	{r4, r5, r6, lr}
 81059ba:	4d0d      	ldr	r5, [pc, #52]	; (81059f0 <__libc_init_array+0x38>)
 81059bc:	4c0d      	ldr	r4, [pc, #52]	; (81059f4 <__libc_init_array+0x3c>)
 81059be:	1b64      	subs	r4, r4, r5
 81059c0:	10a4      	asrs	r4, r4, #2
 81059c2:	2600      	movs	r6, #0
 81059c4:	42a6      	cmp	r6, r4
 81059c6:	d109      	bne.n	81059dc <__libc_init_array+0x24>
 81059c8:	4d0b      	ldr	r5, [pc, #44]	; (81059f8 <__libc_init_array+0x40>)
 81059ca:	4c0c      	ldr	r4, [pc, #48]	; (81059fc <__libc_init_array+0x44>)
 81059cc:	f000 f8f2 	bl	8105bb4 <_init>
 81059d0:	1b64      	subs	r4, r4, r5
 81059d2:	10a4      	asrs	r4, r4, #2
 81059d4:	2600      	movs	r6, #0
 81059d6:	42a6      	cmp	r6, r4
 81059d8:	d105      	bne.n	81059e6 <__libc_init_array+0x2e>
 81059da:	bd70      	pop	{r4, r5, r6, pc}
 81059dc:	f855 3b04 	ldr.w	r3, [r5], #4
 81059e0:	4798      	blx	r3
 81059e2:	3601      	adds	r6, #1
 81059e4:	e7ee      	b.n	81059c4 <__libc_init_array+0xc>
 81059e6:	f855 3b04 	ldr.w	r3, [r5], #4
 81059ea:	4798      	blx	r3
 81059ec:	3601      	adds	r6, #1
 81059ee:	e7f2      	b.n	81059d6 <__libc_init_array+0x1e>
 81059f0:	08105c84 	.word	0x08105c84
 81059f4:	08105c84 	.word	0x08105c84
 81059f8:	08105c84 	.word	0x08105c84
 81059fc:	08105c88 	.word	0x08105c88

08105a00 <__retarget_lock_acquire_recursive>:
 8105a00:	4770      	bx	lr

08105a02 <__retarget_lock_release_recursive>:
 8105a02:	4770      	bx	lr

08105a04 <memcpy>:
 8105a04:	440a      	add	r2, r1
 8105a06:	4291      	cmp	r1, r2
 8105a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8105a0c:	d100      	bne.n	8105a10 <memcpy+0xc>
 8105a0e:	4770      	bx	lr
 8105a10:	b510      	push	{r4, lr}
 8105a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8105a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8105a1a:	4291      	cmp	r1, r2
 8105a1c:	d1f9      	bne.n	8105a12 <memcpy+0xe>
 8105a1e:	bd10      	pop	{r4, pc}

08105a20 <memset>:
 8105a20:	4402      	add	r2, r0
 8105a22:	4603      	mov	r3, r0
 8105a24:	4293      	cmp	r3, r2
 8105a26:	d100      	bne.n	8105a2a <memset+0xa>
 8105a28:	4770      	bx	lr
 8105a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8105a2e:	e7f9      	b.n	8105a24 <memset+0x4>

08105a30 <cleanup_glue>:
 8105a30:	b538      	push	{r3, r4, r5, lr}
 8105a32:	460c      	mov	r4, r1
 8105a34:	6809      	ldr	r1, [r1, #0]
 8105a36:	4605      	mov	r5, r0
 8105a38:	b109      	cbz	r1, 8105a3e <cleanup_glue+0xe>
 8105a3a:	f7ff fff9 	bl	8105a30 <cleanup_glue>
 8105a3e:	4621      	mov	r1, r4
 8105a40:	4628      	mov	r0, r5
 8105a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8105a46:	f000 b869 	b.w	8105b1c <_free_r>
	...

08105a4c <_reclaim_reent>:
 8105a4c:	4b2c      	ldr	r3, [pc, #176]	; (8105b00 <_reclaim_reent+0xb4>)
 8105a4e:	681b      	ldr	r3, [r3, #0]
 8105a50:	4283      	cmp	r3, r0
 8105a52:	b570      	push	{r4, r5, r6, lr}
 8105a54:	4604      	mov	r4, r0
 8105a56:	d051      	beq.n	8105afc <_reclaim_reent+0xb0>
 8105a58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8105a5a:	b143      	cbz	r3, 8105a6e <_reclaim_reent+0x22>
 8105a5c:	68db      	ldr	r3, [r3, #12]
 8105a5e:	2b00      	cmp	r3, #0
 8105a60:	d14a      	bne.n	8105af8 <_reclaim_reent+0xac>
 8105a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8105a64:	6819      	ldr	r1, [r3, #0]
 8105a66:	b111      	cbz	r1, 8105a6e <_reclaim_reent+0x22>
 8105a68:	4620      	mov	r0, r4
 8105a6a:	f000 f857 	bl	8105b1c <_free_r>
 8105a6e:	6961      	ldr	r1, [r4, #20]
 8105a70:	b111      	cbz	r1, 8105a78 <_reclaim_reent+0x2c>
 8105a72:	4620      	mov	r0, r4
 8105a74:	f000 f852 	bl	8105b1c <_free_r>
 8105a78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8105a7a:	b111      	cbz	r1, 8105a82 <_reclaim_reent+0x36>
 8105a7c:	4620      	mov	r0, r4
 8105a7e:	f000 f84d 	bl	8105b1c <_free_r>
 8105a82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8105a84:	b111      	cbz	r1, 8105a8c <_reclaim_reent+0x40>
 8105a86:	4620      	mov	r0, r4
 8105a88:	f000 f848 	bl	8105b1c <_free_r>
 8105a8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8105a8e:	b111      	cbz	r1, 8105a96 <_reclaim_reent+0x4a>
 8105a90:	4620      	mov	r0, r4
 8105a92:	f000 f843 	bl	8105b1c <_free_r>
 8105a96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8105a98:	b111      	cbz	r1, 8105aa0 <_reclaim_reent+0x54>
 8105a9a:	4620      	mov	r0, r4
 8105a9c:	f000 f83e 	bl	8105b1c <_free_r>
 8105aa0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8105aa2:	b111      	cbz	r1, 8105aaa <_reclaim_reent+0x5e>
 8105aa4:	4620      	mov	r0, r4
 8105aa6:	f000 f839 	bl	8105b1c <_free_r>
 8105aaa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8105aac:	b111      	cbz	r1, 8105ab4 <_reclaim_reent+0x68>
 8105aae:	4620      	mov	r0, r4
 8105ab0:	f000 f834 	bl	8105b1c <_free_r>
 8105ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8105ab6:	b111      	cbz	r1, 8105abe <_reclaim_reent+0x72>
 8105ab8:	4620      	mov	r0, r4
 8105aba:	f000 f82f 	bl	8105b1c <_free_r>
 8105abe:	69a3      	ldr	r3, [r4, #24]
 8105ac0:	b1e3      	cbz	r3, 8105afc <_reclaim_reent+0xb0>
 8105ac2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8105ac4:	4620      	mov	r0, r4
 8105ac6:	4798      	blx	r3
 8105ac8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8105aca:	b1b9      	cbz	r1, 8105afc <_reclaim_reent+0xb0>
 8105acc:	4620      	mov	r0, r4
 8105ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8105ad2:	f7ff bfad 	b.w	8105a30 <cleanup_glue>
 8105ad6:	5949      	ldr	r1, [r1, r5]
 8105ad8:	b941      	cbnz	r1, 8105aec <_reclaim_reent+0xa0>
 8105ada:	3504      	adds	r5, #4
 8105adc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8105ade:	2d80      	cmp	r5, #128	; 0x80
 8105ae0:	68d9      	ldr	r1, [r3, #12]
 8105ae2:	d1f8      	bne.n	8105ad6 <_reclaim_reent+0x8a>
 8105ae4:	4620      	mov	r0, r4
 8105ae6:	f000 f819 	bl	8105b1c <_free_r>
 8105aea:	e7ba      	b.n	8105a62 <_reclaim_reent+0x16>
 8105aec:	680e      	ldr	r6, [r1, #0]
 8105aee:	4620      	mov	r0, r4
 8105af0:	f000 f814 	bl	8105b1c <_free_r>
 8105af4:	4631      	mov	r1, r6
 8105af6:	e7ef      	b.n	8105ad8 <_reclaim_reent+0x8c>
 8105af8:	2500      	movs	r5, #0
 8105afa:	e7ef      	b.n	8105adc <_reclaim_reent+0x90>
 8105afc:	bd70      	pop	{r4, r5, r6, pc}
 8105afe:	bf00      	nop
 8105b00:	10000014 	.word	0x10000014

08105b04 <__malloc_lock>:
 8105b04:	4801      	ldr	r0, [pc, #4]	; (8105b0c <__malloc_lock+0x8>)
 8105b06:	f7ff bf7b 	b.w	8105a00 <__retarget_lock_acquire_recursive>
 8105b0a:	bf00      	nop
 8105b0c:	10004b44 	.word	0x10004b44

08105b10 <__malloc_unlock>:
 8105b10:	4801      	ldr	r0, [pc, #4]	; (8105b18 <__malloc_unlock+0x8>)
 8105b12:	f7ff bf76 	b.w	8105a02 <__retarget_lock_release_recursive>
 8105b16:	bf00      	nop
 8105b18:	10004b44 	.word	0x10004b44

08105b1c <_free_r>:
 8105b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8105b1e:	2900      	cmp	r1, #0
 8105b20:	d044      	beq.n	8105bac <_free_r+0x90>
 8105b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8105b26:	9001      	str	r0, [sp, #4]
 8105b28:	2b00      	cmp	r3, #0
 8105b2a:	f1a1 0404 	sub.w	r4, r1, #4
 8105b2e:	bfb8      	it	lt
 8105b30:	18e4      	addlt	r4, r4, r3
 8105b32:	f7ff ffe7 	bl	8105b04 <__malloc_lock>
 8105b36:	4a1e      	ldr	r2, [pc, #120]	; (8105bb0 <_free_r+0x94>)
 8105b38:	9801      	ldr	r0, [sp, #4]
 8105b3a:	6813      	ldr	r3, [r2, #0]
 8105b3c:	b933      	cbnz	r3, 8105b4c <_free_r+0x30>
 8105b3e:	6063      	str	r3, [r4, #4]
 8105b40:	6014      	str	r4, [r2, #0]
 8105b42:	b003      	add	sp, #12
 8105b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8105b48:	f7ff bfe2 	b.w	8105b10 <__malloc_unlock>
 8105b4c:	42a3      	cmp	r3, r4
 8105b4e:	d908      	bls.n	8105b62 <_free_r+0x46>
 8105b50:	6825      	ldr	r5, [r4, #0]
 8105b52:	1961      	adds	r1, r4, r5
 8105b54:	428b      	cmp	r3, r1
 8105b56:	bf01      	itttt	eq
 8105b58:	6819      	ldreq	r1, [r3, #0]
 8105b5a:	685b      	ldreq	r3, [r3, #4]
 8105b5c:	1949      	addeq	r1, r1, r5
 8105b5e:	6021      	streq	r1, [r4, #0]
 8105b60:	e7ed      	b.n	8105b3e <_free_r+0x22>
 8105b62:	461a      	mov	r2, r3
 8105b64:	685b      	ldr	r3, [r3, #4]
 8105b66:	b10b      	cbz	r3, 8105b6c <_free_r+0x50>
 8105b68:	42a3      	cmp	r3, r4
 8105b6a:	d9fa      	bls.n	8105b62 <_free_r+0x46>
 8105b6c:	6811      	ldr	r1, [r2, #0]
 8105b6e:	1855      	adds	r5, r2, r1
 8105b70:	42a5      	cmp	r5, r4
 8105b72:	d10b      	bne.n	8105b8c <_free_r+0x70>
 8105b74:	6824      	ldr	r4, [r4, #0]
 8105b76:	4421      	add	r1, r4
 8105b78:	1854      	adds	r4, r2, r1
 8105b7a:	42a3      	cmp	r3, r4
 8105b7c:	6011      	str	r1, [r2, #0]
 8105b7e:	d1e0      	bne.n	8105b42 <_free_r+0x26>
 8105b80:	681c      	ldr	r4, [r3, #0]
 8105b82:	685b      	ldr	r3, [r3, #4]
 8105b84:	6053      	str	r3, [r2, #4]
 8105b86:	4421      	add	r1, r4
 8105b88:	6011      	str	r1, [r2, #0]
 8105b8a:	e7da      	b.n	8105b42 <_free_r+0x26>
 8105b8c:	d902      	bls.n	8105b94 <_free_r+0x78>
 8105b8e:	230c      	movs	r3, #12
 8105b90:	6003      	str	r3, [r0, #0]
 8105b92:	e7d6      	b.n	8105b42 <_free_r+0x26>
 8105b94:	6825      	ldr	r5, [r4, #0]
 8105b96:	1961      	adds	r1, r4, r5
 8105b98:	428b      	cmp	r3, r1
 8105b9a:	bf04      	itt	eq
 8105b9c:	6819      	ldreq	r1, [r3, #0]
 8105b9e:	685b      	ldreq	r3, [r3, #4]
 8105ba0:	6063      	str	r3, [r4, #4]
 8105ba2:	bf04      	itt	eq
 8105ba4:	1949      	addeq	r1, r1, r5
 8105ba6:	6021      	streq	r1, [r4, #0]
 8105ba8:	6054      	str	r4, [r2, #4]
 8105baa:	e7ca      	b.n	8105b42 <_free_r+0x26>
 8105bac:	b003      	add	sp, #12
 8105bae:	bd30      	pop	{r4, r5, pc}
 8105bb0:	10004b48 	.word	0x10004b48

08105bb4 <_init>:
 8105bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105bb6:	bf00      	nop
 8105bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8105bba:	bc08      	pop	{r3}
 8105bbc:	469e      	mov	lr, r3
 8105bbe:	4770      	bx	lr

08105bc0 <_fini>:
 8105bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105bc2:	bf00      	nop
 8105bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8105bc6:	bc08      	pop	{r3}
 8105bc8:	469e      	mov	lr, r3
 8105bca:	4770      	bx	lr
